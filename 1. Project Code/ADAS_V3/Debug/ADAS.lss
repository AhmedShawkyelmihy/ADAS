
ADAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00003dac  00003e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000e0  008000e0  00003ec0  2**0
                  ALLOC
  3 .stab         00003b1c  00000000  00000000  00003ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001640  00000000  00000000  000079dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000af15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d76b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_1>
       8:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_2>
       c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <main>
      8a:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 1e 	jmp	0x3d92	; 0x3d92 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <M_EXTINT_Void_EXTINTInit+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	91 05       	cpc	r25, r1
     b66:	f9 f0       	breq	.+62     	; 0xba6 <M_EXTINT_Void_EXTINTInit+0x60>
     b68:	2a 81       	ldd	r18, Y+2	; 0x02
     b6a:	3b 81       	ldd	r19, Y+3	; 0x03
     b6c:	22 30       	cpi	r18, 0x02	; 2
     b6e:	31 05       	cpc	r19, r1
     b70:	81 f1       	breq	.+96     	; 0xbd2 <M_EXTINT_Void_EXTINTInit+0x8c>
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	9b 81       	ldd	r25, Y+3	; 0x03
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	d1 f5       	brne	.+116    	; 0xbee <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
     b7a:	a5 e5       	ldi	r26, 0x55	; 85
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e5 e5       	ldi	r30, 0x55	; 85
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
     b88:	a5 e5       	ldi	r26, 0x55	; 85
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e5 e5       	ldi	r30, 0x55	; 85
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
     b96:	ab e5       	ldi	r26, 0x5B	; 91
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	eb e5       	ldi	r30, 0x5B	; 91
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	8c 93       	st	X, r24
     ba4:	24 c0       	rjmp	.+72     	; 0xbee <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
     ba6:	a5 e5       	ldi	r26, 0x55	; 85
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e5 e5       	ldi	r30, 0x55	; 85
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
     bb4:	a5 e5       	ldi	r26, 0x55	; 85
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e5 e5       	ldi	r30, 0x55	; 85
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT1_BIT);
     bc2:	ab e5       	ldi	r26, 0x5B	; 91
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e5       	ldi	r30, 0x5B	; 91
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	8c 93       	st	X, r24
     bd0:	0e c0       	rjmp	.+28     	; 0xbee <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
     bd2:	a4 e5       	ldi	r26, 0x54	; 84
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e4 e5       	ldi	r30, 0x54	; 84
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c 93       	st	X, r24
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT2_BIT);
     be0:	ab e5       	ldi	r26, 0x5B	; 91
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	eb e5       	ldi	r30, 0x5B	; 91
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 62       	ori	r24, 0x20	; 32
     bec:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <M_EXTINT_Void_SetCallBack+0x6>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <M_EXTINT_Void_SetCallBack+0x8>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	7b 83       	std	Y+3, r23	; 0x03
     c0c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	3d 83       	std	Y+5, r19	; 0x05
     c16:	2c 83       	std	Y+4, r18	; 0x04
     c18:	8c 81       	ldd	r24, Y+4	; 0x04
     c1a:	9d 81       	ldd	r25, Y+5	; 0x05
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	91 05       	cpc	r25, r1
     c20:	81 f0       	breq	.+32     	; 0xc42 <M_EXTINT_Void_SetCallBack+0x48>
     c22:	2c 81       	ldd	r18, Y+4	; 0x04
     c24:	3d 81       	ldd	r19, Y+5	; 0x05
     c26:	22 30       	cpi	r18, 0x02	; 2
     c28:	31 05       	cpc	r19, r1
     c2a:	91 f0       	breq	.+36     	; 0xc50 <M_EXTINT_Void_SetCallBack+0x56>
     c2c:	8c 81       	ldd	r24, Y+4	; 0x04
     c2e:	9d 81       	ldd	r25, Y+5	; 0x05
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	a1 f4       	brne	.+40     	; 0xc5c <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	90 93 ee 00 	sts	0x00EE, r25
     c3c:	80 93 ed 00 	sts	0x00ED, r24
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	9b 81       	ldd	r25, Y+3	; 0x03
     c46:	90 93 ea 00 	sts	0x00EA, r25
     c4a:	80 93 e9 00 	sts	0x00E9, r24
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	90 93 ec 00 	sts	0x00EC, r25
     c58:	80 93 eb 00 	sts	0x00EB, r24
	default:                                       break;
	}
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <__vector_1>:

ISR(INT0_vect)
{
     c6c:	1f 92       	push	r1
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	0f 92       	push	r0
     c74:	11 24       	eor	r1, r1
     c76:	2f 93       	push	r18
     c78:	3f 93       	push	r19
     c7a:	4f 93       	push	r20
     c7c:	5f 93       	push	r21
     c7e:	6f 93       	push	r22
     c80:	7f 93       	push	r23
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	af 93       	push	r26
     c88:	bf 93       	push	r27
     c8a:	ef 93       	push	r30
     c8c:	ff 93       	push	r31
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
     c96:	e0 91 ed 00 	lds	r30, 0x00ED
     c9a:	f0 91 ee 00 	lds	r31, 0x00EE
     c9e:	09 95       	icall
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_2>:
ISR(INT1_vect)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	5f 93       	push	r21
     cd8:	6f 93       	push	r22
     cda:	7f 93       	push	r23
     cdc:	8f 93       	push	r24
     cde:	9f 93       	push	r25
     ce0:	af 93       	push	r26
     ce2:	bf 93       	push	r27
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
     cf0:	e0 91 e9 00 	lds	r30, 0x00E9
     cf4:	f0 91 ea 00 	lds	r31, 0x00EA
     cf8:	09 95       	icall
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_3>:
ISR(INT2_vect)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
     d4a:	e0 91 eb 00 	lds	r30, 0x00EB
     d4e:	f0 91 ec 00 	lds	r31, 0x00EC
     d52:	09 95       	icall
}
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <M_DIO_Void_SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2a 97       	sbiw	r28, 0x0a	; 10
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	8b 83       	std	Y+3, r24	; 0x03
     d90:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9a e0       	ldi	r25, 0x0A	; 10
     d96:	69 2f       	mov	r22, r25
     d98:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
     d9c:	89 2f       	mov	r24, r25
     d9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9a e0       	ldi	r25, 0x0A	; 10
     da4:	69 2f       	mov	r22, r25
     da6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
     daa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3a 87       	std	Y+10, r19	; 0x0a
     db4:	29 87       	std	Y+9, r18	; 0x09
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	39 f0       	breq	.+14     	; 0xdcc <M_DIO_Void_SetPinDirection+0x52>
     dbe:	29 85       	ldd	r18, Y+9	; 0x09
     dc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     dc2:	21 30       	cpi	r18, 0x01	; 1
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <M_DIO_Void_SetPinDirection+0x50>
     dc8:	76 c0       	rjmp	.+236    	; 0xeb6 <M_DIO_Void_SetPinDirection+0x13c>
     dca:	e4 c0       	rjmp	.+456    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT :
		switch(Local_U8_Port)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	38 87       	std	Y+8, r19	; 0x08
     dd4:	2f 83       	std	Y+7, r18	; 0x07
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	61 f1       	breq	.+88     	; 0xe38 <M_DIO_Void_SetPinDirection+0xbe>
     de0:	2f 81       	ldd	r18, Y+7	; 0x07
     de2:	38 85       	ldd	r19, Y+8	; 0x08
     de4:	23 30       	cpi	r18, 0x03	; 3
     de6:	31 05       	cpc	r19, r1
     de8:	34 f4       	brge	.+12     	; 0xdf6 <M_DIO_Void_SetPinDirection+0x7c>
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	69 f0       	breq	.+26     	; 0xe0e <M_DIO_Void_SetPinDirection+0x94>
     df4:	cf c0       	rjmp	.+414    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
     df6:	2f 81       	ldd	r18, Y+7	; 0x07
     df8:	38 85       	ldd	r19, Y+8	; 0x08
     dfa:	23 30       	cpi	r18, 0x03	; 3
     dfc:	31 05       	cpc	r19, r1
     dfe:	89 f1       	breq	.+98     	; 0xe62 <M_DIO_Void_SetPinDirection+0xe8>
     e00:	8f 81       	ldd	r24, Y+7	; 0x07
     e02:	98 85       	ldd	r25, Y+8	; 0x08
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <M_DIO_Void_SetPinDirection+0x92>
     e0a:	40 c0       	rjmp	.+128    	; 0xe8c <M_DIO_Void_SetPinDirection+0x112>
     e0c:	c3 c0       	rjmp	.+390    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <M_DIO_Void_SetPinDirection+0xb2>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <M_DIO_Void_SetPinDirection+0xae>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	ae c0       	rjmp	.+348    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
     e38:	a7 e3       	ldi	r26, 0x37	; 55
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e3       	ldi	r30, 0x37	; 55
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <M_DIO_Void_SetPinDirection+0xdc>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <M_DIO_Void_SetPinDirection+0xd8>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	99 c0       	rjmp	.+306    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
     e62:	a4 e3       	ldi	r26, 0x34	; 52
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <M_DIO_Void_SetPinDirection+0x106>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <M_DIO_Void_SetPinDirection+0x102>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	84 c0       	rjmp	.+264    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <M_DIO_Void_SetPinDirection+0x130>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <M_DIO_Void_SetPinDirection+0x12c>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	6f c0       	rjmp	.+222    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
		}
		break;
		case OUTPUT:
			switch(Local_U8_Port)
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	91 05       	cpc	r25, r1
     ec8:	51 f1       	breq	.+84     	; 0xf1e <M_DIO_Void_SetPinDirection+0x1a4>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	23 30       	cpi	r18, 0x03	; 3
     ed0:	31 05       	cpc	r19, r1
     ed2:	34 f4       	brge	.+12     	; 0xee0 <M_DIO_Void_SetPinDirection+0x166>
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	61 f0       	breq	.+24     	; 0xef6 <M_DIO_Void_SetPinDirection+0x17c>
     ede:	5a c0       	rjmp	.+180    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
     ee0:	2d 81       	ldd	r18, Y+5	; 0x05
     ee2:	3e 81       	ldd	r19, Y+6	; 0x06
     ee4:	23 30       	cpi	r18, 0x03	; 3
     ee6:	31 05       	cpc	r19, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <M_DIO_Void_SetPinDirection+0x1cc>
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	91 05       	cpc	r25, r1
     ef2:	e9 f1       	breq	.+122    	; 0xf6e <M_DIO_Void_SetPinDirection+0x1f4>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
     ef6:	aa e3       	ldi	r26, 0x3A	; 58
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e3       	ldi	r30, 0x3A	; 58
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <M_DIO_Void_SetPinDirection+0x19a>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <M_DIO_Void_SetPinDirection+0x196>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <M_DIO_Void_SetPinDirection+0x1c2>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <M_DIO_Void_SetPinDirection+0x1be>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <M_DIO_Void_SetPinDirection+0x1ea>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <M_DIO_Void_SetPinDirection+0x1e6>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
     f6e:	a1 e3       	ldi	r26, 0x31	; 49
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e3       	ldi	r30, 0x31	; 49
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <M_DIO_Void_SetPinDirection+0x212>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <M_DIO_Void_SetPinDirection+0x20e>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
			}
			break;
	}
}
     f94:	2a 96       	adiw	r28, 0x0a	; 10
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <M_DIO_Void_SetPinValue>:

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	2a 97       	sbiw	r28, 0x0a	; 10
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9a e0       	ldi	r25, 0x0A	; 10
     fc2:	69 2f       	mov	r22, r25
     fc4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
     fc8:	89 2f       	mov	r24, r25
     fca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9a e0       	ldi	r25, 0x0A	; 10
     fd0:	69 2f       	mov	r22, r25
     fd2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
     fd6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3a 87       	std	Y+10, r19	; 0x0a
     fe0:	29 87       	std	Y+9, r18	; 0x09
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	39 f0       	breq	.+14     	; 0xff8 <M_DIO_Void_SetPinValue+0x52>
     fea:	29 85       	ldd	r18, Y+9	; 0x09
     fec:	3a 85       	ldd	r19, Y+10	; 0x0a
     fee:	21 30       	cpi	r18, 0x01	; 1
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <M_DIO_Void_SetPinValue+0x50>
     ff4:	76 c0       	rjmp	.+236    	; 0x10e2 <M_DIO_Void_SetPinValue+0x13c>
     ff6:	e4 c0       	rjmp	.+456    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW :
		switch(Local_U8_Port)
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	38 87       	std	Y+8, r19	; 0x08
    1000:	2f 83       	std	Y+7, r18	; 0x07
    1002:	8f 81       	ldd	r24, Y+7	; 0x07
    1004:	98 85       	ldd	r25, Y+8	; 0x08
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	91 05       	cpc	r25, r1
    100a:	61 f1       	breq	.+88     	; 0x1064 <M_DIO_Void_SetPinValue+0xbe>
    100c:	2f 81       	ldd	r18, Y+7	; 0x07
    100e:	38 85       	ldd	r19, Y+8	; 0x08
    1010:	23 30       	cpi	r18, 0x03	; 3
    1012:	31 05       	cpc	r19, r1
    1014:	34 f4       	brge	.+12     	; 0x1022 <M_DIO_Void_SetPinValue+0x7c>
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	91 05       	cpc	r25, r1
    101e:	69 f0       	breq	.+26     	; 0x103a <M_DIO_Void_SetPinValue+0x94>
    1020:	cf c0       	rjmp	.+414    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
    1022:	2f 81       	ldd	r18, Y+7	; 0x07
    1024:	38 85       	ldd	r19, Y+8	; 0x08
    1026:	23 30       	cpi	r18, 0x03	; 3
    1028:	31 05       	cpc	r19, r1
    102a:	89 f1       	breq	.+98     	; 0x108e <M_DIO_Void_SetPinValue+0xe8>
    102c:	8f 81       	ldd	r24, Y+7	; 0x07
    102e:	98 85       	ldd	r25, Y+8	; 0x08
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <M_DIO_Void_SetPinValue+0x92>
    1036:	40 c0       	rjmp	.+128    	; 0x10b8 <M_DIO_Void_SetPinValue+0x112>
    1038:	c3 c0       	rjmp	.+390    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <M_DIO_Void_SetPinValue+0xb2>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <M_DIO_Void_SetPinValue+0xae>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	ae c0       	rjmp	.+348    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1064:	a8 e3       	ldi	r26, 0x38	; 56
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <M_DIO_Void_SetPinValue+0xdc>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <M_DIO_Void_SetPinValue+0xd8>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	99 c0       	rjmp	.+306    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <M_DIO_Void_SetPinValue+0x106>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <M_DIO_Void_SetPinValue+0x102>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	84 c0       	rjmp	.+264    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    10b8:	a2 e3       	ldi	r26, 0x32	; 50
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e2 e3       	ldi	r30, 0x32	; 50
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <M_DIO_Void_SetPinValue+0x130>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <M_DIO_Void_SetPinValue+0x12c>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6f c0       	rjmp	.+222    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
		}
		break;
		case HIGH:
			switch(Local_U8_Port)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3e 83       	std	Y+6, r19	; 0x06
    10ea:	2d 83       	std	Y+5, r18	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	51 f1       	breq	.+84     	; 0x114a <M_DIO_Void_SetPinValue+0x1a4>
    10f6:	2d 81       	ldd	r18, Y+5	; 0x05
    10f8:	3e 81       	ldd	r19, Y+6	; 0x06
    10fa:	23 30       	cpi	r18, 0x03	; 3
    10fc:	31 05       	cpc	r19, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <M_DIO_Void_SetPinValue+0x166>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <M_DIO_Void_SetPinValue+0x17c>
    110a:	5a c0       	rjmp	.+180    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	23 30       	cpi	r18, 0x03	; 3
    1112:	31 05       	cpc	r19, r1
    1114:	71 f1       	breq	.+92     	; 0x1172 <M_DIO_Void_SetPinValue+0x1cc>
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	91 05       	cpc	r25, r1
    111e:	e9 f1       	breq	.+122    	; 0x119a <M_DIO_Void_SetPinValue+0x1f4>
    1120:	4f c0       	rjmp	.+158    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1122:	ab e3       	ldi	r26, 0x3B	; 59
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e3       	ldi	r30, 0x3B	; 59
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <M_DIO_Void_SetPinValue+0x19a>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <M_DIO_Void_SetPinValue+0x196>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	3b c0       	rjmp	.+118    	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    114a:	a8 e3       	ldi	r26, 0x38	; 56
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e8 e3       	ldi	r30, 0x38	; 56
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <M_DIO_Void_SetPinValue+0x1c2>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <M_DIO_Void_SetPinValue+0x1be>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	27 c0       	rjmp	.+78     	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <M_DIO_Void_SetPinValue+0x1ea>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <M_DIO_Void_SetPinValue+0x1e6>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	13 c0       	rjmp	.+38     	; 0x11c0 <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <M_DIO_Void_SetPinValue+0x212>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <M_DIO_Void_SetPinValue+0x20e>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
			}
			break;
	}
}
    11c0:	2a 96       	adiw	r28, 0x0a	; 10
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <M_DIO_U8_GetPinValue>:

u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <M_DIO_U8_GetPinValue+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <M_DIO_U8_GetPinValue+0x8>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <M_DIO_U8_GetPinValue+0xa>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_State = HIGH ;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9a e0       	ldi	r25, 0x0A	; 10
    11ea:	69 2f       	mov	r22, r25
    11ec:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
    11f0:	89 2f       	mov	r24, r25
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9a e0       	ldi	r25, 0x0A	; 10
    11f8:	69 2f       	mov	r22, r25
    11fa:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
    11fe:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_U8_Port)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3e 83       	std	Y+6, r19	; 0x06
    1208:	2d 83       	std	Y+5, r18	; 0x05
    120a:	4d 81       	ldd	r20, Y+5	; 0x05
    120c:	5e 81       	ldd	r21, Y+6	; 0x06
    120e:	42 30       	cpi	r20, 0x02	; 2
    1210:	51 05       	cpc	r21, r1
    1212:	41 f1       	breq	.+80     	; 0x1264 <M_DIO_U8_GetPinValue+0x92>
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	34 f4       	brge	.+12     	; 0x122a <M_DIO_U8_GetPinValue+0x58>
    121e:	2d 81       	ldd	r18, Y+5	; 0x05
    1220:	3e 81       	ldd	r19, Y+6	; 0x06
    1222:	21 30       	cpi	r18, 0x01	; 1
    1224:	31 05       	cpc	r19, r1
    1226:	61 f0       	breq	.+24     	; 0x1240 <M_DIO_U8_GetPinValue+0x6e>
    1228:	52 c0       	rjmp	.+164    	; 0x12ce <M_DIO_U8_GetPinValue+0xfc>
    122a:	4d 81       	ldd	r20, Y+5	; 0x05
    122c:	5e 81       	ldd	r21, Y+6	; 0x06
    122e:	43 30       	cpi	r20, 0x03	; 3
    1230:	51 05       	cpc	r21, r1
    1232:	51 f1       	breq	.+84     	; 0x1288 <M_DIO_U8_GetPinValue+0xb6>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	91 05       	cpc	r25, r1
    123c:	b9 f1       	breq	.+110    	; 0x12ac <M_DIO_U8_GetPinValue+0xda>
    123e:	47 c0       	rjmp	.+142    	; 0x12ce <M_DIO_U8_GetPinValue+0xfc>
	{
		case 1: Local_U8_State = GET_BIT(PINA_REG,Local_U8_Pin); break;
    1240:	e9 e3       	ldi	r30, 0x39	; 57
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <M_DIO_U8_GetPinValue+0x86>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <M_DIO_U8_GetPinValue+0x82>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	35 c0       	rjmp	.+106    	; 0x12ce <M_DIO_U8_GetPinValue+0xfc>
		case 2: Local_U8_State = GET_BIT(PINB_REG,Local_U8_Pin); break;
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <M_DIO_U8_GetPinValue+0xaa>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <M_DIO_U8_GetPinValue+0xa6>
    1280:	ca 01       	movw	r24, r20
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	23 c0       	rjmp	.+70     	; 0x12ce <M_DIO_U8_GetPinValue+0xfc>
		case 3: Local_U8_State = GET_BIT(PINC_REG,Local_U8_Pin); break;
    1288:	e3 e3       	ldi	r30, 0x33	; 51
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a9 01       	movw	r20, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <M_DIO_U8_GetPinValue+0xce>
    129c:	55 95       	asr	r21
    129e:	47 95       	ror	r20
    12a0:	8a 95       	dec	r24
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <M_DIO_U8_GetPinValue+0xca>
    12a4:	ca 01       	movw	r24, r20
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <M_DIO_U8_GetPinValue+0xfc>
		case 4: Local_U8_State = GET_BIT(PIND_REG,Local_U8_Pin); break;
    12ac:	e0 e3       	ldi	r30, 0x30	; 48
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a9 01       	movw	r20, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <M_DIO_U8_GetPinValue+0xf2>
    12c0:	55 95       	asr	r21
    12c2:	47 95       	ror	r20
    12c4:	8a 95       	dec	r24
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <M_DIO_U8_GetPinValue+0xee>
    12c8:	ca 01       	movw	r24, r20
    12ca:	81 70       	andi	r24, 0x01	; 1
    12cc:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_U8_State ;
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12d0:	26 96       	adiw	r28, 0x06	; 6
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <M_DIO_Void_TogPin>:

void M_DIO_Void_TogPin (u8 Copy_U8_Num)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <M_DIO_Void_TogPin+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <M_DIO_Void_TogPin+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9a e0       	ldi	r25, 0x0A	; 10
    12f6:	69 2f       	mov	r22, r25
    12f8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
    12fc:	89 2f       	mov	r24, r25
    12fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9a e0       	ldi	r25, 0x0A	; 10
    1304:	69 2f       	mov	r22, r25
    1306:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__udivmodqi4>
    130a:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_U8_Port)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3d 83       	std	Y+5, r19	; 0x05
    1314:	2c 83       	std	Y+4, r18	; 0x04
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	91 05       	cpc	r25, r1
    131e:	51 f1       	breq	.+84     	; 0x1374 <M_DIO_Void_TogPin+0x92>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	23 30       	cpi	r18, 0x03	; 3
    1326:	31 05       	cpc	r19, r1
    1328:	34 f4       	brge	.+12     	; 0x1336 <M_DIO_Void_TogPin+0x54>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	61 f0       	breq	.+24     	; 0x134c <M_DIO_Void_TogPin+0x6a>
    1334:	5a c0       	rjmp	.+180    	; 0x13ea <M_DIO_Void_TogPin+0x108>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	23 30       	cpi	r18, 0x03	; 3
    133c:	31 05       	cpc	r19, r1
    133e:	71 f1       	breq	.+92     	; 0x139c <M_DIO_Void_TogPin+0xba>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	91 05       	cpc	r25, r1
    1348:	e9 f1       	breq	.+122    	; 0x13c4 <M_DIO_Void_TogPin+0xe2>
    134a:	4f c0       	rjmp	.+158    	; 0x13ea <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PINA_REG,Local_U8_Pin); break;
    134c:	a9 e3       	ldi	r26, 0x39	; 57
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e3       	ldi	r30, 0x39	; 57
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <M_DIO_Void_TogPin+0x88>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <M_DIO_Void_TogPin+0x84>
    136e:	84 27       	eor	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	3b c0       	rjmp	.+118    	; 0x13ea <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PINB_REG,Local_U8_Pin); break;
    1374:	a6 e3       	ldi	r26, 0x36	; 54
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e6 e3       	ldi	r30, 0x36	; 54
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <M_DIO_Void_TogPin+0xb0>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <M_DIO_Void_TogPin+0xac>
    1396:	84 27       	eor	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	27 c0       	rjmp	.+78     	; 0x13ea <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PINC_REG,Local_U8_Pin); break;
    139c:	a3 e3       	ldi	r26, 0x33	; 51
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <M_DIO_Void_TogPin+0xd8>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <M_DIO_Void_TogPin+0xd4>
    13be:	84 27       	eor	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	13 c0       	rjmp	.+38     	; 0x13ea <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PIND_REG,Local_U8_Pin); break;
    13c4:	a0 e3       	ldi	r26, 0x30	; 48
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e0 e3       	ldi	r30, 0x30	; 48
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <M_DIO_Void_TogPin+0x100>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <M_DIO_Void_TogPin+0xfc>
    13e6:	84 27       	eor	r24, r20
    13e8:	8c 93       	st	X, r24
	}
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1402:	a7 e2       	ldi	r26, 0x27	; 39
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e2       	ldi	r30, 0x27	; 39
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	80 64       	ori	r24, 0x40	; 64
    140e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1410:	a7 e2       	ldi	r26, 0x27	; 39
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e2       	ldi	r30, 0x27	; 39
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 77       	andi	r24, 0x7F	; 127
    141c:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    141e:	a7 e2       	ldi	r26, 0x27	; 39
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e7 e2       	ldi	r30, 0x27	; 39
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#elif ADC_PRESCALER_DV   ==   64
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
    142c:	a6 e2       	ldi	r26, 0x26	; 38
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e6 e2       	ldi	r30, 0x26	; 38
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    143a:	a6 e2       	ldi	r26, 0x26	; 38
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e6 e2       	ldi	r30, 0x26	; 38
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1448:	a6 e2       	ldi	r26, 0x26	; 38
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e6 e2       	ldi	r30, 0x26	; 38
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	8c 93       	st	X, r24
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1456:	a6 e2       	ldi	r26, 0x26	; 38
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e6 e2       	ldi	r30, 0x26	; 38
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 62       	ori	r24, 0x20	; 32
    1462:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1464:	a6 e2       	ldi	r26, 0x26	; 38
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e6 e2       	ldi	r30, 0x26	; 38
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	8c 93       	st	X, r24
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <M_ADC_U16_ADCRead+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <M_ADC_U16_ADCRead+0x8>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
    1488:	19 82       	std	Y+1, r1	; 0x01
    148a:	1a 82       	std	Y+2, r1	; 0x02
    148c:	1b 82       	std	Y+3, r1	; 0x03
    148e:	1c 82       	std	Y+4, r1	; 0x04

	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1490:	a6 e2       	ldi	r26, 0x26	; 38
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e6 e2       	ldi	r30, 0x26	; 38
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 64       	ori	r24, 0x40	; 64
    149c:	8c 93       	st	X, r24

	ADMUX_REG = ADMUX_REG & 0b11100000;
    149e:	a7 e2       	ldi	r26, 0x27	; 39
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e7 e2       	ldi	r30, 0x27	; 39
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 7e       	andi	r24, 0xE0	; 224
    14aa:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
    14ac:	a7 e2       	ldi	r26, 0x27	; 39
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e2       	ldi	r30, 0x27	; 39
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <M_ADC_U16_ADCRead+0x72>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	ab 81       	ldd	r26, Y+3	; 0x03
    14c4:	bc 81       	ldd	r27, Y+4	; 0x04
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	a1 1d       	adc	r26, r1
    14ca:	b1 1d       	adc	r27, r1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	ab 83       	std	Y+3, r26	; 0x03
    14d2:	bc 83       	std	Y+4, r27	; 0x04
		if((GET_BIT(ADCSRA_REG,ADIF_BIT)) == ADC_CONVERSION_COMPLETE)
    14d4:	e6 e2       	ldi	r30, 0x26	; 38
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 95       	swap	r24
    14dc:	8f 70       	andi	r24, 0x0F	; 15
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	88 23       	and	r24, r24
    14e8:	61 f4       	brne	.+24     	; 0x1502 <M_ADC_U16_ADCRead+0x8a>
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	ab 81       	ldd	r26, Y+3	; 0x03
    14f0:	bc 81       	ldd	r27, Y+4	; 0x04
    14f2:	80 38       	cpi	r24, 0x80	; 128
    14f4:	24 e8       	ldi	r18, 0x84	; 132
    14f6:	92 07       	cpc	r25, r18
    14f8:	2e e1       	ldi	r18, 0x1E	; 30
    14fa:	a2 07       	cpc	r26, r18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	b2 07       	cpc	r27, r18
    1500:	f0 f2       	brcs	.-68     	; 0x14be <M_ADC_U16_ADCRead+0x46>
		if((GET_BIT(ADCSRA_REG,ADIF_BIT)) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
    1502:	e4 e2       	ldi	r30, 0x24	; 36
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <H_PushButton_Void_PushButtonInit>:
#include <util/delay.h>
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <H_PushButton_Void_PushButtonInit+0x6>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3b 83       	std	Y+3, r19	; 0x03
    1530:	2a 83       	std	Y+2, r18	; 0x02
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	f1 f0       	breq	.+60     	; 0x1578 <H_PushButton_Void_PushButtonInit+0x5e>
    153c:	2a 81       	ldd	r18, Y+2	; 0x02
    153e:	3b 81       	ldd	r19, Y+3	; 0x03
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <H_PushButton_Void_PushButtonInit+0x36>
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	61 f0       	breq	.+24     	; 0x1566 <H_PushButton_Void_PushButtonInit+0x4c>
    154e:	2e c0       	rjmp	.+92     	; 0x15ac <H_PushButton_Void_PushButtonInit+0x92>
    1550:	2a 81       	ldd	r18, Y+2	; 0x02
    1552:	3b 81       	ldd	r19, Y+3	; 0x03
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	c1 f0       	breq	.+48     	; 0x158a <H_PushButton_Void_PushButtonInit+0x70>
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	e1 f0       	breq	.+56     	; 0x159c <H_PushButton_Void_PushButtonInit+0x82>
    1564:	23 c0       	rjmp	.+70     	; 0x15ac <H_PushButton_Void_PushButtonInit+0x92>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT);
    1566:	8f e2       	ldi	r24, 0x2F	; 47
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_0_PIN , HIGH) ;
    156e:	8f e2       	ldi	r24, 0x2F	; 47
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1576:	1a c0       	rjmp	.+52     	; 0x15ac <H_PushButton_Void_PushButtonInit+0x92>
	                    break;
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT);
    1578:	8e e2       	ldi	r24, 0x2E	; 46
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_1_PIN , HIGH) ;
    1580:	8e e2       	ldi	r24, 0x2E	; 46
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <H_PushButton_Void_PushButtonInit+0x92>
		                    break;
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT);
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_2_PIN , HIGH) ;
    1592:	8d e2       	ldi	r24, 0x2D	; 45
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <H_PushButton_Void_PushButtonInit+0x92>
		                    break;
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT);
    159c:	8b e2       	ldi	r24, 0x2B	; 43
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_3_PIN , HIGH) ;
    15a4:	8b e2       	ldi	r24, 0x2B	; 43
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
		                    break;
	default:                break;
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	ec 97       	sbiw	r28, 0x3c	; 60
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    15d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3c af       	std	Y+60, r19	; 0x3c
    15da:	2b af       	std	Y+59, r18	; 0x3b
    15dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    15de:	9c ad       	ldd	r25, Y+60	; 0x3c
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <H_PushButton_U8_PushButtonRead+0x30>
    15e6:	97 c0       	rjmp	.+302    	; 0x1716 <H_PushButton_U8_PushButtonRead+0x15e>
    15e8:	2b ad       	ldd	r18, Y+59	; 0x3b
    15ea:	3c ad       	ldd	r19, Y+60	; 0x3c
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	2c f4       	brge	.+10     	; 0x15fc <H_PushButton_U8_PushButtonRead+0x44>
    15f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    15f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	71 f0       	breq	.+28     	; 0x1616 <H_PushButton_U8_PushButtonRead+0x5e>
    15fa:	0b c2       	rjmp	.+1046   	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
    15fc:	2b ad       	ldd	r18, Y+59	; 0x3b
    15fe:	3c ad       	ldd	r19, Y+60	; 0x3c
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <H_PushButton_U8_PushButtonRead+0x50>
    1606:	07 c1       	rjmp	.+526    	; 0x1816 <H_PushButton_U8_PushButtonRead+0x25e>
    1608:	8b ad       	ldd	r24, Y+59	; 0x3b
    160a:	9c ad       	ldd	r25, Y+60	; 0x3c
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <H_PushButton_U8_PushButtonRead+0x5c>
    1612:	81 c1       	rjmp	.+770    	; 0x1916 <H_PushButton_U8_PushButtonRead+0x35e>
    1614:	fe c1       	rjmp	.+1020   	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1616:	8f e2       	ldi	r24, 0x2F	; 47
    1618:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    161c:	88 23       	and	r24, r24
    161e:	09 f0       	breq	.+2      	; 0x1622 <H_PushButton_U8_PushButtonRead+0x6a>
    1620:	f8 c1       	rjmp	.+1008   	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 ea       	ldi	r26, 0xA0	; 160
    1628:	b1 e4       	ldi	r27, 0x41	; 65
    162a:	8d ab       	std	Y+53, r24	; 0x35
    162c:	9e ab       	std	Y+54, r25	; 0x36
    162e:	af ab       	std	Y+55, r26	; 0x37
    1630:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6d a9       	ldd	r22, Y+53	; 0x35
    1634:	7e a9       	ldd	r23, Y+54	; 0x36
    1636:	8f a9       	ldd	r24, Y+55	; 0x37
    1638:	98 ad       	ldd	r25, Y+56	; 0x38
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4a e7       	ldi	r20, 0x7A	; 122
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	89 ab       	std	Y+49, r24	; 0x31
    164c:	9a ab       	std	Y+50, r25	; 0x32
    164e:	ab ab       	std	Y+51, r26	; 0x33
    1650:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1652:	69 a9       	ldd	r22, Y+49	; 0x31
    1654:	7a a9       	ldd	r23, Y+50	; 0x32
    1656:	8b a9       	ldd	r24, Y+51	; 0x33
    1658:	9c a9       	ldd	r25, Y+52	; 0x34
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	98 ab       	std	Y+48, r25	; 0x30
    1670:	8f a7       	std	Y+47, r24	; 0x2f
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    1674:	69 a9       	ldd	r22, Y+49	; 0x31
    1676:	7a a9       	ldd	r23, Y+50	; 0x32
    1678:	8b a9       	ldd	r24, Y+51	; 0x33
    167a:	9c a9       	ldd	r25, Y+52	; 0x34
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	3f ef       	ldi	r19, 0xFF	; 255
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1688:	18 16       	cp	r1, r24
    168a:	4c f5       	brge	.+82     	; 0x16de <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168c:	6d a9       	ldd	r22, Y+53	; 0x35
    168e:	7e a9       	ldd	r23, Y+54	; 0x36
    1690:	8f a9       	ldd	r24, Y+55	; 0x37
    1692:	98 ad       	ldd	r25, Y+56	; 0x38
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	98 ab       	std	Y+48, r25	; 0x30
    16b2:	8f a7       	std	Y+47, r24	; 0x2f
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <H_PushButton_U8_PushButtonRead+0x11c>
    16b6:	80 e9       	ldi	r24, 0x90	; 144
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	9e a7       	std	Y+46, r25	; 0x2e
    16bc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16be:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <H_PushButton_U8_PushButtonRead+0x10a>
    16c6:	9e a7       	std	Y+46, r25	; 0x2e
    16c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    16cc:	98 a9       	ldd	r25, Y+48	; 0x30
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	98 ab       	std	Y+48, r25	; 0x30
    16d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d6:	98 a9       	ldd	r25, Y+48	; 0x30
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	69 f7       	brne	.-38     	; 0x16b6 <H_PushButton_U8_PushButtonRead+0xfe>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16de:	69 a9       	ldd	r22, Y+49	; 0x31
    16e0:	7a a9       	ldd	r23, Y+50	; 0x32
    16e2:	8b a9       	ldd	r24, Y+51	; 0x33
    16e4:	9c a9       	ldd	r25, Y+52	; 0x34
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	98 ab       	std	Y+48, r25	; 0x30
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	9c a7       	std	Y+44, r25	; 0x2c
    16f8:	8b a7       	std	Y+43, r24	; 0x2b
    16fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <H_PushButton_U8_PushButtonRead+0x146>
    1702:	9c a7       	std	Y+44, r25	; 0x2c
    1704:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1706:	8f e2       	ldi	r24, 0x2F	; 47
    1708:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    170c:	88 23       	and	r24, r24
    170e:	09 f0       	breq	.+2      	; 0x1712 <H_PushButton_U8_PushButtonRead+0x15a>
    1710:	80 c1       	rjmp	.+768    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1712:	19 ae       	std	Y+57, r1	; 0x39
    1714:	7e c1       	rjmp	.+764    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1716:	8e e2       	ldi	r24, 0x2E	; 46
    1718:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    171c:	88 23       	and	r24, r24
    171e:	09 f0       	breq	.+2      	; 0x1722 <H_PushButton_U8_PushButtonRead+0x16a>
    1720:	78 c1       	rjmp	.+752    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a0 ea       	ldi	r26, 0xA0	; 160
    1728:	b1 e4       	ldi	r27, 0x41	; 65
    172a:	8f a3       	std	Y+39, r24	; 0x27
    172c:	98 a7       	std	Y+40, r25	; 0x28
    172e:	a9 a7       	std	Y+41, r26	; 0x29
    1730:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	6f a1       	ldd	r22, Y+39	; 0x27
    1734:	78 a5       	ldd	r23, Y+40	; 0x28
    1736:	89 a5       	ldd	r24, Y+41	; 0x29
    1738:	9a a5       	ldd	r25, Y+42	; 0x2a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a e7       	ldi	r20, 0x7A	; 122
    1740:	55 e4       	ldi	r21, 0x45	; 69
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8b a3       	std	Y+35, r24	; 0x23
    174c:	9c a3       	std	Y+36, r25	; 0x24
    174e:	ad a3       	std	Y+37, r26	; 0x25
    1750:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1752:	6b a1       	ldd	r22, Y+35	; 0x23
    1754:	7c a1       	ldd	r23, Y+36	; 0x24
    1756:	8d a1       	ldd	r24, Y+37	; 0x25
    1758:	9e a1       	ldd	r25, Y+38	; 0x26
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	2c f4       	brge	.+10     	; 0x1774 <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    1774:	6b a1       	ldd	r22, Y+35	; 0x23
    1776:	7c a1       	ldd	r23, Y+36	; 0x24
    1778:	8d a1       	ldd	r24, Y+37	; 0x25
    177a:	9e a1       	ldd	r25, Y+38	; 0x26
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	4c f5       	brge	.+82     	; 0x17de <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	6f a1       	ldd	r22, Y+39	; 0x27
    178e:	78 a5       	ldd	r23, Y+40	; 0x28
    1790:	89 a5       	ldd	r24, Y+41	; 0x29
    1792:	9a a5       	ldd	r25, Y+42	; 0x2a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9a a3       	std	Y+34, r25	; 0x22
    17b2:	89 a3       	std	Y+33, r24	; 0x21
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <H_PushButton_U8_PushButtonRead+0x21c>
    17b6:	80 e9       	ldi	r24, 0x90	; 144
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	98 a3       	std	Y+32, r25	; 0x20
    17bc:	8f 8f       	std	Y+31, r24	; 0x1f
    17be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c0:	98 a1       	ldd	r25, Y+32	; 0x20
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <H_PushButton_U8_PushButtonRead+0x20a>
    17c6:	98 a3       	std	Y+32, r25	; 0x20
    17c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	89 a1       	ldd	r24, Y+33	; 0x21
    17cc:	9a a1       	ldd	r25, Y+34	; 0x22
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9a a3       	std	Y+34, r25	; 0x22
    17d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	89 a1       	ldd	r24, Y+33	; 0x21
    17d6:	9a a1       	ldd	r25, Y+34	; 0x22
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	69 f7       	brne	.-38     	; 0x17b6 <H_PushButton_U8_PushButtonRead+0x1fe>
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a a3       	std	Y+34, r25	; 0x22
    17f0:	89 a3       	std	Y+33, r24	; 0x21
    17f2:	89 a1       	ldd	r24, Y+33	; 0x21
    17f4:	9a a1       	ldd	r25, Y+34	; 0x22
    17f6:	9e 8f       	std	Y+30, r25	; 0x1e
    17f8:	8d 8f       	std	Y+29, r24	; 0x1d
    17fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <H_PushButton_U8_PushButtonRead+0x246>
    1802:	9e 8f       	std	Y+30, r25	; 0x1e
    1804:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1806:	8e e2       	ldi	r24, 0x2E	; 46
    1808:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    180c:	88 23       	and	r24, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <H_PushButton_U8_PushButtonRead+0x25a>
    1810:	00 c1       	rjmp	.+512    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1812:	19 ae       	std	Y+57, r1	; 0x39
    1814:	fe c0       	rjmp	.+508    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1816:	8d e2       	ldi	r24, 0x2D	; 45
    1818:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    181c:	88 23       	and	r24, r24
    181e:	09 f0       	breq	.+2      	; 0x1822 <H_PushButton_U8_PushButtonRead+0x26a>
    1820:	f8 c0       	rjmp	.+496    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 ea       	ldi	r26, 0xA0	; 160
    1828:	b1 e4       	ldi	r27, 0x41	; 65
    182a:	89 8f       	std	Y+25, r24	; 0x19
    182c:	9a 8f       	std	Y+26, r25	; 0x1a
    182e:	ab 8f       	std	Y+27, r26	; 0x1b
    1830:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	69 8d       	ldd	r22, Y+25	; 0x19
    1834:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1836:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1838:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	55 e4       	ldi	r21, 0x45	; 69
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	8d 8b       	std	Y+21, r24	; 0x15
    184c:	9e 8b       	std	Y+22, r25	; 0x16
    184e:	af 8b       	std	Y+23, r26	; 0x17
    1850:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1852:	6d 89       	ldd	r22, Y+21	; 0x15
    1854:	7e 89       	ldd	r23, Y+22	; 0x16
    1856:	8f 89       	ldd	r24, Y+23	; 0x17
    1858:	98 8d       	ldd	r25, Y+24	; 0x18
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	5f e3       	ldi	r21, 0x3F	; 63
    1862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	3f ef       	ldi	r19, 0xFF	; 255
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	57 e4       	ldi	r21, 0x47	; 71
    1884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	4c f5       	brge	.+82     	; 0x18de <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188c:	69 8d       	ldd	r22, Y+25	; 0x19
    188e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1890:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1892:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9c 8b       	std	Y+20, r25	; 0x14
    18b2:	8b 8b       	std	Y+19, r24	; 0x13
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <H_PushButton_U8_PushButtonRead+0x31c>
    18b6:	80 e9       	ldi	r24, 0x90	; 144
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	9a 8b       	std	Y+18, r25	; 0x12
    18bc:	89 8b       	std	Y+17, r24	; 0x11
    18be:	89 89       	ldd	r24, Y+17	; 0x11
    18c0:	9a 89       	ldd	r25, Y+18	; 0x12
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <H_PushButton_U8_PushButtonRead+0x30a>
    18c6:	9a 8b       	std	Y+18, r25	; 0x12
    18c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	8b 89       	ldd	r24, Y+19	; 0x13
    18cc:	9c 89       	ldd	r25, Y+20	; 0x14
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	9c 8b       	std	Y+20, r25	; 0x14
    18d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d4:	8b 89       	ldd	r24, Y+19	; 0x13
    18d6:	9c 89       	ldd	r25, Y+20	; 0x14
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	69 f7       	brne	.-38     	; 0x18b6 <H_PushButton_U8_PushButtonRead+0x2fe>
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	8b 89       	ldd	r24, Y+19	; 0x13
    18f4:	9c 89       	ldd	r25, Y+20	; 0x14
    18f6:	98 8b       	std	Y+16, r25	; 0x10
    18f8:	8f 87       	std	Y+15, r24	; 0x0f
    18fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fc:	98 89       	ldd	r25, Y+16	; 0x10
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <H_PushButton_U8_PushButtonRead+0x346>
    1902:	98 8b       	std	Y+16, r25	; 0x10
    1904:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1906:	8d e2       	ldi	r24, 0x2D	; 45
    1908:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    190c:	88 23       	and	r24, r24
    190e:	09 f0       	breq	.+2      	; 0x1912 <H_PushButton_U8_PushButtonRead+0x35a>
    1910:	80 c0       	rjmp	.+256    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1912:	19 ae       	std	Y+57, r1	; 0x39
    1914:	7e c0       	rjmp	.+252    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    1916:	8b e2       	ldi	r24, 0x2B	; 43
    1918:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    191c:	88 23       	and	r24, r24
    191e:	09 f0       	breq	.+2      	; 0x1922 <H_PushButton_U8_PushButtonRead+0x36a>
    1920:	78 c0       	rjmp	.+240    	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 ea       	ldi	r26, 0xA0	; 160
    1928:	b1 e4       	ldi	r27, 0x41	; 65
    192a:	8b 87       	std	Y+11, r24	; 0x0b
    192c:	9c 87       	std	Y+12, r25	; 0x0c
    192e:	ad 87       	std	Y+13, r26	; 0x0d
    1930:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a e7       	ldi	r20, 0x7A	; 122
    1940:	55 e4       	ldi	r21, 0x45	; 69
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8f 83       	std	Y+7, r24	; 0x07
    194c:	98 87       	std	Y+8, r25	; 0x08
    194e:	a9 87       	std	Y+9, r26	; 0x09
    1950:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	6b 85       	ldd	r22, Y+11	; 0x0b
    198e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <H_PushButton_U8_PushButtonRead+0x41c>
    19b6:	80 e9       	ldi	r24, 0x90	; 144
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <H_PushButton_U8_PushButtonRead+0x40a>
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <H_PushButton_U8_PushButtonRead+0x3fe>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6f 81       	ldd	r22, Y+7	; 0x07
    19e0:	78 85       	ldd	r23, Y+8	; 0x08
    19e2:	89 85       	ldd	r24, Y+9	; 0x09
    19e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <H_PushButton_U8_PushButtonRead+0x446>
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    1a06:	8b e2       	ldi	r24, 0x2B	; 43
    1a08:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_DIO_U8_GetPinValue>
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1a10:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    1a12:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1a14:	ec 96       	adiw	r28, 0x3c	; 60
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <H_LED_Void_LedInit>:
#include <util/delay.h>
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <H_LED_Void_LedInit+0x6>
    1a2c:	0f 92       	push	r0
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3b 83       	std	Y+3, r19	; 0x03
    1a3c:	2a 83       	std	Y+2, r18	; 0x02
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	91 05       	cpc	r25, r1
    1a46:	d9 f0       	breq	.+54     	; 0x1a7e <H_LED_Void_LedInit+0x58>
    1a48:	2a 81       	ldd	r18, Y+2	; 0x02
    1a4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a4c:	23 30       	cpi	r18, 0x03	; 3
    1a4e:	31 05       	cpc	r19, r1
    1a50:	34 f4       	brge	.+12     	; 0x1a5e <H_LED_Void_LedInit+0x38>
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	9b 81       	ldd	r25, Y+3	; 0x03
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <H_LED_Void_LedInit+0x4e>
    1a5c:	1e c0       	rjmp	.+60     	; 0x1a9a <H_LED_Void_LedInit+0x74>
    1a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a60:	3b 81       	ldd	r19, Y+3	; 0x03
    1a62:	23 30       	cpi	r18, 0x03	; 3
    1a64:	31 05       	cpc	r19, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <H_LED_Void_LedInit+0x62>
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	91 05       	cpc	r25, r1
    1a70:	81 f0       	breq	.+32     	; 0x1a92 <H_LED_Void_LedInit+0x6c>
    1a72:	13 c0       	rjmp	.+38     	; 0x1a9a <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    1a74:	80 e1       	ldi	r24, 0x10	; 16
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
    1a7c:	0e c0       	rjmp	.+28     	; 0x1a9a <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    1a7e:	8f e0       	ldi	r24, 0x0F	; 15
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    1a88:	8e e0       	ldi	r24, 0x0E	; 14
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    1a92:	8b e1       	ldi	r24, 0x1B	; 27
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <H_LED_Void_LedOn+0x6>
    1aac:	0f 92       	push	r0
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3b 83       	std	Y+3, r19	; 0x03
    1abc:	2a 83       	std	Y+2, r18	; 0x02
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	d9 f0       	breq	.+54     	; 0x1afe <H_LED_Void_LedOn+0x58>
    1ac8:	2a 81       	ldd	r18, Y+2	; 0x02
    1aca:	3b 81       	ldd	r19, Y+3	; 0x03
    1acc:	23 30       	cpi	r18, 0x03	; 3
    1ace:	31 05       	cpc	r19, r1
    1ad0:	34 f4       	brge	.+12     	; 0x1ade <H_LED_Void_LedOn+0x38>
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <H_LED_Void_LedOn+0x4e>
    1adc:	1e c0       	rjmp	.+60     	; 0x1b1a <H_LED_Void_LedOn+0x74>
    1ade:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae2:	23 30       	cpi	r18, 0x03	; 3
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <H_LED_Void_LedOn+0x62>
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	91 05       	cpc	r25, r1
    1af0:	81 f0       	breq	.+32     	; 0x1b12 <H_LED_Void_LedOn+0x6c>
    1af2:	13 c0       	rjmp	.+38     	; 0x1b1a <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    1af4:	80 e1       	ldi	r24, 0x10	; 16
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    1afe:	8f e0       	ldi	r24, 0x0F	; 15
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    1b08:	8e e0       	ldi	r24, 0x0E	; 14
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    1b12:	8b e1       	ldi	r24, 0x1B	; 27
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <H_LED_Void_LedOff+0x6>
    1b2c:	0f 92       	push	r0
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3b 83       	std	Y+3, r19	; 0x03
    1b3c:	2a 83       	std	Y+2, r18	; 0x02
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	91 05       	cpc	r25, r1
    1b46:	d9 f0       	breq	.+54     	; 0x1b7e <H_LED_Void_LedOff+0x58>
    1b48:	2a 81       	ldd	r18, Y+2	; 0x02
    1b4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b4c:	23 30       	cpi	r18, 0x03	; 3
    1b4e:	31 05       	cpc	r19, r1
    1b50:	34 f4       	brge	.+12     	; 0x1b5e <H_LED_Void_LedOff+0x38>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <H_LED_Void_LedOff+0x4e>
    1b5c:	1e c0       	rjmp	.+60     	; 0x1b9a <H_LED_Void_LedOff+0x74>
    1b5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b60:	3b 81       	ldd	r19, Y+3	; 0x03
    1b62:	23 30       	cpi	r18, 0x03	; 3
    1b64:	31 05       	cpc	r19, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <H_LED_Void_LedOff+0x62>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	91 05       	cpc	r25, r1
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <H_LED_Void_LedOff+0x6c>
    1b72:	13 c0       	rjmp	.+38     	; 0x1b9a <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    1b74:	80 e1       	ldi	r24, 0x10	; 16
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    1b7e:	8f e0       	ldi	r24, 0x0F	; 15
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    1b88:	8e e0       	ldi	r24, 0x0E	; 14
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    1b92:	8b e1       	ldi	r24, 0x1B	; 27
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	eb 97       	sbiw	r28, 0x3b	; 59
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    1bbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3b af       	std	Y+59, r19	; 0x3b
    1bc4:	2a af       	std	Y+58, r18	; 0x3a
    1bc6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bc8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	91 05       	cpc	r25, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <H_LED_Void_LedBlink+0x2c>
    1bd0:	93 c0       	rjmp	.+294    	; 0x1cf8 <H_LED_Void_LedBlink+0x152>
    1bd2:	2a ad       	ldd	r18, Y+58	; 0x3a
    1bd4:	3b ad       	ldd	r19, Y+59	; 0x3b
    1bd6:	23 30       	cpi	r18, 0x03	; 3
    1bd8:	31 05       	cpc	r19, r1
    1bda:	34 f4       	brge	.+12     	; 0x1be8 <H_LED_Void_LedBlink+0x42>
    1bdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bde:	9b ad       	ldd	r25, Y+59	; 0x3b
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	91 05       	cpc	r25, r1
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <H_LED_Void_LedBlink+0x5c>
    1be6:	f8 c1       	rjmp	.+1008   	; 0x1fd8 <H_LED_Void_LedBlink+0x432>
    1be8:	2a ad       	ldd	r18, Y+58	; 0x3a
    1bea:	3b ad       	ldd	r19, Y+59	; 0x3b
    1bec:	23 30       	cpi	r18, 0x03	; 3
    1bee:	31 05       	cpc	r19, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <H_LED_Void_LedBlink+0x4e>
    1bf2:	fd c0       	rjmp	.+506    	; 0x1dee <H_LED_Void_LedBlink+0x248>
    1bf4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bf6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <H_LED_Void_LedBlink+0x5a>
    1bfe:	72 c1       	rjmp	.+740    	; 0x1ee4 <H_LED_Void_LedBlink+0x33e>
    1c00:	eb c1       	rjmp	.+982    	; 0x1fd8 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    1c02:	80 e1       	ldi	r24, 0x10	; 16
    1c04:	61 e0       	ldi	r22, 0x01	; 1
    1c06:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a6 e9       	ldi	r26, 0x96	; 150
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	8d ab       	std	Y+53, r24	; 0x35
    1c14:	9e ab       	std	Y+54, r25	; 0x36
    1c16:	af ab       	std	Y+55, r26	; 0x37
    1c18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c20:	98 ad       	ldd	r25, Y+56	; 0x38
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	55 e4       	ldi	r21, 0x45	; 69
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	89 ab       	std	Y+49, r24	; 0x31
    1c34:	9a ab       	std	Y+50, r25	; 0x32
    1c36:	ab ab       	std	Y+51, r26	; 0x33
    1c38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    1c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c60:	8b a9       	ldd	r24, Y+51	; 0x33
    1c62:	9c a9       	ldd	r25, Y+52	; 0x34
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6d a9       	ldd	r22, Y+53	; 0x35
    1c76:	7e a9       	ldd	r23, Y+54	; 0x36
    1c78:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <H_LED_Void_LedBlink+0x116>
    1c9e:	80 e9       	ldi	r24, 0x90	; 144
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	9e a7       	std	Y+46, r25	; 0x2e
    1ca4:	8d a7       	std	Y+45, r24	; 0x2d
    1ca6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <H_LED_Void_LedBlink+0x104>
    1cae:	9e a7       	std	Y+46, r25	; 0x2e
    1cb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	98 ab       	std	Y+48, r25	; 0x30
    1cba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <H_LED_Void_LedBlink+0xf8>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8f a7       	std	Y+47, r24	; 0x2f
    1cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cde:	9c a7       	std	Y+44, r25	; 0x2c
    1ce0:	8b a7       	std	Y+43, r24	; 0x2b
    1ce2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <H_LED_Void_LedBlink+0x140>
    1cea:	9c a7       	std	Y+44, r25	; 0x2c
    1cec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    1cee:	80 e1       	ldi	r24, 0x10	; 16
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1cf6:	70 c1       	rjmp	.+736    	; 0x1fd8 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    1cf8:	8f e0       	ldi	r24, 0x0F	; 15
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a6 e9       	ldi	r26, 0x96	; 150
    1d06:	b3 e4       	ldi	r27, 0x43	; 67
    1d08:	8f a3       	std	Y+39, r24	; 0x27
    1d0a:	98 a7       	std	Y+40, r25	; 0x28
    1d0c:	a9 a7       	std	Y+41, r26	; 0x29
    1d0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	6f a1       	ldd	r22, Y+39	; 0x27
    1d12:	78 a5       	ldd	r23, Y+40	; 0x28
    1d14:	89 a5       	ldd	r24, Y+41	; 0x29
    1d16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	55 e4       	ldi	r21, 0x45	; 69
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8b a3       	std	Y+35, r24	; 0x23
    1d2a:	9c a3       	std	Y+36, r25	; 0x24
    1d2c:	ad a3       	std	Y+37, r26	; 0x25
    1d2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d30:	6b a1       	ldd	r22, Y+35	; 0x23
    1d32:	7c a1       	ldd	r23, Y+36	; 0x24
    1d34:	8d a1       	ldd	r24, Y+37	; 0x25
    1d36:	9e a1       	ldd	r25, Y+38	; 0x26
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    1d52:	6b a1       	ldd	r22, Y+35	; 0x23
    1d54:	7c a1       	ldd	r23, Y+36	; 0x24
    1d56:	8d a1       	ldd	r24, Y+37	; 0x25
    1d58:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	4c f5       	brge	.+82     	; 0x1dbc <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9a a3       	std	Y+34, r25	; 0x22
    1d90:	89 a3       	std	Y+33, r24	; 0x21
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <H_LED_Void_LedBlink+0x20c>
    1d94:	80 e9       	ldi	r24, 0x90	; 144
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	98 a3       	std	Y+32, r25	; 0x20
    1d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <H_LED_Void_LedBlink+0x1fa>
    1da4:	98 a3       	std	Y+32, r25	; 0x20
    1da6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	89 a1       	ldd	r24, Y+33	; 0x21
    1daa:	9a a1       	ldd	r25, Y+34	; 0x22
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	89 a1       	ldd	r24, Y+33	; 0x21
    1db4:	9a a1       	ldd	r25, Y+34	; 0x22
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <H_LED_Void_LedBlink+0x1ee>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9a a3       	std	Y+34, r25	; 0x22
    1dce:	89 a3       	std	Y+33, r24	; 0x21
    1dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <H_LED_Void_LedBlink+0x236>
    1de0:	9e 8f       	std	Y+30, r25	; 0x1e
    1de2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    1de4:	8f e0       	ldi	r24, 0x0F	; 15
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1dec:	f5 c0       	rjmp	.+490    	; 0x1fd8 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    1dee:	8e e0       	ldi	r24, 0x0E	; 14
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a6 e9       	ldi	r26, 0x96	; 150
    1dfc:	b3 e4       	ldi	r27, 0x43	; 67
    1dfe:	89 8f       	std	Y+25, r24	; 0x19
    1e00:	9a 8f       	std	Y+26, r25	; 0x1a
    1e02:	ab 8f       	std	Y+27, r26	; 0x1b
    1e04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	69 8d       	ldd	r22, Y+25	; 0x19
    1e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	55 e4       	ldi	r21, 0x45	; 69
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8d 8b       	std	Y+21, r24	; 0x15
    1e20:	9e 8b       	std	Y+22, r25	; 0x16
    1e22:	af 8b       	std	Y+23, r26	; 0x17
    1e24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <H_LED_Void_LedBlink+0x302>
    1e8a:	80 e9       	ldi	r24, 0x90	; 144
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	9a 8b       	std	Y+18, r25	; 0x12
    1e90:	89 8b       	std	Y+17, r24	; 0x11
    1e92:	89 89       	ldd	r24, Y+17	; 0x11
    1e94:	9a 89       	ldd	r25, Y+18	; 0x12
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <H_LED_Void_LedBlink+0x2f0>
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <H_LED_Void_LedBlink+0x2e4>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9c 8b       	std	Y+20, r25	; 0x14
    1ec4:	8b 8b       	std	Y+19, r24	; 0x13
    1ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eca:	98 8b       	std	Y+16, r25	; 0x10
    1ecc:	8f 87       	std	Y+15, r24	; 0x0f
    1ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed0:	98 89       	ldd	r25, Y+16	; 0x10
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <H_LED_Void_LedBlink+0x32c>
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    1eda:	8e e0       	ldi	r24, 0x0E	; 14
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1ee2:	7a c0       	rjmp	.+244    	; 0x1fd8 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    1ee4:	8b e1       	ldi	r24, 0x1B	; 27
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a6 e9       	ldi	r26, 0x96	; 150
    1ef2:	b3 e4       	ldi	r27, 0x43	; 67
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	55 e4       	ldi	r21, 0x45	; 69
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <H_LED_Void_LedBlink+0x3f8>
    1f80:	80 e9       	ldi	r24, 0x90	; 144
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <H_LED_Void_LedBlink+0x3e6>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <H_LED_Void_LedBlink+0x3da>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <H_LED_Void_LedBlink+0x422>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    1fd0:	8b e1       	ldi	r24, 0x1B	; 27
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    1fd8:	eb 96       	adiw	r28, 0x3b	; 59
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <H_LED_Void_LedTog+0x6>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	3b 83       	std	Y+3, r19	; 0x03
    2000:	2a 83       	std	Y+2, r18	; 0x02
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	91 05       	cpc	r25, r1
    200a:	d1 f0       	breq	.+52     	; 0x2040 <H_LED_Void_LedTog+0x56>
    200c:	2a 81       	ldd	r18, Y+2	; 0x02
    200e:	3b 81       	ldd	r19, Y+3	; 0x03
    2010:	23 30       	cpi	r18, 0x03	; 3
    2012:	31 05       	cpc	r19, r1
    2014:	34 f4       	brge	.+12     	; 0x2022 <H_LED_Void_LedTog+0x38>
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	91 05       	cpc	r25, r1
    201e:	61 f0       	breq	.+24     	; 0x2038 <H_LED_Void_LedTog+0x4e>
    2020:	1a c0       	rjmp	.+52     	; 0x2056 <H_LED_Void_LedTog+0x6c>
    2022:	2a 81       	ldd	r18, Y+2	; 0x02
    2024:	3b 81       	ldd	r19, Y+3	; 0x03
    2026:	23 30       	cpi	r18, 0x03	; 3
    2028:	31 05       	cpc	r19, r1
    202a:	71 f0       	breq	.+28     	; 0x2048 <H_LED_Void_LedTog+0x5e>
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	84 30       	cpi	r24, 0x04	; 4
    2032:	91 05       	cpc	r25, r1
    2034:	69 f0       	breq	.+26     	; 0x2050 <H_LED_Void_LedTog+0x66>
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2038:	80 e1       	ldi	r24, 0x10	; 16
    203a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <M_DIO_Void_TogPin>
    203e:	0b c0       	rjmp	.+22     	; 0x2056 <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2040:	8f e0       	ldi	r24, 0x0F	; 15
    2042:	0e 94 71 09 	call	0x12e2	; 0x12e2 <M_DIO_Void_TogPin>
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2048:	8e e0       	ldi	r24, 0x0E	; 14
    204a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <M_DIO_Void_TogPin>
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2050:	8b e1       	ldi	r24, 0x1B	; 27
    2052:	0e 94 71 09 	call	0x12e2	; 0x12e2 <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    206a:	84 e1       	ldi	r24, 0x14	; 20
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    2072:	85 e1       	ldi	r24, 0x15	; 21
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    207a:	86 e1       	ldi	r24, 0x16	; 22
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    2082:	88 e1       	ldi	r24, 0x18	; 24
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    208a:	8d e0       	ldi	r24, 0x0D	; 13
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    2092:	8c e0       	ldi	r24, 0x0C	; 12
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    209a:	83 e3       	ldi	r24, 0x33	; 51
    209c:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    20a0:	82 e3       	ldi	r24, 0x32	; 50
    20a2:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    20a6:	88 e2       	ldi	r24, 0x28	; 40
    20a8:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    20ac:	8c e0       	ldi	r24, 0x0C	; 12
    20ae:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	e9 97       	sbiw	r28, 0x39	; 57
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    20da:	8d e0       	ldi	r24, 0x0D	; 13
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	82 95       	swap	r24
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	98 2f       	mov	r25, r24
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	84 e1       	ldi	r24, 0x14	; 20
    20ee:	69 2f       	mov	r22, r25
    20f0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    20f4:	89 ad       	ldd	r24, Y+57	; 0x39
    20f6:	82 95       	swap	r24
    20f8:	86 95       	lsr	r24
    20fa:	87 70       	andi	r24, 0x07	; 7
    20fc:	98 2f       	mov	r25, r24
    20fe:	91 70       	andi	r25, 0x01	; 1
    2100:	85 e1       	ldi	r24, 0x15	; 21
    2102:	69 2f       	mov	r22, r25
    2104:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    2108:	89 ad       	ldd	r24, Y+57	; 0x39
    210a:	82 95       	swap	r24
    210c:	86 95       	lsr	r24
    210e:	86 95       	lsr	r24
    2110:	83 70       	andi	r24, 0x03	; 3
    2112:	98 2f       	mov	r25, r24
    2114:	91 70       	andi	r25, 0x01	; 1
    2116:	86 e1       	ldi	r24, 0x16	; 22
    2118:	69 2f       	mov	r22, r25
    211a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    211e:	89 ad       	ldd	r24, Y+57	; 0x39
    2120:	98 2f       	mov	r25, r24
    2122:	99 1f       	adc	r25, r25
    2124:	99 27       	eor	r25, r25
    2126:	99 1f       	adc	r25, r25
    2128:	88 e1       	ldi	r24, 0x18	; 24
    212a:	69 2f       	mov	r22, r25
    212c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2130:	8c e0       	ldi	r24, 0x0C	; 12
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e8       	ldi	r26, 0x80	; 128
    213e:	bf e3       	ldi	r27, 0x3F	; 63
    2140:	8d ab       	std	Y+53, r24	; 0x35
    2142:	9e ab       	std	Y+54, r25	; 0x36
    2144:	af ab       	std	Y+55, r26	; 0x37
    2146:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6d a9       	ldd	r22, Y+53	; 0x35
    214a:	7e a9       	ldd	r23, Y+54	; 0x36
    214c:	8f a9       	ldd	r24, Y+55	; 0x37
    214e:	98 ad       	ldd	r25, Y+56	; 0x38
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	55 e4       	ldi	r21, 0x45	; 69
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	89 ab       	std	Y+49, r24	; 0x31
    2162:	9a ab       	std	Y+50, r25	; 0x32
    2164:	ab ab       	std	Y+51, r26	; 0x33
    2166:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2168:	69 a9       	ldd	r22, Y+49	; 0x31
    216a:	7a a9       	ldd	r23, Y+50	; 0x32
    216c:	8b a9       	ldd	r24, Y+51	; 0x33
    216e:	9c a9       	ldd	r25, Y+52	; 0x34
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	98 ab       	std	Y+48, r25	; 0x30
    2186:	8f a7       	std	Y+47, r24	; 0x2f
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    218a:	69 a9       	ldd	r22, Y+49	; 0x31
    218c:	7a a9       	ldd	r23, Y+50	; 0x32
    218e:	8b a9       	ldd	r24, Y+51	; 0x33
    2190:	9c a9       	ldd	r25, Y+52	; 0x34
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6d a9       	ldd	r22, Y+53	; 0x35
    21a4:	7e a9       	ldd	r23, Y+54	; 0x36
    21a6:	8f a9       	ldd	r24, Y+55	; 0x37
    21a8:	98 ad       	ldd	r25, Y+56	; 0x38
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	98 ab       	std	Y+48, r25	; 0x30
    21c8:	8f a7       	std	Y+47, r24	; 0x2f
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <H_Lcd_Void_LCDWriteCharacter+0x126>
    21cc:	80 e9       	ldi	r24, 0x90	; 144
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	9e a7       	std	Y+46, r25	; 0x2e
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
    21d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <H_Lcd_Void_LCDWriteCharacter+0x114>
    21dc:	9e a7       	std	Y+46, r25	; 0x2e
    21de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	98 ab       	std	Y+48, r25	; 0x30
    21e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <H_Lcd_Void_LCDWriteCharacter+0x108>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	69 a9       	ldd	r22, Y+49	; 0x31
    21f6:	7a a9       	ldd	r23, Y+50	; 0x32
    21f8:	8b a9       	ldd	r24, Y+51	; 0x33
    21fa:	9c a9       	ldd	r25, Y+52	; 0x34
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	98 ab       	std	Y+48, r25	; 0x30
    2206:	8f a7       	std	Y+47, r24	; 0x2f
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	9c a7       	std	Y+44, r25	; 0x2c
    220e:	8b a7       	std	Y+43, r24	; 0x2b
    2210:	8b a5       	ldd	r24, Y+43	; 0x2b
    2212:	9c a5       	ldd	r25, Y+44	; 0x2c
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <H_Lcd_Void_LCDWriteCharacter+0x150>
    2218:	9c a7       	std	Y+44, r25	; 0x2c
    221a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    221c:	8c e0       	ldi	r24, 0x0C	; 12
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e8       	ldi	r26, 0x80	; 128
    222a:	bf e3       	ldi	r27, 0x3F	; 63
    222c:	8f a3       	std	Y+39, r24	; 0x27
    222e:	98 a7       	std	Y+40, r25	; 0x28
    2230:	a9 a7       	std	Y+41, r26	; 0x29
    2232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	6f a1       	ldd	r22, Y+39	; 0x27
    2236:	78 a5       	ldd	r23, Y+40	; 0x28
    2238:	89 a5       	ldd	r24, Y+41	; 0x29
    223a:	9a a5       	ldd	r25, Y+42	; 0x2a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a e7       	ldi	r20, 0x7A	; 122
    2242:	55 e4       	ldi	r21, 0x45	; 69
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8b a3       	std	Y+35, r24	; 0x23
    224e:	9c a3       	std	Y+36, r25	; 0x24
    2250:	ad a3       	std	Y+37, r26	; 0x25
    2252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2254:	6b a1       	ldd	r22, Y+35	; 0x23
    2256:	7c a1       	ldd	r23, Y+36	; 0x24
    2258:	8d a1       	ldd	r24, Y+37	; 0x25
    225a:	9e a1       	ldd	r25, Y+38	; 0x26
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9a a3       	std	Y+34, r25	; 0x22
    2272:	89 a3       	std	Y+33, r24	; 0x21
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2276:	6b a1       	ldd	r22, Y+35	; 0x23
    2278:	7c a1       	ldd	r23, Y+36	; 0x24
    227a:	8d a1       	ldd	r24, Y+37	; 0x25
    227c:	9e a1       	ldd	r25, Y+38	; 0x26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	3f ef       	ldi	r19, 0xFF	; 255
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	57 e4       	ldi	r21, 0x47	; 71
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	4c f5       	brge	.+82     	; 0x22e0 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	6f a1       	ldd	r22, Y+39	; 0x27
    2290:	78 a5       	ldd	r23, Y+40	; 0x28
    2292:	89 a5       	ldd	r24, Y+41	; 0x29
    2294:	9a a5       	ldd	r25, Y+42	; 0x2a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <H_Lcd_Void_LCDWriteCharacter+0x212>
    22b8:	80 e9       	ldi	r24, 0x90	; 144
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	98 a3       	std	Y+32, r25	; 0x20
    22be:	8f 8f       	std	Y+31, r24	; 0x1f
    22c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c2:	98 a1       	ldd	r25, Y+32	; 0x20
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <H_Lcd_Void_LCDWriteCharacter+0x200>
    22c8:	98 a3       	std	Y+32, r25	; 0x20
    22ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	89 a1       	ldd	r24, Y+33	; 0x21
    22ce:	9a a1       	ldd	r25, Y+34	; 0x22
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9a a3       	std	Y+34, r25	; 0x22
    22d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	89 a1       	ldd	r24, Y+33	; 0x21
    22d8:	9a a1       	ldd	r25, Y+34	; 0x22
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e0:	6b a1       	ldd	r22, Y+35	; 0x23
    22e2:	7c a1       	ldd	r23, Y+36	; 0x24
    22e4:	8d a1       	ldd	r24, Y+37	; 0x25
    22e6:	9e a1       	ldd	r25, Y+38	; 0x26
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9a a3       	std	Y+34, r25	; 0x22
    22f2:	89 a3       	std	Y+33, r24	; 0x21
    22f4:	89 a1       	ldd	r24, Y+33	; 0x21
    22f6:	9a a1       	ldd	r25, Y+34	; 0x22
    22f8:	9e 8f       	std	Y+30, r25	; 0x1e
    22fa:	8d 8f       	std	Y+29, r24	; 0x1d
    22fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    2304:	9e 8f       	std	Y+30, r25	; 0x1e
    2306:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2308:	89 ad       	ldd	r24, Y+57	; 0x39
    230a:	98 2f       	mov	r25, r24
    230c:	91 70       	andi	r25, 0x01	; 1
    230e:	84 e1       	ldi	r24, 0x14	; 20
    2310:	69 2f       	mov	r22, r25
    2312:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    2316:	89 ad       	ldd	r24, Y+57	; 0x39
    2318:	86 95       	lsr	r24
    231a:	98 2f       	mov	r25, r24
    231c:	91 70       	andi	r25, 0x01	; 1
    231e:	85 e1       	ldi	r24, 0x15	; 21
    2320:	69 2f       	mov	r22, r25
    2322:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    2326:	89 ad       	ldd	r24, Y+57	; 0x39
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	98 2f       	mov	r25, r24
    232e:	91 70       	andi	r25, 0x01	; 1
    2330:	86 e1       	ldi	r24, 0x16	; 22
    2332:	69 2f       	mov	r22, r25
    2334:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    2338:	89 ad       	ldd	r24, Y+57	; 0x39
    233a:	86 95       	lsr	r24
    233c:	86 95       	lsr	r24
    233e:	86 95       	lsr	r24
    2340:	98 2f       	mov	r25, r24
    2342:	91 70       	andi	r25, 0x01	; 1
    2344:	88 e1       	ldi	r24, 0x18	; 24
    2346:	69 2f       	mov	r22, r25
    2348:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    234c:	8c e0       	ldi	r24, 0x0C	; 12
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	89 8f       	std	Y+25, r24	; 0x19
    235e:	9a 8f       	std	Y+26, r25	; 0x1a
    2360:	ab 8f       	std	Y+27, r26	; 0x1b
    2362:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	55 e4       	ldi	r21, 0x45	; 69
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8d 8b       	std	Y+21, r24	; 0x15
    237e:	9e 8b       	std	Y+22, r25	; 0x16
    2380:	af 8b       	std	Y+23, r26	; 0x17
    2382:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2384:	6d 89       	ldd	r22, Y+21	; 0x15
    2386:	7e 89       	ldd	r23, Y+22	; 0x16
    2388:	8f 89       	ldd	r24, Y+23	; 0x17
    238a:	98 8d       	ldd	r25, Y+24	; 0x18
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
    23a2:	8b 8b       	std	Y+19, r24	; 0x13
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    23a6:	6d 89       	ldd	r22, Y+21	; 0x15
    23a8:	7e 89       	ldd	r23, Y+22	; 0x16
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	69 8d       	ldd	r22, Y+25	; 0x19
    23c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9c 8b       	std	Y+20, r25	; 0x14
    23e4:	8b 8b       	std	Y+19, r24	; 0x13
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <H_Lcd_Void_LCDWriteCharacter+0x342>
    23e8:	80 e9       	ldi	r24, 0x90	; 144
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	9a 8b       	std	Y+18, r25	; 0x12
    23ee:	89 8b       	std	Y+17, r24	; 0x11
    23f0:	89 89       	ldd	r24, Y+17	; 0x11
    23f2:	9a 89       	ldd	r25, Y+18	; 0x12
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <H_Lcd_Void_LCDWriteCharacter+0x330>
    23f8:	9a 8b       	std	Y+18, r25	; 0x12
    23fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8b 89       	ldd	r24, Y+19	; 0x13
    23fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9c 8b       	std	Y+20, r25	; 0x14
    2404:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8b 89       	ldd	r24, Y+19	; 0x13
    2408:	9c 89       	ldd	r25, Y+20	; 0x14
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <H_Lcd_Void_LCDWriteCharacter+0x324>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6d 89       	ldd	r22, Y+21	; 0x15
    2412:	7e 89       	ldd	r23, Y+22	; 0x16
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	98 8d       	ldd	r25, Y+24	; 0x18
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	8b 89       	ldd	r24, Y+19	; 0x13
    2426:	9c 89       	ldd	r25, Y+20	; 0x14
    2428:	98 8b       	std	Y+16, r25	; 0x10
    242a:	8f 87       	std	Y+15, r24	; 0x0f
    242c:	8f 85       	ldd	r24, Y+15	; 0x0f
    242e:	98 89       	ldd	r25, Y+16	; 0x10
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2434:	98 8b       	std	Y+16, r25	; 0x10
    2436:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2438:	8c e0       	ldi	r24, 0x0C	; 12
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 ea       	ldi	r26, 0xA0	; 160
    2446:	b0 e4       	ldi	r27, 0x40	; 64
    2448:	8b 87       	std	Y+11, r24	; 0x0b
    244a:	9c 87       	std	Y+12, r25	; 0x0c
    244c:	ad 87       	std	Y+13, r26	; 0x0d
    244e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	6b 85       	ldd	r22, Y+11	; 0x0b
    2452:	7c 85       	ldd	r23, Y+12	; 0x0c
    2454:	8d 85       	ldd	r24, Y+13	; 0x0d
    2456:	9e 85       	ldd	r25, Y+14	; 0x0e
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	55 e4       	ldi	r21, 0x45	; 69
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	8f 83       	std	Y+7, r24	; 0x07
    246a:	98 87       	std	Y+8, r25	; 0x08
    246c:	a9 87       	std	Y+9, r26	; 0x09
    246e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    24d4:	80 e9       	ldi	r24, 0x90	; 144
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	9c 83       	std	Y+4, r25	; 0x04
    24da:	8b 83       	std	Y+3, r24	; 0x03
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <H_Lcd_Void_LCDWriteCharacter+0x410>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <H_Lcd_Void_LCDWriteCharacter+0x458>
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2524:	e9 96       	adiw	r28, 0x39	; 57
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	e9 97       	sbiw	r28, 0x39	; 57
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    254c:	8d e0       	ldi	r24, 0x0D	; 13
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2554:	89 ad       	ldd	r24, Y+57	; 0x39
    2556:	82 95       	swap	r24
    2558:	8f 70       	andi	r24, 0x0F	; 15
    255a:	98 2f       	mov	r25, r24
    255c:	91 70       	andi	r25, 0x01	; 1
    255e:	84 e1       	ldi	r24, 0x14	; 20
    2560:	69 2f       	mov	r22, r25
    2562:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2566:	89 ad       	ldd	r24, Y+57	; 0x39
    2568:	82 95       	swap	r24
    256a:	86 95       	lsr	r24
    256c:	87 70       	andi	r24, 0x07	; 7
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	85 e1       	ldi	r24, 0x15	; 21
    2574:	69 2f       	mov	r22, r25
    2576:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    257a:	89 ad       	ldd	r24, Y+57	; 0x39
    257c:	82 95       	swap	r24
    257e:	86 95       	lsr	r24
    2580:	86 95       	lsr	r24
    2582:	83 70       	andi	r24, 0x03	; 3
    2584:	98 2f       	mov	r25, r24
    2586:	91 70       	andi	r25, 0x01	; 1
    2588:	86 e1       	ldi	r24, 0x16	; 22
    258a:	69 2f       	mov	r22, r25
    258c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2590:	89 ad       	ldd	r24, Y+57	; 0x39
    2592:	98 2f       	mov	r25, r24
    2594:	99 1f       	adc	r25, r25
    2596:	99 27       	eor	r25, r25
    2598:	99 1f       	adc	r25, r25
    259a:	88 e1       	ldi	r24, 0x18	; 24
    259c:	69 2f       	mov	r22, r25
    259e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    25a2:	8c e0       	ldi	r24, 0x0C	; 12
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	8d ab       	std	Y+53, r24	; 0x35
    25b4:	9e ab       	std	Y+54, r25	; 0x36
    25b6:	af ab       	std	Y+55, r26	; 0x37
    25b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	6d a9       	ldd	r22, Y+53	; 0x35
    25bc:	7e a9       	ldd	r23, Y+54	; 0x36
    25be:	8f a9       	ldd	r24, Y+55	; 0x37
    25c0:	98 ad       	ldd	r25, Y+56	; 0x38
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a e7       	ldi	r20, 0x7A	; 122
    25c8:	55 e4       	ldi	r21, 0x45	; 69
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	89 ab       	std	Y+49, r24	; 0x31
    25d4:	9a ab       	std	Y+50, r25	; 0x32
    25d6:	ab ab       	std	Y+51, r26	; 0x33
    25d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25da:	69 a9       	ldd	r22, Y+49	; 0x31
    25dc:	7a a9       	ldd	r23, Y+50	; 0x32
    25de:	8b a9       	ldd	r24, Y+51	; 0x33
    25e0:	9c a9       	ldd	r25, Y+52	; 0x34
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	98 ab       	std	Y+48, r25	; 0x30
    25f8:	8f a7       	std	Y+47, r24	; 0x2f
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    25fc:	69 a9       	ldd	r22, Y+49	; 0x31
    25fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2600:	8b a9       	ldd	r24, Y+51	; 0x33
    2602:	9c a9       	ldd	r25, Y+52	; 0x34
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	6d a9       	ldd	r22, Y+53	; 0x35
    2616:	7e a9       	ldd	r23, Y+54	; 0x36
    2618:	8f a9       	ldd	r24, Y+55	; 0x37
    261a:	98 ad       	ldd	r25, Y+56	; 0x38
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	98 ab       	std	Y+48, r25	; 0x30
    263a:	8f a7       	std	Y+47, r24	; 0x2f
    263c:	0f c0       	rjmp	.+30     	; 0x265c <H_Lcd_Void_LCDWriteCommand+0x126>
    263e:	80 e9       	ldi	r24, 0x90	; 144
    2640:	91 e0       	ldi	r25, 0x01	; 1
    2642:	9e a7       	std	Y+46, r25	; 0x2e
    2644:	8d a7       	std	Y+45, r24	; 0x2d
    2646:	8d a5       	ldd	r24, Y+45	; 0x2d
    2648:	9e a5       	ldd	r25, Y+46	; 0x2e
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <H_Lcd_Void_LCDWriteCommand+0x114>
    264e:	9e a7       	std	Y+46, r25	; 0x2e
    2650:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	8f a5       	ldd	r24, Y+47	; 0x2f
    2654:	98 a9       	ldd	r25, Y+48	; 0x30
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	98 ab       	std	Y+48, r25	; 0x30
    265a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	8f a5       	ldd	r24, Y+47	; 0x2f
    265e:	98 a9       	ldd	r25, Y+48	; 0x30
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <H_Lcd_Void_LCDWriteCommand+0x108>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	69 a9       	ldd	r22, Y+49	; 0x31
    2668:	7a a9       	ldd	r23, Y+50	; 0x32
    266a:	8b a9       	ldd	r24, Y+51	; 0x33
    266c:	9c a9       	ldd	r25, Y+52	; 0x34
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	98 ab       	std	Y+48, r25	; 0x30
    2678:	8f a7       	std	Y+47, r24	; 0x2f
    267a:	8f a5       	ldd	r24, Y+47	; 0x2f
    267c:	98 a9       	ldd	r25, Y+48	; 0x30
    267e:	9c a7       	std	Y+44, r25	; 0x2c
    2680:	8b a7       	std	Y+43, r24	; 0x2b
    2682:	8b a5       	ldd	r24, Y+43	; 0x2b
    2684:	9c a5       	ldd	r25, Y+44	; 0x2c
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <H_Lcd_Void_LCDWriteCommand+0x150>
    268a:	9c a7       	std	Y+44, r25	; 0x2c
    268c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    268e:	8c e0       	ldi	r24, 0x0C	; 12
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 e8       	ldi	r26, 0x80	; 128
    269c:	bf e3       	ldi	r27, 0x3F	; 63
    269e:	8f a3       	std	Y+39, r24	; 0x27
    26a0:	98 a7       	std	Y+40, r25	; 0x28
    26a2:	a9 a7       	std	Y+41, r26	; 0x29
    26a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a6:	6f a1       	ldd	r22, Y+39	; 0x27
    26a8:	78 a5       	ldd	r23, Y+40	; 0x28
    26aa:	89 a5       	ldd	r24, Y+41	; 0x29
    26ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	4a e7       	ldi	r20, 0x7A	; 122
    26b4:	55 e4       	ldi	r21, 0x45	; 69
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8b a3       	std	Y+35, r24	; 0x23
    26c0:	9c a3       	std	Y+36, r25	; 0x24
    26c2:	ad a3       	std	Y+37, r26	; 0x25
    26c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c6:	6b a1       	ldd	r22, Y+35	; 0x23
    26c8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ca:	8d a1       	ldd	r24, Y+37	; 0x25
    26cc:	9e a1       	ldd	r25, Y+38	; 0x26
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9a a3       	std	Y+34, r25	; 0x22
    26e4:	89 a3       	std	Y+33, r24	; 0x21
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    26e8:	6b a1       	ldd	r22, Y+35	; 0x23
    26ea:	7c a1       	ldd	r23, Y+36	; 0x24
    26ec:	8d a1       	ldd	r24, Y+37	; 0x25
    26ee:	9e a1       	ldd	r25, Y+38	; 0x26
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f e7       	ldi	r20, 0x7F	; 127
    26f6:	57 e4       	ldi	r21, 0x47	; 71
    26f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fc:	18 16       	cp	r1, r24
    26fe:	4c f5       	brge	.+82     	; 0x2752 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	6f a1       	ldd	r22, Y+39	; 0x27
    2702:	78 a5       	ldd	r23, Y+40	; 0x28
    2704:	89 a5       	ldd	r24, Y+41	; 0x29
    2706:	9a a5       	ldd	r25, Y+42	; 0x2a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e2       	ldi	r20, 0x20	; 32
    270e:	51 e4       	ldi	r21, 0x41	; 65
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9a a3       	std	Y+34, r25	; 0x22
    2726:	89 a3       	std	Y+33, r24	; 0x21
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <H_Lcd_Void_LCDWriteCommand+0x212>
    272a:	80 e9       	ldi	r24, 0x90	; 144
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	98 a3       	std	Y+32, r25	; 0x20
    2730:	8f 8f       	std	Y+31, r24	; 0x1f
    2732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2734:	98 a1       	ldd	r25, Y+32	; 0x20
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <H_Lcd_Void_LCDWriteCommand+0x200>
    273a:	98 a3       	std	Y+32, r25	; 0x20
    273c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	89 a1       	ldd	r24, Y+33	; 0x21
    2740:	9a a1       	ldd	r25, Y+34	; 0x22
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	9a a3       	std	Y+34, r25	; 0x22
    2746:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	89 a1       	ldd	r24, Y+33	; 0x21
    274a:	9a a1       	ldd	r25, Y+34	; 0x22
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	69 f7       	brne	.-38     	; 0x272a <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	6b a1       	ldd	r22, Y+35	; 0x23
    2754:	7c a1       	ldd	r23, Y+36	; 0x24
    2756:	8d a1       	ldd	r24, Y+37	; 0x25
    2758:	9e a1       	ldd	r25, Y+38	; 0x26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9a a3       	std	Y+34, r25	; 0x22
    2764:	89 a3       	std	Y+33, r24	; 0x21
    2766:	89 a1       	ldd	r24, Y+33	; 0x21
    2768:	9a a1       	ldd	r25, Y+34	; 0x22
    276a:	9e 8f       	std	Y+30, r25	; 0x1e
    276c:	8d 8f       	std	Y+29, r24	; 0x1d
    276e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2776:	9e 8f       	std	Y+30, r25	; 0x1e
    2778:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    277a:	89 ad       	ldd	r24, Y+57	; 0x39
    277c:	98 2f       	mov	r25, r24
    277e:	91 70       	andi	r25, 0x01	; 1
    2780:	84 e1       	ldi	r24, 0x14	; 20
    2782:	69 2f       	mov	r22, r25
    2784:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2788:	89 ad       	ldd	r24, Y+57	; 0x39
    278a:	86 95       	lsr	r24
    278c:	98 2f       	mov	r25, r24
    278e:	91 70       	andi	r25, 0x01	; 1
    2790:	85 e1       	ldi	r24, 0x15	; 21
    2792:	69 2f       	mov	r22, r25
    2794:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2798:	89 ad       	ldd	r24, Y+57	; 0x39
    279a:	86 95       	lsr	r24
    279c:	86 95       	lsr	r24
    279e:	98 2f       	mov	r25, r24
    27a0:	91 70       	andi	r25, 0x01	; 1
    27a2:	86 e1       	ldi	r24, 0x16	; 22
    27a4:	69 2f       	mov	r22, r25
    27a6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    27aa:	89 ad       	ldd	r24, Y+57	; 0x39
    27ac:	86 95       	lsr	r24
    27ae:	86 95       	lsr	r24
    27b0:	86 95       	lsr	r24
    27b2:	98 2f       	mov	r25, r24
    27b4:	91 70       	andi	r25, 0x01	; 1
    27b6:	88 e1       	ldi	r24, 0x18	; 24
    27b8:	69 2f       	mov	r22, r25
    27ba:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    27be:	8c e0       	ldi	r24, 0x0C	; 12
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	a0 e8       	ldi	r26, 0x80	; 128
    27cc:	bf e3       	ldi	r27, 0x3F	; 63
    27ce:	89 8f       	std	Y+25, r24	; 0x19
    27d0:	9a 8f       	std	Y+26, r25	; 0x1a
    27d2:	ab 8f       	std	Y+27, r26	; 0x1b
    27d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	69 8d       	ldd	r22, Y+25	; 0x19
    27d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a e7       	ldi	r20, 0x7A	; 122
    27e4:	55 e4       	ldi	r21, 0x45	; 69
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8d 8b       	std	Y+21, r24	; 0x15
    27f0:	9e 8b       	std	Y+22, r25	; 0x16
    27f2:	af 8b       	std	Y+23, r26	; 0x17
    27f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27f6:	6d 89       	ldd	r22, Y+21	; 0x15
    27f8:	7e 89       	ldd	r23, Y+22	; 0x16
    27fa:	8f 89       	ldd	r24, Y+23	; 0x17
    27fc:	98 8d       	ldd	r25, Y+24	; 0x18
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	2c f4       	brge	.+10     	; 0x2818 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	3f c0       	rjmp	.+126    	; 0x2896 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	4c f5       	brge	.+82     	; 0x2882 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	69 8d       	ldd	r22, Y+25	; 0x19
    2832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	51 e4       	ldi	r21, 0x41	; 65
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <H_Lcd_Void_LCDWriteCommand+0x342>
    285a:	80 e9       	ldi	r24, 0x90	; 144
    285c:	91 e0       	ldi	r25, 0x01	; 1
    285e:	9a 8b       	std	Y+18, r25	; 0x12
    2860:	89 8b       	std	Y+17, r24	; 0x11
    2862:	89 89       	ldd	r24, Y+17	; 0x11
    2864:	9a 89       	ldd	r25, Y+18	; 0x12
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <H_Lcd_Void_LCDWriteCommand+0x330>
    286a:	9a 8b       	std	Y+18, r25	; 0x12
    286c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286e:	8b 89       	ldd	r24, Y+19	; 0x13
    2870:	9c 89       	ldd	r25, Y+20	; 0x14
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	8b 89       	ldd	r24, Y+19	; 0x13
    287a:	9c 89       	ldd	r25, Y+20	; 0x14
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	69 f7       	brne	.-38     	; 0x285a <H_Lcd_Void_LCDWriteCommand+0x324>
    2880:	14 c0       	rjmp	.+40     	; 0x28aa <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	98 8b       	std	Y+16, r25	; 0x10
    289c:	8f 87       	std	Y+15, r24	; 0x0f
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	98 89       	ldd	r25, Y+16	; 0x10
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <H_Lcd_Void_LCDWriteCommand+0x36c>
    28a6:	98 8b       	std	Y+16, r25	; 0x10
    28a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    28aa:	8c e0       	ldi	r24, 0x0C	; 12
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 ea       	ldi	r26, 0xA0	; 160
    28b8:	b0 e4       	ldi	r27, 0x40	; 64
    28ba:	8b 87       	std	Y+11, r24	; 0x0b
    28bc:	9c 87       	std	Y+12, r25	; 0x0c
    28be:	ad 87       	std	Y+13, r26	; 0x0d
    28c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a e7       	ldi	r20, 0x7A	; 122
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8f 83       	std	Y+7, r24	; 0x07
    28dc:	98 87       	std	Y+8, r25	; 0x08
    28de:	a9 87       	std	Y+9, r26	; 0x09
    28e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <H_Lcd_Void_LCDWriteCommand+0x42e>
    2946:	80 e9       	ldi	r24, 0x90	; 144
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <H_Lcd_Void_LCDWriteCommand+0x41c>
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <H_Lcd_Void_LCDWriteCommand+0x410>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <H_Lcd_Void_LCDWriteCommand+0x458>
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2996:	e9 96       	adiw	r28, 0x39	; 57
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <H_Lcd_Void_LCDWriteString+0x6>
    29ae:	0f 92       	push	r0
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	80 81       	ld	r24, Z
    29ce:	0e 94 62 10 	call	0x20c4	; 0x20c4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	9b 81       	ldd	r25, Y+3	; 0x03
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	80 81       	ld	r24, Z
    29ea:	88 23       	and	r24, r24
    29ec:	39 f7       	brne	.-50     	; 0x29bc <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	2f 97       	sbiw	r28, 0x0f	; 15
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	6c 87       	std	Y+12, r22	; 0x0c
    2a28:	7d 87       	std	Y+13, r23	; 0x0d
    2a2a:	8e 87       	std	Y+14, r24	; 0x0e
    2a2c:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2a2e:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2a30:	8a e0       	ldi	r24, 0x0A	; 10
    2a32:	fe 01       	movw	r30, r28
    2a34:	32 96       	adiw	r30, 0x02	; 2
    2a36:	df 01       	movw	r26, r30
    2a38:	98 2f       	mov	r25, r24
    2a3a:	1d 92       	st	X+, r1
    2a3c:	9a 95       	dec	r25
    2a3e:	e9 f7       	brne	.-6      	; 0x2a3a <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a44:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a46:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a48:	bb 23       	and	r27, r27
    2a4a:	94 f4       	brge	.+36     	; 0x2a70 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    2a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a50:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a52:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a54:	b0 95       	com	r27
    2a56:	a0 95       	com	r26
    2a58:	90 95       	com	r25
    2a5a:	81 95       	neg	r24
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	af 4f       	sbci	r26, 0xFF	; 255
    2a60:	bf 4f       	sbci	r27, 0xFF	; 255
    2a62:	8c 87       	std	Y+12, r24	; 0x0c
    2a64:	9d 87       	std	Y+13, r25	; 0x0d
    2a66:	ae 87       	std	Y+14, r26	; 0x0e
    2a68:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    2a6a:	8d e2       	ldi	r24, 0x2D	; 45
    2a6c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	08 2f       	mov	r16, r24
    2a74:	11 27       	eor	r17, r17
    2a76:	07 fd       	sbrc	r16, 7
    2a78:	10 95       	com	r17
    2a7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a7e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a80:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a82:	2a e0       	ldi	r18, 0x0A	; 10
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__divmodsi4>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	28 2f       	mov	r18, r24
    2a98:	ce 01       	movw	r24, r28
    2a9a:	02 96       	adiw	r24, 0x02	; 2
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e0 0f       	add	r30, r16
    2aa0:	f1 1f       	adc	r31, r17
    2aa2:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2aa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2aa8:	ae 85       	ldd	r26, Y+14	; 0x0e
    2aaa:	bf 85       	ldd	r27, Y+15	; 0x0f
    2aac:	2a e0       	ldi	r18, 0x0A	; 10
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__divmodsi4>
    2abc:	da 01       	movw	r26, r20
    2abe:	c9 01       	movw	r24, r18
    2ac0:	8c 87       	std	Y+12, r24	; 0x0c
    2ac2:	9d 87       	std	Y+13, r25	; 0x0d
    2ac4:	ae 87       	std	Y+14, r26	; 0x0e
    2ac6:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    2ace:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ad0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ad2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ad4:	bf 85       	ldd	r27, Y+15	; 0x0f
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	a1 05       	cpc	r26, r1
    2ada:	b1 05       	cpc	r27, r1
    2adc:	49 f6       	brne	.-110    	; 0x2a70 <H_Lcd_Void_LCDWriteNumber+0x62>
    2ade:	11 c0       	rjmp	.+34     	; 0x2b02 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	81 50       	subi	r24, 0x01	; 1
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	28 2f       	mov	r18, r24
    2aea:	33 27       	eor	r19, r19
    2aec:	27 fd       	sbrc	r18, 7
    2aee:	30 95       	com	r19
    2af0:	ce 01       	movw	r24, r28
    2af2:	02 96       	adiw	r24, 0x02	; 2
    2af4:	fc 01       	movw	r30, r24
    2af6:	e2 0f       	add	r30, r18
    2af8:	f3 1f       	adc	r31, r19
    2afa:	80 81       	ld	r24, Z
    2afc:	80 5d       	subi	r24, 0xD0	; 208
    2afe:	0e 94 62 10 	call	0x20c4	; 0x20c4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	18 16       	cp	r1, r24
    2b06:	64 f3       	brlt	.-40     	; 0x2ae0 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    2b08:	2f 96       	adiw	r28, 0x0f	; 15
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	08 95       	ret

00002b1e <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <H_Lcd_Void_LCDGoTo+0x6>
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <H_Lcd_Void_LCDGoTo+0x8>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <H_Lcd_Void_LCDGoTo+0xa>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2b30:	80 e8       	ldi	r24, 0x80	; 128
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	80 ec       	ldi	r24, 0xC0	; 192
    2b36:	8a 83       	std	Y+2, r24	; 0x02
    2b38:	84 e9       	ldi	r24, 0x94	; 148
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	84 ed       	ldi	r24, 0xD4	; 212
    2b3e:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e2 0f       	add	r30, r18
    2b4e:	f3 1f       	adc	r31, r19
    2b50:	90 81       	ld	r25, Z
    2b52:	8e 81       	ldd	r24, Y+6	; 0x06
    2b54:	89 0f       	add	r24, r25
    2b56:	0e 94 9b 12 	call	0x2536	; 0x2536 <H_Lcd_Void_LCDWriteCommand>
}
    2b5a:	26 96       	adiw	r28, 0x06	; 6
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    2b74:	84 e2       	ldi	r24, 0x24	; 36
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2b8a:	84 e2       	ldi	r24, 0x24	; 36
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
}
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2ba0:	84 e2       	ldi	r24, 0x24	; 36
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
    2bb6:	84 e2       	ldi	r24, 0x24	; 36
    2bb8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <M_DIO_Void_TogPin>
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	2e 97       	sbiw	r28, 0x0e	; 14
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2bd6:	84 e2       	ldi	r24, 0x24	; 36
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 ea       	ldi	r26, 0xA0	; 160
    2be4:	b2 e4       	ldi	r27, 0x42	; 66
    2be6:	8b 87       	std	Y+11, r24	; 0x0b
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	ad 87       	std	Y+13, r26	; 0x0d
    2bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a e7       	ldi	r20, 0x7A	; 122
    2bfc:	55 e4       	ldi	r21, 0x45	; 69
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	8f 83       	std	Y+7, r24	; 0x07
    2c08:	98 87       	std	Y+8, r25	; 0x08
    2c0a:	a9 87       	std	Y+9, r26	; 0x09
    2c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	3f ef       	ldi	r19, 0xFF	; 255
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	57 e4       	ldi	r21, 0x47	; 71
    2c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	4c f5       	brge	.+82     	; 0x2c9a <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e2       	ldi	r20, 0x20	; 32
    2c56:	51 e4       	ldi	r21, 0x41	; 65
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <H_Buzzer_Void_BuzzerOnce+0xce>
    2c72:	80 e9       	ldi	r24, 0x90	; 144
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <H_Buzzer_Void_BuzzerOnce+0xbc>
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <H_Buzzer_Void_BuzzerOnce+0xb0>
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <H_Buzzer_Void_BuzzerOnce+0xf8>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2cc2:	84 e2       	ldi	r24, 0x24	; 36
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
}
    2cca:	2e 96       	adiw	r28, 0x0e	; 14
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	aa 97       	sbiw	r28, 0x2a	; 42
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2cf0:	84 e2       	ldi	r24, 0x24	; 36
    2cf2:	61 e0       	ldi	r22, 0x01	; 1
    2cf4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 ea       	ldi	r26, 0xA0	; 160
    2cfe:	b2 e4       	ldi	r27, 0x42	; 66
    2d00:	8f a3       	std	Y+39, r24	; 0x27
    2d02:	98 a7       	std	Y+40, r25	; 0x28
    2d04:	a9 a7       	std	Y+41, r26	; 0x29
    2d06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	6f a1       	ldd	r22, Y+39	; 0x27
    2d0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	4a e7       	ldi	r20, 0x7A	; 122
    2d16:	55 e4       	ldi	r21, 0x45	; 69
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	8b a3       	std	Y+35, r24	; 0x23
    2d22:	9c a3       	std	Y+36, r25	; 0x24
    2d24:	ad a3       	std	Y+37, r26	; 0x25
    2d26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d28:	6b a1       	ldd	r22, Y+35	; 0x23
    2d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	2c f4       	brge	.+10     	; 0x2d4a <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9a a3       	std	Y+34, r25	; 0x22
    2d46:	89 a3       	std	Y+33, r24	; 0x21
    2d48:	3f c0       	rjmp	.+126    	; 0x2dc8 <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
    2d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d50:	9e a1       	ldd	r25, Y+38	; 0x26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	57 e4       	ldi	r21, 0x47	; 71
    2d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	4c f5       	brge	.+82     	; 0x2db4 <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d62:	6f a1       	ldd	r22, Y+39	; 0x27
    2d64:	78 a5       	ldd	r23, Y+40	; 0x28
    2d66:	89 a5       	ldd	r24, Y+41	; 0x29
    2d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9a a3       	std	Y+34, r25	; 0x22
    2d88:	89 a3       	std	Y+33, r24	; 0x21
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <H_Buzzer_Void_BuzzerTwice+0xce>
    2d8c:	80 e9       	ldi	r24, 0x90	; 144
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	98 a3       	std	Y+32, r25	; 0x20
    2d92:	8f 8f       	std	Y+31, r24	; 0x1f
    2d94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d96:	98 a1       	ldd	r25, Y+32	; 0x20
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <H_Buzzer_Void_BuzzerTwice+0xbc>
    2d9c:	98 a3       	std	Y+32, r25	; 0x20
    2d9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	9a a3       	std	Y+34, r25	; 0x22
    2da8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	89 a1       	ldd	r24, Y+33	; 0x21
    2dac:	9a a1       	ldd	r25, Y+34	; 0x22
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <H_Buzzer_Void_BuzzerTwice+0xb0>
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db4:	6b a1       	ldd	r22, Y+35	; 0x23
    2db6:	7c a1       	ldd	r23, Y+36	; 0x24
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9a a3       	std	Y+34, r25	; 0x22
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
    2dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dca:	9a a1       	ldd	r25, Y+34	; 0x22
    2dcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dce:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <H_Buzzer_Void_BuzzerTwice+0xf8>
    2dd8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2ddc:	84 e2       	ldi	r24, 0x24	; 36
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a0 e7       	ldi	r26, 0x70	; 112
    2dea:	b2 e4       	ldi	r27, 0x42	; 66
    2dec:	89 8f       	std	Y+25, r24	; 0x19
    2dee:	9a 8f       	std	Y+26, r25	; 0x1a
    2df0:	ab 8f       	std	Y+27, r26	; 0x1b
    2df2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df4:	69 8d       	ldd	r22, Y+25	; 0x19
    2df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a e7       	ldi	r20, 0x7A	; 122
    2e02:	55 e4       	ldi	r21, 0x45	; 69
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8d 8b       	std	Y+21, r24	; 0x15
    2e0e:	9e 8b       	std	Y+22, r25	; 0x16
    2e10:	af 8b       	std	Y+23, r26	; 0x17
    2e12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e14:	6d 89       	ldd	r22, Y+21	; 0x15
    2e16:	7e 89       	ldd	r23, Y+22	; 0x16
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e8       	ldi	r20, 0x80	; 128
    2e22:	5f e3       	ldi	r21, 0x3F	; 63
    2e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9c 8b       	std	Y+20, r25	; 0x14
    2e32:	8b 8b       	std	Y+19, r24	; 0x13
    2e34:	3f c0       	rjmp	.+126    	; 0x2eb4 <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
    2e36:	6d 89       	ldd	r22, Y+21	; 0x15
    2e38:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4a:	18 16       	cp	r1, r24
    2e4c:	4c f5       	brge	.+82     	; 0x2ea0 <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e2       	ldi	r20, 0x20	; 32
    2e5c:	51 e4       	ldi	r21, 0x41	; 65
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
    2e76:	0f c0       	rjmp	.+30     	; 0x2e96 <H_Buzzer_Void_BuzzerTwice+0x1ba>
    2e78:	80 e9       	ldi	r24, 0x90	; 144
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	9a 8b       	std	Y+18, r25	; 0x12
    2e7e:	89 8b       	std	Y+17, r24	; 0x11
    2e80:	89 89       	ldd	r24, Y+17	; 0x11
    2e82:	9a 89       	ldd	r25, Y+18	; 0x12
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <H_Buzzer_Void_BuzzerTwice+0x1a8>
    2e88:	9a 8b       	std	Y+18, r25	; 0x12
    2e8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	9c 8b       	std	Y+20, r25	; 0x14
    2e94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	8b 89       	ldd	r24, Y+19	; 0x13
    2e98:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	69 f7       	brne	.-38     	; 0x2e78 <H_Buzzer_Void_BuzzerTwice+0x19c>
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9c 8b       	std	Y+20, r25	; 0x14
    2eb2:	8b 8b       	std	Y+19, r24	; 0x13
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	98 8b       	std	Y+16, r25	; 0x10
    2eba:	8f 87       	std	Y+15, r24	; 0x0f
    2ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebe:	98 89       	ldd	r25, Y+16	; 0x10
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <H_Buzzer_Void_BuzzerTwice+0x1e4>
    2ec4:	98 8b       	std	Y+16, r25	; 0x10
    2ec6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2ec8:	84 e2       	ldi	r24, 0x24	; 36
    2eca:	61 e0       	ldi	r22, 0x01	; 1
    2ecc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed6:	b2 e4       	ldi	r27, 0x42	; 66
    2ed8:	8b 87       	std	Y+11, r24	; 0x0b
    2eda:	9c 87       	std	Y+12, r25	; 0x0c
    2edc:	ad 87       	std	Y+13, r26	; 0x0d
    2ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a e7       	ldi	r20, 0x7A	; 122
    2eee:	55 e4       	ldi	r21, 0x45	; 69
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8f 83       	std	Y+7, r24	; 0x07
    2efa:	98 87       	std	Y+8, r25	; 0x08
    2efc:	a9 87       	std	Y+9, r26	; 0x09
    2efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	78 85       	ldd	r23, Y+8	; 0x08
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <H_Buzzer_Void_BuzzerTwice+0x2a6>
    2f64:	80 e9       	ldi	r24, 0x90	; 144
    2f66:	91 e0       	ldi	r25, 0x01	; 1
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <H_Buzzer_Void_BuzzerTwice+0x294>
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9e 83       	std	Y+6, r25	; 0x06
    2f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <H_Buzzer_Void_BuzzerTwice+0x288>
    2f8a:	14 c0       	rjmp	.+40     	; 0x2fb4 <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <H_Buzzer_Void_BuzzerTwice+0x2d0>
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2fb4:	84 e2       	ldi	r24, 0x24	; 36
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
}
    2fbc:	aa 96       	adiw	r28, 0x2a	; 42
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <A_Void_Init_System>:
/*Function: A_Void_Init_System		                     					                       */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_Init_System(void)
{
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Void_ADCInit() ;
    2fd6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <M_ADC_Void_ADCInit>

	H_PushButton_Void_PushButtonInit(ACCELERATOR_PEDAL) ;
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	0e 94 8d 0a 	call	0x151a	; 0x151a <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(BRAKE_PEDAL) ;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	0e 94 8d 0a 	call	0x151a	; 0x151a <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(CCS_SWITCH) ;
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	0e 94 8d 0a 	call	0x151a	; 0x151a <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(GEARBOX_SWITCH) ;
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	0e 94 8d 0a 	call	0x151a	; 0x151a <H_PushButton_Void_PushButtonInit>

	H_LED_Void_LedInit(ACCELERATOR_LED) ;
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(BRAKE_LED) ;
    2ff8:	84 e0       	ldi	r24, 0x04	; 4
    2ffa:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(CCS_LED) ;
    2ffe:	83 e0       	ldi	r24, 0x03	; 3
    3000:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <H_LED_Void_LedInit>
	H_LED_Void_LedInit(ALARM_LED) ;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <H_LED_Void_LedInit>

	H_Buzzer_Void_BuzzerInit() ;
    300a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <H_Buzzer_Void_BuzzerInit>

	H_Lcd_Void_LCDInit() ;
    300e:	0e 94 31 10 	call	0x2062	; 0x2062 <H_Lcd_Void_LCDInit>

	M_DIO_Void_SetPinDirection(RELAY_PIN,OUTPUT) ;
    3012:	85 e2       	ldi	r24, 0x25	; 37
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	0e 94 bd 06 	call	0xd7a	; 0xd7a <M_DIO_Void_SetPinDirection>
}
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <A_Void_LCD_Const_Display>:
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/

void A_Void_LCD_Const_Display (void)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <A_Void_LCD_Const_Display+0x6>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <A_Void_LCD_Const_Display+0x8>
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	switch(CCS_State)
    302c:	80 91 e0 00 	lds	r24, 0x00E0
    3030:	28 2f       	mov	r18, r24
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	3c 83       	std	Y+4, r19	; 0x04
    3036:	2b 83       	std	Y+3, r18	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	31 f0       	breq	.+12     	; 0x304c <A_Void_LCD_Const_Display+0x2c>
    3040:	2b 81       	ldd	r18, Y+3	; 0x03
    3042:	3c 81       	ldd	r19, Y+4	; 0x04
    3044:	21 30       	cpi	r18, 0x01	; 1
    3046:	31 05       	cpc	r19, r1
    3048:	31 f0       	breq	.+12     	; 0x3056 <A_Void_LCD_Const_Display+0x36>
    304a:	09 c0       	rjmp	.+18     	; 0x305e <A_Void_LCD_Const_Display+0x3e>
	{
	case CCS_OFF :
		H_Lcd_Void_LCDWriteString((u8*)"CCS: OFF") ;
    304c:	80 e6       	ldi	r24, 0x60	; 96
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    3054:	04 c0       	rjmp	.+8      	; 0x305e <A_Void_LCD_Const_Display+0x3e>
		break;
	case CCS_ON :
		H_Lcd_Void_LCDWriteString((u8*)"CCS: ON ") ;
    3056:	89 e6       	ldi	r24, 0x69	; 105
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
		break;
	}

	H_Lcd_Void_LCDGoTo(1,0) ;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
	switch(GearBox_State)
    3066:	80 91 e1 00 	lds	r24, 0x00E1
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3a 83       	std	Y+2, r19	; 0x02
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	a1 f0       	breq	.+40     	; 0x30a4 <A_Void_LCD_Const_Display+0x84>
    307c:	29 81       	ldd	r18, Y+1	; 0x01
    307e:	3a 81       	ldd	r19, Y+2	; 0x02
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	29 f0       	breq	.+10     	; 0x3090 <A_Void_LCD_Const_Display+0x70>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	31 f0       	breq	.+12     	; 0x309a <A_Void_LCD_Const_Display+0x7a>
    308e:	0e c0       	rjmp	.+28     	; 0x30ac <A_Void_LCD_Const_Display+0x8c>
	{
	case GEARBOX_R :
		H_Lcd_Void_LCDWriteString((u8*)"PDNR: R") ;
    3090:	82 e7       	ldi	r24, 0x72	; 114
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    3098:	09 c0       	rjmp	.+18     	; 0x30ac <A_Void_LCD_Const_Display+0x8c>
		break;
	case GEARBOX_N :
		H_Lcd_Void_LCDWriteString((u8*)"PDNR: N") ;
    309a:	8a e7       	ldi	r24, 0x7A	; 122
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    30a2:	04 c0       	rjmp	.+8      	; 0x30ac <A_Void_LCD_Const_Display+0x8c>
		break;
	case GEARBOX_D :
		H_Lcd_Void_LCDWriteString((u8*)"PDNR: D") ;
    30a4:	82 e8       	ldi	r24, 0x82	; 130
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
		break;
	}

	H_Lcd_Void_LCDGoTo(2,0) ;
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Distance:   m") ;
    30b4:	8a e8       	ldi	r24, 0x8A	; 138
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(3,0) ;
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString(g_WarningMessagePtr) ;
    30c4:	80 91 db 00 	lds	r24, 0x00DB
    30c8:	90 91 dc 00 	lds	r25, 0x00DC
    30cc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,10) ;
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	6a e0       	ldi	r22, 0x0A	; 10
    30d4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(g_Distance/10) ;
    30d8:	80 91 e2 00 	lds	r24, 0x00E2
    30dc:	90 91 e3 00 	lds	r25, 0x00E3
    30e0:	2a e0       	ldi	r18, 0x0A	; 10
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	b9 01       	movw	r22, r18
    30e6:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    30ea:	cb 01       	movw	r24, r22
    30ec:	cc 01       	movw	r24, r24
    30ee:	a0 e0       	ldi	r26, 0x00	; 0
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteNumber(g_Distance%10) ;
    30fa:	80 91 e2 00 	lds	r24, 0x00E2
    30fe:	90 91 e3 00 	lds	r25, 0x00E3
    3102:	2a e0       	ldi	r18, 0x0A	; 10
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	b9 01       	movw	r22, r18
    3108:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    310c:	cc 01       	movw	r24, r24
    310e:	a0 e0       	ldi	r26, 0x00	; 0
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <H_Lcd_Void_LCDWriteNumber>
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <A_Void_LCD_Display>:
/*Function: A_Void_LCD_Display		                     					                       */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_LCD_Display(void)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <A_Void_LCD_Display+0x6>
    312e:	00 d0       	rcall	.+0      	; 0x3130 <A_Void_LCD_Display+0x8>
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
	if (g_LCD_Update == 1)
    3134:	80 91 dd 00 	lds	r24, 0x00DD
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	09 f0       	breq	.+2      	; 0x313e <A_Void_LCD_Display+0x16>
    313c:	50 c0       	rjmp	.+160    	; 0x31de <A_Void_LCD_Display+0xb6>
	{
		g_LCD_Update = 0 ;
    313e:	10 92 dd 00 	sts	0x00DD, r1
		H_Lcd_Void_LCDGoTo(0,5) ;
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	65 e0       	ldi	r22, 0x05	; 5
    3146:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
		switch(CCS_State)
    314a:	80 91 e0 00 	lds	r24, 0x00E0
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	3c 83       	std	Y+4, r19	; 0x04
    3154:	2b 83       	std	Y+3, r18	; 0x03
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	31 f0       	breq	.+12     	; 0x316a <A_Void_LCD_Display+0x42>
    315e:	2b 81       	ldd	r18, Y+3	; 0x03
    3160:	3c 81       	ldd	r19, Y+4	; 0x04
    3162:	21 30       	cpi	r18, 0x01	; 1
    3164:	31 05       	cpc	r19, r1
    3166:	31 f0       	breq	.+12     	; 0x3174 <A_Void_LCD_Display+0x4c>
    3168:	09 c0       	rjmp	.+18     	; 0x317c <A_Void_LCD_Display+0x54>
		{
		case CCS_OFF :
			H_Lcd_Void_LCDWriteString((u8*)"OFF") ;
    316a:	88 e9       	ldi	r24, 0x98	; 152
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    3172:	04 c0       	rjmp	.+8      	; 0x317c <A_Void_LCD_Display+0x54>
			break;
		case CCS_ON :
			H_Lcd_Void_LCDWriteString((u8*)"ON ") ;
    3174:	8c e9       	ldi	r24, 0x9C	; 156
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
			break;
		}

		H_Lcd_Void_LCDGoTo(1,6) ;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	66 e0       	ldi	r22, 0x06	; 6
    3180:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
		switch(GearBox_State)
    3184:	80 91 e1 00 	lds	r24, 0x00E1
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	3a 83       	std	Y+2, r19	; 0x02
    318e:	29 83       	std	Y+1, r18	; 0x01
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	91 05       	cpc	r25, r1
    3198:	a1 f0       	breq	.+40     	; 0x31c2 <A_Void_LCD_Display+0x9a>
    319a:	29 81       	ldd	r18, Y+1	; 0x01
    319c:	3a 81       	ldd	r19, Y+2	; 0x02
    319e:	22 30       	cpi	r18, 0x02	; 2
    31a0:	31 05       	cpc	r19, r1
    31a2:	29 f0       	breq	.+10     	; 0x31ae <A_Void_LCD_Display+0x86>
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	31 f0       	breq	.+12     	; 0x31b8 <A_Void_LCD_Display+0x90>
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <A_Void_LCD_Display+0xa2>
		{
		case GEARBOX_R :
			H_Lcd_Void_LCDWriteString((u8*)"R") ;
    31ae:	80 ea       	ldi	r24, 0xA0	; 160
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    31b6:	09 c0       	rjmp	.+18     	; 0x31ca <A_Void_LCD_Display+0xa2>
			break;
		case GEARBOX_N :
			H_Lcd_Void_LCDWriteString((u8*)"N") ;
    31b8:	82 ea       	ldi	r24, 0xA2	; 162
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
    31c0:	04 c0       	rjmp	.+8      	; 0x31ca <A_Void_LCD_Display+0xa2>
			break;
		case GEARBOX_D :
			H_Lcd_Void_LCDWriteString((u8*)"D") ;
    31c2:	84 ea       	ldi	r24, 0xA4	; 164
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
			break;
		}
		H_Lcd_Void_LCDGoTo(3,0) ;
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString(g_WarningMessagePtr) ;
    31d2:	80 91 db 00 	lds	r24, 0x00DB
    31d6:	90 91 dc 00 	lds	r25, 0x00DC
    31da:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <H_Lcd_Void_LCDWriteString>
	}
	H_Lcd_Void_LCDGoTo(2,10) ;
    31de:	82 e0       	ldi	r24, 0x02	; 2
    31e0:	6a e0       	ldi	r22, 0x0A	; 10
    31e2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteNumber(g_Distance/10) ;
    31e6:	80 91 e2 00 	lds	r24, 0x00E2
    31ea:	90 91 e3 00 	lds	r25, 0x00E3
    31ee:	2a e0       	ldi	r18, 0x0A	; 10
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	b9 01       	movw	r22, r18
    31f4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    31f8:	cb 01       	movw	r24, r22
    31fa:	cc 01       	movw	r24, r24
    31fc:	a0 e0       	ldi	r26, 0x00	; 0
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteNumber(g_Distance%10) ;
    3208:	80 91 e2 00 	lds	r24, 0x00E2
    320c:	90 91 e3 00 	lds	r25, 0x00E3
    3210:	2a e0       	ldi	r18, 0x0A	; 10
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	b9 01       	movw	r22, r18
    3216:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    321a:	cc 01       	movw	r24, r24
    321c:	a0 e0       	ldi	r26, 0x00	; 0
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <H_Lcd_Void_LCDWriteNumber>

}
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <A_Void_AccLED_Check_State>:
/*Function: A_Void_AccLED_Check_State		                     					               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_AccLED_Check_State(void)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
	if(H_PushButton_U8_PushButtonRead(ACCELERATOR_PEDAL) == PUSH_BUTTON_PRESSED)
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    3244:	88 23       	and	r24, r24
    3246:	49 f4       	brne	.+18     	; 0x325a <A_Void_AccLED_Check_State+0x24>
	{
		g_LCD_Update = 1 ;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	80 93 dd 00 	sts	0x00DD, r24
		CCS_State = CCS_OFF ;
    324e:	10 92 e0 00 	sts	0x00E0, r1
		g_AccLED_State = ACC_LED_ON ;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	80 93 e4 00 	sts	0x00E4, r24
    3258:	02 c0       	rjmp	.+4      	; 0x325e <A_Void_AccLED_Check_State+0x28>
	}
	else
	{
		g_AccLED_State = ACC_LED_OFF ;
    325a:	10 92 e4 00 	sts	0x00E4, r1
	}
}
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <A_Void_AccLED_Task>:
/*Function: A_Void_AccLED_Task		                     					                       */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_AccLED_Task(void)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <A_Void_AccLED_Task+0x6>
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
	switch(g_AccLED_State)
    326e:	80 91 e4 00 	lds	r24, 0x00E4
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	3a 83       	std	Y+2, r19	; 0x02
    3278:	29 83       	std	Y+1, r18	; 0x01
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	31 f0       	breq	.+12     	; 0x328e <A_Void_AccLED_Task+0x2a>
    3282:	29 81       	ldd	r18, Y+1	; 0x01
    3284:	3a 81       	ldd	r19, Y+2	; 0x02
    3286:	21 30       	cpi	r18, 0x01	; 1
    3288:	31 05       	cpc	r19, r1
    328a:	29 f0       	breq	.+10     	; 0x3296 <A_Void_AccLED_Task+0x32>
    328c:	07 c0       	rjmp	.+14     	; 0x329c <A_Void_AccLED_Task+0x38>
	{
	case ACC_LED_OFF :
		H_LED_Void_LedOff(ACCELERATOR_LED);
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <H_LED_Void_LedOff>
    3294:	03 c0       	rjmp	.+6      	; 0x329c <A_Void_AccLED_Task+0x38>
		break;
	case ACC_LED_ON :
		H_LED_Void_LedOn(ACCELERATOR_LED);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <H_LED_Void_LedOn>
		break;
	}
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <A_Void_BrakeLED_Check_State>:
/*Function: A_Void_BrakeLED_Check_State		                     					               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_BrakeLED_Check_State(void)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
	if((((g_Distance_Range == RANGE_10_8))&&(H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_PRESSED)) ||
    32ae:	80 91 e8 00 	lds	r24, 0x00E8
    32b2:	88 23       	and	r24, r24
    32b4:	29 f4       	brne	.+10     	; 0x32c0 <A_Void_BrakeLED_Check_State+0x1a>
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    32bc:	88 23       	and	r24, r24
    32be:	81 f0       	breq	.+32     	; 0x32e0 <A_Void_BrakeLED_Check_State+0x3a>
    32c0:	80 91 e7 00 	lds	r24, 0x00E7
    32c4:	81 30       	cpi	r24, 0x01	; 1
    32c6:	21 f4       	brne	.+8      	; 0x32d0 <A_Void_BrakeLED_Check_State+0x2a>
    32c8:	80 91 e8 00 	lds	r24, 0x00E8
    32cc:	82 30       	cpi	r24, 0x02	; 2
    32ce:	41 f0       	breq	.+16     	; 0x32e0 <A_Void_BrakeLED_Check_State+0x3a>
    32d0:	80 91 e7 00 	lds	r24, 0x00E7
    32d4:	81 30       	cpi	r24, 0x01	; 1
    32d6:	41 f4       	brne	.+16     	; 0x32e8 <A_Void_BrakeLED_Check_State+0x42>
    32d8:	80 91 e8 00 	lds	r24, 0x00E8
    32dc:	83 30       	cpi	r24, 0x03	; 3
    32de:	21 f4       	brne	.+8      	; 0x32e8 <A_Void_BrakeLED_Check_State+0x42>
	   (((g_Distance_Range < RANGE_10_8 ))&&(GearBox_State    != GEARBOX_D)  && (H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_PRESSED)) ||
	   ((g_BAS_State       == BAS_ON)     &&(g_Distance_Range == RANGE_6_4)) ||
	   ((g_BAS_State       == BAS_ON)     &&(g_Distance_Range == RANGE_4_2))
	  )
	{
		g_BrakeLED_State = BRAKE_LED_ON ;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	80 93 e5 00 	sts	0x00E5, r24
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <A_Void_BrakeLED_Check_State+0x46>
	}
	else
	{
		g_BrakeLED_State = BRAKE_LED_OFF ;
    32e8:	10 92 e5 00 	sts	0x00E5, r1
	}
}
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <A_Void_BrakeLED_Task>:
/*Function: A_Void_BrakeLED_Task     		                     					               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_BrakeLED_Task(void)
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <A_Void_BrakeLED_Task+0x6>
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
	switch(g_BrakeLED_State)
    32fc:	80 91 e5 00 	lds	r24, 0x00E5
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	3a 83       	std	Y+2, r19	; 0x02
    3306:	29 83       	std	Y+1, r18	; 0x01
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	31 f0       	breq	.+12     	; 0x331c <A_Void_BrakeLED_Task+0x2a>
    3310:	29 81       	ldd	r18, Y+1	; 0x01
    3312:	3a 81       	ldd	r19, Y+2	; 0x02
    3314:	21 30       	cpi	r18, 0x01	; 1
    3316:	31 05       	cpc	r19, r1
    3318:	29 f0       	breq	.+10     	; 0x3324 <A_Void_BrakeLED_Task+0x32>
    331a:	07 c0       	rjmp	.+14     	; 0x332a <A_Void_BrakeLED_Task+0x38>
	{
	case BRAKE_LED_OFF :
		H_LED_Void_LedOff(BRAKE_LED);
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <H_LED_Void_LedOff>
    3322:	03 c0       	rjmp	.+6      	; 0x332a <A_Void_BrakeLED_Task+0x38>
		break;
	case BRAKE_LED_ON :
		H_LED_Void_LedOn(BRAKE_LED);
    3324:	84 e0       	ldi	r24, 0x04	; 4
    3326:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <H_LED_Void_LedOn>
		break;
	}
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <A_Void_CCS_Check_State>:
/*Function: A_Void_CCS_Check_State     		                     					               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_CCS_Check_State(void)
{
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	60 97       	sbiw	r28, 0x10	; 16
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
	static u8 PB_CurrState = PUSH_BUTTON_RELEASED ;

	if(H_PushButton_U8_PushButtonRead(CCS_SWITCH) == PUSH_BUTTON_PRESSED)
    3348:	82 e0       	ldi	r24, 0x02	; 2
    334a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    334e:	88 23       	and	r24, r24
    3350:	09 f0       	breq	.+2      	; 0x3354 <A_Void_CCS_Check_State+0x20>
    3352:	ac c0       	rjmp	.+344    	; 0x34ac <A_Void_CCS_Check_State+0x178>
	{
		if(PB_CurrState == PUSH_BUTTON_RELEASED)
    3354:	80 91 de 00 	lds	r24, 0x00DE
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	09 f0       	breq	.+2      	; 0x335e <A_Void_CCS_Check_State+0x2a>
    335c:	aa c0       	rjmp	.+340    	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
		{
			PB_CurrState = PUSH_BUTTON_PRESSED ;
    335e:	10 92 de 00 	sts	0x00DE, r1

			H_Buzzer_Void_BuzzerOn();
    3362:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <H_Buzzer_Void_BuzzerOn>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	a8 e4       	ldi	r26, 0x48	; 72
    336c:	b2 e4       	ldi	r27, 0x42	; 66
    336e:	8b 87       	std	Y+11, r24	; 0x0b
    3370:	9c 87       	std	Y+12, r25	; 0x0c
    3372:	ad 87       	std	Y+13, r26	; 0x0d
    3374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	6b 85       	ldd	r22, Y+11	; 0x0b
    3378:	7c 85       	ldd	r23, Y+12	; 0x0c
    337a:	8d 85       	ldd	r24, Y+13	; 0x0d
    337c:	9e 85       	ldd	r25, Y+14	; 0x0e
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a e7       	ldi	r20, 0x7A	; 122
    3384:	55 e4       	ldi	r21, 0x45	; 69
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	8f 83       	std	Y+7, r24	; 0x07
    3390:	98 87       	std	Y+8, r25	; 0x08
    3392:	a9 87       	std	Y+9, r26	; 0x09
    3394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <A_Void_CCS_Check_State+0x84>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <A_Void_CCS_Check_State+0x102>
	else if (__tmp > 65535)
    33b8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ba:	78 85       	ldd	r23, Y+8	; 0x08
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <A_Void_CCS_Check_State+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <A_Void_CCS_Check_State+0xe4>
    33fa:	80 e9       	ldi	r24, 0x90	; 144
    33fc:	91 e0       	ldi	r25, 0x01	; 1
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	8b 83       	std	Y+3, r24	; 0x03
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <A_Void_CCS_Check_State+0xd2>
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	9e 81       	ldd	r25, Y+6	; 0x06
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	9e 81       	ldd	r25, Y+6	; 0x06
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <A_Void_CCS_Check_State+0xc6>
    3420:	14 c0       	rjmp	.+40     	; 0x344a <A_Void_CCS_Check_State+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <A_Void_CCS_Check_State+0x10e>
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			H_Buzzer_Void_BuzzerOff();
    344a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Buzzer_Void_BuzzerOff>

			if((g_BAS_State == BAS_ON) && (g_Distance_Range == RANGE_10_8))
    344e:	80 91 e7 00 	lds	r24, 0x00E7
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	29 f5       	brne	.+74     	; 0x34a0 <A_Void_CCS_Check_State+0x16c>
    3456:	80 91 e8 00 	lds	r24, 0x00E8
    345a:	88 23       	and	r24, r24
    345c:	09 f5       	brne	.+66     	; 0x34a0 <A_Void_CCS_Check_State+0x16c>
			{
				if(GearBox_State == GEARBOX_D)
    345e:	80 91 e1 00 	lds	r24, 0x00E1
    3462:	81 30       	cpi	r24, 0x01	; 1
    3464:	31 f5       	brne	.+76     	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
				{
					switch(CCS_State)
    3466:	80 91 e0 00 	lds	r24, 0x00E0
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	38 8b       	std	Y+16, r19	; 0x10
    3470:	2f 87       	std	Y+15, r18	; 0x0f
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	98 89       	ldd	r25, Y+16	; 0x10
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	31 f0       	breq	.+12     	; 0x3486 <A_Void_CCS_Check_State+0x152>
    347a:	2f 85       	ldd	r18, Y+15	; 0x0f
    347c:	38 89       	ldd	r19, Y+16	; 0x10
    347e:	21 30       	cpi	r18, 0x01	; 1
    3480:	31 05       	cpc	r19, r1
    3482:	41 f0       	breq	.+16     	; 0x3494 <A_Void_CCS_Check_State+0x160>
    3484:	16 c0       	rjmp	.+44     	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
					{
					case CCS_OFF :
						g_LCD_Update = 1 ;
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	80 93 dd 00 	sts	0x00DD, r24
						CCS_State = CCS_ON ;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	80 93 e0 00 	sts	0x00E0, r24
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
						break;
					case CCS_ON :
						g_LCD_Update = 1 ;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	80 93 dd 00 	sts	0x00DD, r24
						CCS_State = CCS_OFF ;
    349a:	10 92 e0 00 	sts	0x00E0, r1
    349e:	09 c0       	rjmp	.+18     	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
					}
				}
			}
			else
			{
				g_LCD_Update = 1 ;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	80 93 dd 00 	sts	0x00DD, r24
				CCS_State = CCS_OFF ;
    34a6:	10 92 e0 00 	sts	0x00E0, r1
    34aa:	03 c0       	rjmp	.+6      	; 0x34b2 <A_Void_CCS_Check_State+0x17e>
			}
		}
	}
	else
	{
		PB_CurrState = PUSH_BUTTON_RELEASED ;
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	80 93 de 00 	sts	0x00DE, r24
	}
}
    34b2:	60 96       	adiw	r28, 0x10	; 16
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <A_Void_CcsLED_Task>:
/*Function: A_Void_CcsLED_Task       		                     					               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_CcsLED_Task(void)
{
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <A_Void_CcsLED_Task+0x6>
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
	switch(CCS_State)
    34ce:	80 91 e0 00 	lds	r24, 0x00E0
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	3a 83       	std	Y+2, r19	; 0x02
    34d8:	29 83       	std	Y+1, r18	; 0x01
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	9a 81       	ldd	r25, Y+2	; 0x02
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	31 f0       	breq	.+12     	; 0x34ee <A_Void_CcsLED_Task+0x2a>
    34e2:	29 81       	ldd	r18, Y+1	; 0x01
    34e4:	3a 81       	ldd	r19, Y+2	; 0x02
    34e6:	21 30       	cpi	r18, 0x01	; 1
    34e8:	31 05       	cpc	r19, r1
    34ea:	29 f0       	breq	.+10     	; 0x34f6 <A_Void_CcsLED_Task+0x32>
    34ec:	07 c0       	rjmp	.+14     	; 0x34fc <A_Void_CcsLED_Task+0x38>
	{
	case CCS_OFF :
		H_LED_Void_LedOff(CCS_LED);
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <H_LED_Void_LedOff>
    34f4:	03 c0       	rjmp	.+6      	; 0x34fc <A_Void_CcsLED_Task+0x38>
		break;
	case CCS_ON :
		H_LED_Void_LedOn(CCS_LED);
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <H_LED_Void_LedOn>
		break;
	}
}
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <A_Void_GearBox_Check_State>:
/*Function: A_Void_GearBox_Check_State       		                     			               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_GearBox_Check_State(void)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	60 97       	sbiw	r28, 0x10	; 16
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
	static u8 PB_CurrState = PUSH_BUTTON_RELEASED ;

	if(H_PushButton_U8_PushButtonRead(GEARBOX_SWITCH) == PUSH_BUTTON_PRESSED)
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    3520:	88 23       	and	r24, r24
    3522:	09 f0       	breq	.+2      	; 0x3526 <A_Void_GearBox_Check_State+0x20>
    3524:	b7 c0       	rjmp	.+366    	; 0x3694 <A_Void_GearBox_Check_State+0x18e>
	{
		if(PB_CurrState == PUSH_BUTTON_RELEASED)
    3526:	80 91 df 00 	lds	r24, 0x00DF
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	09 f0       	breq	.+2      	; 0x3530 <A_Void_GearBox_Check_State+0x2a>
    352e:	b5 c0       	rjmp	.+362    	; 0x369a <A_Void_GearBox_Check_State+0x194>
		{
			PB_CurrState = PUSH_BUTTON_PRESSED ;
    3530:	10 92 df 00 	sts	0x00DF, r1

			H_Buzzer_Void_BuzzerOn();
    3534:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <H_Buzzer_Void_BuzzerOn>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a8 e4       	ldi	r26, 0x48	; 72
    353e:	b2 e4       	ldi	r27, 0x42	; 66
    3540:	8b 87       	std	Y+11, r24	; 0x0b
    3542:	9c 87       	std	Y+12, r25	; 0x0c
    3544:	ad 87       	std	Y+13, r26	; 0x0d
    3546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4a e7       	ldi	r20, 0x7A	; 122
    3556:	55 e4       	ldi	r21, 0x45	; 69
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	8f 83       	std	Y+7, r24	; 0x07
    3562:	98 87       	std	Y+8, r25	; 0x08
    3564:	a9 87       	std	Y+9, r26	; 0x09
    3566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <A_Void_GearBox_Check_State+0x84>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <A_Void_GearBox_Check_State+0x102>
	else if (__tmp > 65535)
    358a:	6f 81       	ldd	r22, Y+7	; 0x07
    358c:	78 85       	ldd	r23, Y+8	; 0x08
    358e:	89 85       	ldd	r24, Y+9	; 0x09
    3590:	9a 85       	ldd	r25, Y+10	; 0x0a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	3f ef       	ldi	r19, 0xFF	; 255
    3596:	4f e7       	ldi	r20, 0x7F	; 127
    3598:	57 e4       	ldi	r21, 0x47	; 71
    359a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <A_Void_GearBox_Check_State+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <A_Void_GearBox_Check_State+0xe4>
    35cc:	80 e9       	ldi	r24, 0x90	; 144
    35ce:	91 e0       	ldi	r25, 0x01	; 1
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <A_Void_GearBox_Check_State+0xd2>
    35dc:	9c 83       	std	Y+4, r25	; 0x04
    35de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	69 f7       	brne	.-38     	; 0x35cc <A_Void_GearBox_Check_State+0xc6>
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <A_Void_GearBox_Check_State+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	6f 81       	ldd	r22, Y+7	; 0x07
    35f6:	78 85       	ldd	r23, Y+8	; 0x08
    35f8:	89 85       	ldd	r24, Y+9	; 0x09
    35fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <A_Void_GearBox_Check_State+0x10e>
    3618:	9a 83       	std	Y+2, r25	; 0x02
    361a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			H_Buzzer_Void_BuzzerOff();
    361c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Buzzer_Void_BuzzerOff>

			if(H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_PRESSED)
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    3626:	88 23       	and	r24, r24
    3628:	c1 f5       	brne	.+112    	; 0x369a <A_Void_GearBox_Check_State+0x194>
			{
				g_LCD_Update = 1 ;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	80 93 dd 00 	sts	0x00DD, r24
				CCS_State = CCS_OFF ;
    3630:	10 92 e0 00 	sts	0x00E0, r1

				switch(GearBox_State)
    3634:	80 91 e1 00 	lds	r24, 0x00E1
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	38 8b       	std	Y+16, r19	; 0x10
    363e:	2f 87       	std	Y+15, r18	; 0x0f
    3640:	8f 85       	ldd	r24, Y+15	; 0x0f
    3642:	98 89       	ldd	r25, Y+16	; 0x10
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	91 05       	cpc	r25, r1
    3648:	e1 f0       	breq	.+56     	; 0x3682 <A_Void_GearBox_Check_State+0x17c>
    364a:	2f 85       	ldd	r18, Y+15	; 0x0f
    364c:	38 89       	ldd	r19, Y+16	; 0x10
    364e:	22 30       	cpi	r18, 0x02	; 2
    3650:	31 05       	cpc	r19, r1
    3652:	29 f0       	breq	.+10     	; 0x365e <A_Void_GearBox_Check_State+0x158>
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	98 89       	ldd	r25, Y+16	; 0x10
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	49 f0       	breq	.+18     	; 0x366e <A_Void_GearBox_Check_State+0x168>
    365c:	1e c0       	rjmp	.+60     	; 0x369a <A_Void_GearBox_Check_State+0x194>
				{
				case GEARBOX_R :
					g_LCD_Update = 1 ;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	80 93 dd 00 	sts	0x00DD, r24
					GearBox_State = GEARBOX_N ;
    3664:	10 92 e1 00 	sts	0x00E1, r1
					g_BAS_State = BAS_OFF ;
    3668:	10 92 e7 00 	sts	0x00E7, r1
    366c:	16 c0       	rjmp	.+44     	; 0x369a <A_Void_GearBox_Check_State+0x194>
					break;
				case GEARBOX_N :
					g_LCD_Update = 1 ;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	80 93 dd 00 	sts	0x00DD, r24
					GearBox_State = GEARBOX_D ;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 e1 00 	sts	0x00E1, r24
					g_BAS_State = BAS_ON ;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	80 93 e7 00 	sts	0x00E7, r24
    3680:	0c c0       	rjmp	.+24     	; 0x369a <A_Void_GearBox_Check_State+0x194>
					break;
				case GEARBOX_D :
					g_LCD_Update = 1 ;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	80 93 dd 00 	sts	0x00DD, r24
					GearBox_State = GEARBOX_R ;
    3688:	82 e0       	ldi	r24, 0x02	; 2
    368a:	80 93 e1 00 	sts	0x00E1, r24
					g_BAS_State = BAS_OFF ;
    368e:	10 92 e7 00 	sts	0x00E7, r1
    3692:	03 c0       	rjmp	.+6      	; 0x369a <A_Void_GearBox_Check_State+0x194>
			}
		}
	}
	else
	{
		PB_CurrState = PUSH_BUTTON_RELEASED ;
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	80 93 df 00 	sts	0x00DF, r24
	}
}
    369a:	60 96       	adiw	r28, 0x10	; 16
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <A_Void_AlarmLED_Check_State>:
/*Function: A_Void_AlarmLED_Check_State       		                     			               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_AlarmLED_Check_State(void)
{
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	2f 97       	sbiw	r28, 0x0f	; 15
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
	if((H_PushButton_U8_PushButtonRead(CCS_SWITCH) == PUSH_BUTTON_PRESSED) &&
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    36c6:	88 23       	and	r24, r24
    36c8:	41 f4       	brne	.+16     	; 0x36da <A_Void_AlarmLED_Check_State+0x2e>
    36ca:	80 91 e1 00 	lds	r24, 0x00E1
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	21 f0       	breq	.+8      	; 0x36da <A_Void_AlarmLED_Check_State+0x2e>
			(GearBox_State != GEARBOX_D))
	{
		g_AlarmLED_State = ALARM_LED_ON ;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	80 93 e6 00 	sts	0x00E6, r24
    36d8:	af c0       	rjmp	.+350    	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
	}
	else if((H_PushButton_U8_PushButtonRead(GEARBOX_SWITCH) == PUSH_BUTTON_PRESSED) &&
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    36e0:	88 23       	and	r24, r24
    36e2:	49 f4       	brne	.+18     	; 0x36f6 <A_Void_AlarmLED_Check_State+0x4a>
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <H_PushButton_U8_PushButtonRead>
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	21 f4       	brne	.+8      	; 0x36f6 <A_Void_AlarmLED_Check_State+0x4a>
			(H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_RELEASED))
	{
		g_AlarmLED_State = ALARM_LED_ON ;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 e6 00 	sts	0x00E6, r24
    36f4:	a1 c0       	rjmp	.+322    	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
	}
	else if((g_BAS_State == BAS_ON) && (g_Distance_Range == RANGE_8_6))
    36f6:	80 91 e7 00 	lds	r24, 0x00E7
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	41 f4       	brne	.+16     	; 0x370e <A_Void_AlarmLED_Check_State+0x62>
    36fe:	80 91 e8 00 	lds	r24, 0x00E8
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	21 f4       	brne	.+8      	; 0x370e <A_Void_AlarmLED_Check_State+0x62>
	{
		g_AlarmLED_State = ALARM_LED_ON ;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	80 93 e6 00 	sts	0x00E6, r24
    370c:	95 c0       	rjmp	.+298    	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
	}
	else if((g_BAS_State == BAS_ON) && (g_Distance_Range == RANGE_6_4))
    370e:	80 91 e7 00 	lds	r24, 0x00E7
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	41 f4       	brne	.+16     	; 0x3726 <A_Void_AlarmLED_Check_State+0x7a>
    3716:	80 91 e8 00 	lds	r24, 0x00E8
    371a:	82 30       	cpi	r24, 0x02	; 2
    371c:	21 f4       	brne	.+8      	; 0x3726 <A_Void_AlarmLED_Check_State+0x7a>
	{
		g_AlarmLED_State = ALARM_LED_ON ;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	80 93 e6 00 	sts	0x00E6, r24
    3724:	89 c0       	rjmp	.+274    	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
	}
	else if((g_BAS_State == BAS_ON) && (g_Distance_Range == RANGE_4_2))
    3726:	80 91 e7 00 	lds	r24, 0x00E7
    372a:	81 30       	cpi	r24, 0x01	; 1
    372c:	09 f0       	breq	.+2      	; 0x3730 <A_Void_AlarmLED_Check_State+0x84>
    372e:	82 c0       	rjmp	.+260    	; 0x3834 <A_Void_AlarmLED_Check_State+0x188>
    3730:	80 91 e8 00 	lds	r24, 0x00E8
    3734:	83 30       	cpi	r24, 0x03	; 3
    3736:	09 f0       	breq	.+2      	; 0x373a <A_Void_AlarmLED_Check_State+0x8e>
    3738:	7d c0       	rjmp	.+250    	; 0x3834 <A_Void_AlarmLED_Check_State+0x188>
	{
		g_AlarmLED_State = !g_AlarmLED_State ;
    373a:	80 91 e6 00 	lds	r24, 0x00E6
    373e:	1f 86       	std	Y+15, r1	; 0x0f
    3740:	88 23       	and	r24, r24
    3742:	11 f4       	brne	.+4      	; 0x3748 <A_Void_AlarmLED_Check_State+0x9c>
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	8f 87       	std	Y+15, r24	; 0x0f
    3748:	8f 85       	ldd	r24, Y+15	; 0x0f
    374a:	80 93 e6 00 	sts	0x00E6, r24
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	a8 ec       	ldi	r26, 0xC8	; 200
    3754:	b2 e4       	ldi	r27, 0x42	; 66
    3756:	8b 87       	std	Y+11, r24	; 0x0b
    3758:	9c 87       	std	Y+12, r25	; 0x0c
    375a:	ad 87       	std	Y+13, r26	; 0x0d
    375c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3760:	7c 85       	ldd	r23, Y+12	; 0x0c
    3762:	8d 85       	ldd	r24, Y+13	; 0x0d
    3764:	9e 85       	ldd	r25, Y+14	; 0x0e
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	4a e7       	ldi	r20, 0x7A	; 122
    376c:	55 e4       	ldi	r21, 0x45	; 69
    376e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	8f 83       	std	Y+7, r24	; 0x07
    3778:	98 87       	std	Y+8, r25	; 0x08
    377a:	a9 87       	std	Y+9, r26	; 0x09
    377c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e8       	ldi	r20, 0x80	; 128
    378c:	5f e3       	ldi	r21, 0x3F	; 63
    378e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3792:	88 23       	and	r24, r24
    3794:	2c f4       	brge	.+10     	; 0x37a0 <A_Void_AlarmLED_Check_State+0xf4>
		__ticks = 1;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
    379e:	3f c0       	rjmp	.+126    	; 0x381e <A_Void_AlarmLED_Check_State+0x172>
	else if (__tmp > 65535)
    37a0:	6f 81       	ldd	r22, Y+7	; 0x07
    37a2:	78 85       	ldd	r23, Y+8	; 0x08
    37a4:	89 85       	ldd	r24, Y+9	; 0x09
    37a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	3f ef       	ldi	r19, 0xFF	; 255
    37ac:	4f e7       	ldi	r20, 0x7F	; 127
    37ae:	57 e4       	ldi	r21, 0x47	; 71
    37b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b4:	18 16       	cp	r1, r24
    37b6:	4c f5       	brge	.+82     	; 0x380a <A_Void_AlarmLED_Check_State+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    37bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37be:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e2       	ldi	r20, 0x20	; 32
    37c6:	51 e4       	ldi	r21, 0x41	; 65
    37c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	bc 01       	movw	r22, r24
    37d2:	cd 01       	movw	r24, r26
    37d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
    37e0:	0f c0       	rjmp	.+30     	; 0x3800 <A_Void_AlarmLED_Check_State+0x154>
    37e2:	80 e9       	ldi	r24, 0x90	; 144
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	9c 83       	std	Y+4, r25	; 0x04
    37e8:	8b 83       	std	Y+3, r24	; 0x03
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <A_Void_AlarmLED_Check_State+0x142>
    37f2:	9c 83       	std	Y+4, r25	; 0x04
    37f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f6:	8d 81       	ldd	r24, Y+5	; 0x05
    37f8:	9e 81       	ldd	r25, Y+6	; 0x06
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	9e 83       	std	Y+6, r25	; 0x06
    37fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3800:	8d 81       	ldd	r24, Y+5	; 0x05
    3802:	9e 81       	ldd	r25, Y+6	; 0x06
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	69 f7       	brne	.-38     	; 0x37e2 <A_Void_AlarmLED_Check_State+0x136>
    3808:	17 c0       	rjmp	.+46     	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380a:	6f 81       	ldd	r22, Y+7	; 0x07
    380c:	78 85       	ldd	r23, Y+8	; 0x08
    380e:	89 85       	ldd	r24, Y+9	; 0x09
    3810:	9a 85       	ldd	r25, Y+10	; 0x0a
    3812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	9e 83       	std	Y+6, r25	; 0x06
    381c:	8d 83       	std	Y+5, r24	; 0x05
    381e:	8d 81       	ldd	r24, Y+5	; 0x05
    3820:	9e 81       	ldd	r25, Y+6	; 0x06
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <A_Void_AlarmLED_Check_State+0x17e>
    382e:	9a 83       	std	Y+2, r25	; 0x02
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <A_Void_AlarmLED_Check_State+0x18c>
		_delay_ms(100);
	}
	else
	{
		g_AlarmLED_State = ALARM_LED_OFF ;
    3834:	10 92 e6 00 	sts	0x00E6, r1
	}
}
    3838:	2f 96       	adiw	r28, 0x0f	; 15
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <A_Void_AlarmLED_Task>:
/*Function: A_Void_AlarmLED_Task            		                     			               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_AlarmLED_Task(void)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	00 d0       	rcall	.+0      	; 0x3850 <A_Void_AlarmLED_Task+0x6>
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
	switch(g_AlarmLED_State)
    3854:	80 91 e6 00 	lds	r24, 0x00E6
    3858:	28 2f       	mov	r18, r24
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	3a 83       	std	Y+2, r19	; 0x02
    385e:	29 83       	std	Y+1, r18	; 0x01
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	9a 81       	ldd	r25, Y+2	; 0x02
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	31 f0       	breq	.+12     	; 0x3874 <A_Void_AlarmLED_Task+0x2a>
    3868:	29 81       	ldd	r18, Y+1	; 0x01
    386a:	3a 81       	ldd	r19, Y+2	; 0x02
    386c:	21 30       	cpi	r18, 0x01	; 1
    386e:	31 05       	cpc	r19, r1
    3870:	29 f0       	breq	.+10     	; 0x387c <A_Void_AlarmLED_Task+0x32>
    3872:	07 c0       	rjmp	.+14     	; 0x3882 <A_Void_AlarmLED_Task+0x38>
	{
	case ALARM_LED_OFF :
		H_LED_Void_LedOff(ALARM_LED);
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <H_LED_Void_LedOff>
    387a:	03 c0       	rjmp	.+6      	; 0x3882 <A_Void_AlarmLED_Task+0x38>
		break;
	case ALARM_LED_ON :
		H_LED_Void_LedOn(ALARM_LED);
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <H_LED_Void_LedOn>
		break;
	}
}
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <A_Void_Distance_Check>:
/*Function: A_Void_Distance_Check            		                     			               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_Distance_Check(void)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
	g_Distance = M_ADC_U16_ADCRead(POTENTIOMETER_CHANNEL) ;
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	0e 94 3c 0a 	call	0x1478	; 0x1478 <M_ADC_U16_ADCRead>
    389a:	90 93 e3 00 	sts	0x00E3, r25
    389e:	80 93 e2 00 	sts	0x00E2, r24
	g_Distance = ((g_Distance * 10) / 1023) ;
    38a2:	80 91 e2 00 	lds	r24, 0x00E2
    38a6:	90 91 e3 00 	lds	r25, 0x00E3
    38aa:	9c 01       	movw	r18, r24
    38ac:	22 0f       	add	r18, r18
    38ae:	33 1f       	adc	r19, r19
    38b0:	c9 01       	movw	r24, r18
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	82 0f       	add	r24, r18
    38bc:	93 1f       	adc	r25, r19
    38be:	2f ef       	ldi	r18, 0xFF	; 255
    38c0:	33 e0       	ldi	r19, 0x03	; 3
    38c2:	b9 01       	movw	r22, r18
    38c4:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <__udivmodhi4>
    38c8:	cb 01       	movw	r24, r22
    38ca:	90 93 e3 00 	sts	0x00E3, r25
    38ce:	80 93 e2 00 	sts	0x00E2, r24

	if((g_Distance <= 10) && (g_Distance >= 8))
    38d2:	80 91 e2 00 	lds	r24, 0x00E2
    38d6:	90 91 e3 00 	lds	r25, 0x00E3
    38da:	8b 30       	cpi	r24, 0x0B	; 11
    38dc:	91 05       	cpc	r25, r1
    38de:	50 f4       	brcc	.+20     	; 0x38f4 <A_Void_Distance_Check+0x68>
    38e0:	80 91 e2 00 	lds	r24, 0x00E2
    38e4:	90 91 e3 00 	lds	r25, 0x00E3
    38e8:	88 30       	cpi	r24, 0x08	; 8
    38ea:	91 05       	cpc	r25, r1
    38ec:	18 f0       	brcs	.+6      	; 0x38f4 <A_Void_Distance_Check+0x68>
	{
		g_Distance_Range = RANGE_10_8 ;
    38ee:	10 92 e8 00 	sts	0x00E8, r1
    38f2:	40 c0       	rjmp	.+128    	; 0x3974 <A_Void_Distance_Check+0xe8>
	}
	else if((g_Distance < 8) && (g_Distance >= 6))
    38f4:	80 91 e2 00 	lds	r24, 0x00E2
    38f8:	90 91 e3 00 	lds	r25, 0x00E3
    38fc:	88 30       	cpi	r24, 0x08	; 8
    38fe:	91 05       	cpc	r25, r1
    3900:	58 f4       	brcc	.+22     	; 0x3918 <A_Void_Distance_Check+0x8c>
    3902:	80 91 e2 00 	lds	r24, 0x00E2
    3906:	90 91 e3 00 	lds	r25, 0x00E3
    390a:	86 30       	cpi	r24, 0x06	; 6
    390c:	91 05       	cpc	r25, r1
    390e:	20 f0       	brcs	.+8      	; 0x3918 <A_Void_Distance_Check+0x8c>
	{
		g_Distance_Range = RANGE_8_6 ;
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	80 93 e8 00 	sts	0x00E8, r24
    3916:	2e c0       	rjmp	.+92     	; 0x3974 <A_Void_Distance_Check+0xe8>
	}
	else if((g_Distance < 6) && (g_Distance >= 4))
    3918:	80 91 e2 00 	lds	r24, 0x00E2
    391c:	90 91 e3 00 	lds	r25, 0x00E3
    3920:	86 30       	cpi	r24, 0x06	; 6
    3922:	91 05       	cpc	r25, r1
    3924:	58 f4       	brcc	.+22     	; 0x393c <A_Void_Distance_Check+0xb0>
    3926:	80 91 e2 00 	lds	r24, 0x00E2
    392a:	90 91 e3 00 	lds	r25, 0x00E3
    392e:	84 30       	cpi	r24, 0x04	; 4
    3930:	91 05       	cpc	r25, r1
    3932:	20 f0       	brcs	.+8      	; 0x393c <A_Void_Distance_Check+0xb0>
	{
		g_Distance_Range = RANGE_6_4 ;
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	80 93 e8 00 	sts	0x00E8, r24
    393a:	1c c0       	rjmp	.+56     	; 0x3974 <A_Void_Distance_Check+0xe8>
	}
	else if((g_Distance < 4) && (g_Distance >= 2))
    393c:	80 91 e2 00 	lds	r24, 0x00E2
    3940:	90 91 e3 00 	lds	r25, 0x00E3
    3944:	84 30       	cpi	r24, 0x04	; 4
    3946:	91 05       	cpc	r25, r1
    3948:	58 f4       	brcc	.+22     	; 0x3960 <A_Void_Distance_Check+0xd4>
    394a:	80 91 e2 00 	lds	r24, 0x00E2
    394e:	90 91 e3 00 	lds	r25, 0x00E3
    3952:	82 30       	cpi	r24, 0x02	; 2
    3954:	91 05       	cpc	r25, r1
    3956:	20 f0       	brcs	.+8      	; 0x3960 <A_Void_Distance_Check+0xd4>
	{
		g_Distance_Range = RANGE_4_2 ;
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	80 93 e8 00 	sts	0x00E8, r24
    395e:	0a c0       	rjmp	.+20     	; 0x3974 <A_Void_Distance_Check+0xe8>
	}
	else if((g_Distance < 2) && (g_Distance >= 0))
    3960:	80 91 e2 00 	lds	r24, 0x00E2
    3964:	90 91 e3 00 	lds	r25, 0x00E3
    3968:	82 30       	cpi	r24, 0x02	; 2
    396a:	91 05       	cpc	r25, r1
    396c:	18 f4       	brcc	.+6      	; 0x3974 <A_Void_Distance_Check+0xe8>
	{
		g_Distance_Range = RANGE_2_0 ;
    396e:	84 e0       	ldi	r24, 0x04	; 4
    3970:	80 93 e8 00 	sts	0x00E8, r24
	}
}
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <A_Void_BAS_Task>:
/*Function: A_Void_BAS_Task                 		                     			               */
/*I/P Parameters: nothing						 							                       */
/*Returns:nothing                              				                                       */
/***************************************************************************************************/
void A_Void_BAS_Task(void)
{
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	6e 97       	sbiw	r28, 0x1e	; 30
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
	if(g_BAS_State == BAS_ON)
    398e:	80 91 e7 00 	lds	r24, 0x00E7
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	09 f0       	breq	.+2      	; 0x3998 <A_Void_BAS_Task+0x1e>
    3996:	4a c1       	rjmp	.+660    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
	{
		switch(g_Distance_Range)
    3998:	80 91 e8 00 	lds	r24, 0x00E8
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	3e 8f       	std	Y+30, r19	; 0x1e
    39a2:	2d 8f       	std	Y+29, r18	; 0x1d
    39a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39a8:	82 30       	cpi	r24, 0x02	; 2
    39aa:	91 05       	cpc	r25, r1
    39ac:	81 f1       	breq	.+96     	; 0x3a0e <A_Void_BAS_Task+0x94>
    39ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    39b0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    39b2:	23 30       	cpi	r18, 0x03	; 3
    39b4:	31 05       	cpc	r19, r1
    39b6:	54 f4       	brge	.+20     	; 0x39cc <A_Void_BAS_Task+0x52>
    39b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	89 f0       	breq	.+34     	; 0x39e2 <A_Void_BAS_Task+0x68>
    39c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    39c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    39c4:	21 30       	cpi	r18, 0x01	; 1
    39c6:	31 05       	cpc	r19, r1
    39c8:	b1 f0       	breq	.+44     	; 0x39f6 <A_Void_BAS_Task+0x7c>
    39ca:	30 c1       	rjmp	.+608    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
    39cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39d0:	83 30       	cpi	r24, 0x03	; 3
    39d2:	91 05       	cpc	r25, r1
    39d4:	41 f1       	breq	.+80     	; 0x3a26 <A_Void_BAS_Task+0xac>
    39d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    39d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    39da:	24 30       	cpi	r18, 0x04	; 4
    39dc:	31 05       	cpc	r19, r1
    39de:	79 f1       	breq	.+94     	; 0x3a3e <A_Void_BAS_Task+0xc4>
    39e0:	25 c1       	rjmp	.+586    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
		{
		case RANGE_10_8 :
			g_LCD_Update = 1 ;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	80 93 dd 00 	sts	0x00DD, r24
			g_WarningMessagePtr = g_WarningMessage[0] ;
    39e8:	8e ea       	ldi	r24, 0xAE	; 174
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	90 93 dc 00 	sts	0x00DC, r25
    39f0:	80 93 db 00 	sts	0x00DB, r24
    39f4:	1b c1       	rjmp	.+566    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
			break;
		case RANGE_8_6 :
			g_WarningMessagePtr = g_WarningMessage[1] ;
    39f6:	8d eb       	ldi	r24, 0xBD	; 189
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	90 93 dc 00 	sts	0x00DC, r25
    39fe:	80 93 db 00 	sts	0x00DB, r24
			g_LCD_Update = 1 ;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	80 93 dd 00 	sts	0x00DD, r24
			CCS_State = CCS_OFF ;
    3a08:	10 92 e0 00 	sts	0x00E0, r1
    3a0c:	0f c1       	rjmp	.+542    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
			break;
		case RANGE_6_4 :
			g_WarningMessagePtr = g_WarningMessage[1] ;
    3a0e:	8d eb       	ldi	r24, 0xBD	; 189
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	90 93 dc 00 	sts	0x00DC, r25
    3a16:	80 93 db 00 	sts	0x00DB, r24
			g_LCD_Update = 1 ;
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	80 93 dd 00 	sts	0x00DD, r24
			CCS_State = CCS_OFF ;
    3a20:	10 92 e0 00 	sts	0x00E0, r1
    3a24:	03 c1       	rjmp	.+518    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
			break;
		case RANGE_4_2 :
			g_WarningMessagePtr = g_WarningMessage[1] ;
    3a26:	8d eb       	ldi	r24, 0xBD	; 189
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	90 93 dc 00 	sts	0x00DC, r25
    3a2e:	80 93 db 00 	sts	0x00DB, r24
			g_LCD_Update = 1 ;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	80 93 dd 00 	sts	0x00DD, r24
			CCS_State = CCS_OFF ;
    3a38:	10 92 e0 00 	sts	0x00E0, r1
    3a3c:	f7 c0       	rjmp	.+494    	; 0x3c2c <A_Void_BAS_Task+0x2b2>
			break;
		case RANGE_2_0 :
			g_WarningMessagePtr = g_WarningMessage[2] ;
    3a3e:	8c ec       	ldi	r24, 0xCC	; 204
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	90 93 dc 00 	sts	0x00DC, r25
    3a46:	80 93 db 00 	sts	0x00DB, r24
			g_LCD_Update = 1 ;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	80 93 dd 00 	sts	0x00DD, r24
			CCS_State = CCS_OFF ;
    3a50:	10 92 e0 00 	sts	0x00E0, r1
			M_DIO_Void_SetPinValue(RELAY_PIN , HIGH) ;
    3a54:	85 e2       	ldi	r24, 0x25	; 37
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	aa e7       	ldi	r26, 0x7A	; 122
    3a62:	b4 e4       	ldi	r27, 0x44	; 68
    3a64:	89 8f       	std	Y+25, r24	; 0x19
    3a66:	9a 8f       	std	Y+26, r25	; 0x1a
    3a68:	ab 8f       	std	Y+27, r26	; 0x1b
    3a6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	4a e7       	ldi	r20, 0x7A	; 122
    3a7a:	55 e4       	ldi	r21, 0x45	; 69
    3a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	8d 8b       	std	Y+21, r24	; 0x15
    3a86:	9e 8b       	std	Y+22, r25	; 0x16
    3a88:	af 8b       	std	Y+23, r26	; 0x17
    3a8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a90:	8f 89       	ldd	r24, Y+23	; 0x17
    3a92:	98 8d       	ldd	r25, Y+24	; 0x18
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e8       	ldi	r20, 0x80	; 128
    3a9a:	5f e3       	ldi	r21, 0x3F	; 63
    3a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aa0:	88 23       	and	r24, r24
    3aa2:	2c f4       	brge	.+10     	; 0x3aae <A_Void_BAS_Task+0x134>
		__ticks = 1;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	9c 8b       	std	Y+20, r25	; 0x14
    3aaa:	8b 8b       	std	Y+19, r24	; 0x13
    3aac:	3f c0       	rjmp	.+126    	; 0x3b2c <A_Void_BAS_Task+0x1b2>
	else if (__tmp > 65535)
    3aae:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	3f ef       	ldi	r19, 0xFF	; 255
    3aba:	4f e7       	ldi	r20, 0x7F	; 127
    3abc:	57 e4       	ldi	r21, 0x47	; 71
    3abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac2:	18 16       	cp	r1, r24
    3ac4:	4c f5       	brge	.+82     	; 0x3b18 <A_Void_BAS_Task+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e2       	ldi	r20, 0x20	; 32
    3ad4:	51 e4       	ldi	r21, 0x41	; 65
    3ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	bc 01       	movw	r22, r24
    3ae0:	cd 01       	movw	r24, r26
    3ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	9c 8b       	std	Y+20, r25	; 0x14
    3aec:	8b 8b       	std	Y+19, r24	; 0x13
    3aee:	0f c0       	rjmp	.+30     	; 0x3b0e <A_Void_BAS_Task+0x194>
    3af0:	80 e9       	ldi	r24, 0x90	; 144
    3af2:	91 e0       	ldi	r25, 0x01	; 1
    3af4:	9a 8b       	std	Y+18, r25	; 0x12
    3af6:	89 8b       	std	Y+17, r24	; 0x11
    3af8:	89 89       	ldd	r24, Y+17	; 0x11
    3afa:	9a 89       	ldd	r25, Y+18	; 0x12
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <A_Void_BAS_Task+0x182>
    3b00:	9a 8b       	std	Y+18, r25	; 0x12
    3b02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b04:	8b 89       	ldd	r24, Y+19	; 0x13
    3b06:	9c 89       	ldd	r25, Y+20	; 0x14
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	9c 8b       	std	Y+20, r25	; 0x14
    3b0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b10:	9c 89       	ldd	r25, Y+20	; 0x14
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	69 f7       	brne	.-38     	; 0x3af0 <A_Void_BAS_Task+0x176>
    3b16:	14 c0       	rjmp	.+40     	; 0x3b40 <A_Void_BAS_Task+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b18:	6d 89       	ldd	r22, Y+21	; 0x15
    3b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9c 8b       	std	Y+20, r25	; 0x14
    3b2a:	8b 8b       	std	Y+19, r24	; 0x13
    3b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b30:	98 8b       	std	Y+16, r25	; 0x10
    3b32:	8f 87       	std	Y+15, r24	; 0x0f
    3b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b36:	98 89       	ldd	r25, Y+16	; 0x10
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <A_Void_BAS_Task+0x1be>
    3b3c:	98 8b       	std	Y+16, r25	; 0x10
    3b3e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000) ;
			M_DIO_Void_SetPinValue(RELAY_PIN , LOW) ;
    3b40:	85 e2       	ldi	r24, 0x25	; 37
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_DIO_Void_SetPinValue>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	aa e7       	ldi	r26, 0x7A	; 122
    3b4e:	b4 e4       	ldi	r27, 0x44	; 68
    3b50:	8b 87       	std	Y+11, r24	; 0x0b
    3b52:	9c 87       	std	Y+12, r25	; 0x0c
    3b54:	ad 87       	std	Y+13, r26	; 0x0d
    3b56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a e7       	ldi	r20, 0x7A	; 122
    3b66:	55 e4       	ldi	r21, 0x45	; 69
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8f 83       	std	Y+7, r24	; 0x07
    3b72:	98 87       	std	Y+8, r25	; 0x08
    3b74:	a9 87       	std	Y+9, r26	; 0x09
    3b76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b78:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7a:	78 85       	ldd	r23, Y+8	; 0x08
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <A_Void_BAS_Task+0x220>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <A_Void_BAS_Task+0x29e>
	else if (__tmp > 65535)
    3b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9c:	78 85       	ldd	r23, Y+8	; 0x08
    3b9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <A_Void_BAS_Task+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9e 83       	std	Y+6, r25	; 0x06
    3bd8:	8d 83       	std	Y+5, r24	; 0x05
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <A_Void_BAS_Task+0x280>
    3bdc:	80 e9       	ldi	r24, 0x90	; 144
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	9c 83       	std	Y+4, r25	; 0x04
    3be2:	8b 83       	std	Y+3, r24	; 0x03
    3be4:	8b 81       	ldd	r24, Y+3	; 0x03
    3be6:	9c 81       	ldd	r25, Y+4	; 0x04
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <A_Void_BAS_Task+0x26e>
    3bec:	9c 83       	std	Y+4, r25	; 0x04
    3bee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	9e 83       	std	Y+6, r25	; 0x06
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <A_Void_BAS_Task+0x262>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <A_Void_BAS_Task+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	6f 81       	ldd	r22, Y+7	; 0x07
    3c06:	78 85       	ldd	r23, Y+8	; 0x08
    3c08:	89 85       	ldd	r24, Y+9	; 0x09
    3c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1c:	9a 83       	std	Y+2, r25	; 0x02
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	9a 81       	ldd	r25, Y+2	; 0x02
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <A_Void_BAS_Task+0x2aa>
    3c28:	9a 83       	std	Y+2, r25	; 0x02
    3c2a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000) ;
			break;
		}
	}
}
    3c2c:	6e 96       	adiw	r28, 0x1e	; 30
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	cf 91       	pop	r28
    3c3a:	df 91       	pop	r29
    3c3c:	08 95       	ret

00003c3e <main>:
#include "../BitMath.h"
/*********************************************************************/
#include "States_Interface.h"
/*********************************************************************/
int main()
{
    3c3e:	df 93       	push	r29
    3c40:	cf 93       	push	r28
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
	A_Void_Init_System             ();
    3c46:	0e 94 e7 17 	call	0x2fce	; 0x2fce <A_Void_Init_System>
	A_Void_LCD_Const_Display       ();
    3c4a:	0e 94 10 18 	call	0x3020	; 0x3020 <A_Void_LCD_Const_Display>
	while (1)
	{
		A_Void_LCD_Display         ();
    3c4e:	0e 94 94 18 	call	0x3128	; 0x3128 <A_Void_LCD_Display>
		A_Void_AccLED_Check_State  ();
    3c52:	0e 94 1b 19 	call	0x3236	; 0x3236 <A_Void_AccLED_Check_State>
		A_Void_AccLED_Task         ();
    3c56:	0e 94 32 19 	call	0x3264	; 0x3264 <A_Void_AccLED_Task>
		A_Void_BrakeLED_Check_State();
    3c5a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <A_Void_BrakeLED_Check_State>
		A_Void_BrakeLED_Task       ();
    3c5e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <A_Void_BrakeLED_Task>
		A_Void_CCS_Check_State     ();
    3c62:	0e 94 9a 19 	call	0x3334	; 0x3334 <A_Void_CCS_Check_State>
		A_Void_CcsLED_Task         ();
    3c66:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <A_Void_CcsLED_Task>
		A_Void_GearBox_Check_State ();
    3c6a:	0e 94 83 1a 	call	0x3506	; 0x3506 <A_Void_GearBox_Check_State>
		A_Void_AlarmLED_Check_State();
    3c6e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <A_Void_AlarmLED_Check_State>
		A_Void_AlarmLED_Task       ();
    3c72:	0e 94 25 1c 	call	0x384a	; 0x384a <A_Void_AlarmLED_Task>
		A_Void_Distance_Check      ();
    3c76:	0e 94 46 1c 	call	0x388c	; 0x388c <A_Void_Distance_Check>
		A_Void_BAS_Task            ();
    3c7a:	0e 94 bd 1c 	call	0x397a	; 0x397a <A_Void_BAS_Task>
    3c7e:	e7 cf       	rjmp	.-50     	; 0x3c4e <main+0x10>

00003c80 <__udivmodqi4>:
    3c80:	99 1b       	sub	r25, r25
    3c82:	79 e0       	ldi	r23, 0x09	; 9
    3c84:	04 c0       	rjmp	.+8      	; 0x3c8e <__udivmodqi4_ep>

00003c86 <__udivmodqi4_loop>:
    3c86:	99 1f       	adc	r25, r25
    3c88:	96 17       	cp	r25, r22
    3c8a:	08 f0       	brcs	.+2      	; 0x3c8e <__udivmodqi4_ep>
    3c8c:	96 1b       	sub	r25, r22

00003c8e <__udivmodqi4_ep>:
    3c8e:	88 1f       	adc	r24, r24
    3c90:	7a 95       	dec	r23
    3c92:	c9 f7       	brne	.-14     	; 0x3c86 <__udivmodqi4_loop>
    3c94:	80 95       	com	r24
    3c96:	08 95       	ret

00003c98 <__udivmodhi4>:
    3c98:	aa 1b       	sub	r26, r26
    3c9a:	bb 1b       	sub	r27, r27
    3c9c:	51 e1       	ldi	r21, 0x11	; 17
    3c9e:	07 c0       	rjmp	.+14     	; 0x3cae <__udivmodhi4_ep>

00003ca0 <__udivmodhi4_loop>:
    3ca0:	aa 1f       	adc	r26, r26
    3ca2:	bb 1f       	adc	r27, r27
    3ca4:	a6 17       	cp	r26, r22
    3ca6:	b7 07       	cpc	r27, r23
    3ca8:	10 f0       	brcs	.+4      	; 0x3cae <__udivmodhi4_ep>
    3caa:	a6 1b       	sub	r26, r22
    3cac:	b7 0b       	sbc	r27, r23

00003cae <__udivmodhi4_ep>:
    3cae:	88 1f       	adc	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	5a 95       	dec	r21
    3cb4:	a9 f7       	brne	.-22     	; 0x3ca0 <__udivmodhi4_loop>
    3cb6:	80 95       	com	r24
    3cb8:	90 95       	com	r25
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	08 95       	ret

00003cc0 <__divmodsi4>:
    3cc0:	97 fb       	bst	r25, 7
    3cc2:	09 2e       	mov	r0, r25
    3cc4:	05 26       	eor	r0, r21
    3cc6:	0e d0       	rcall	.+28     	; 0x3ce4 <__divmodsi4_neg1>
    3cc8:	57 fd       	sbrc	r21, 7
    3cca:	04 d0       	rcall	.+8      	; 0x3cd4 <__divmodsi4_neg2>
    3ccc:	14 d0       	rcall	.+40     	; 0x3cf6 <__udivmodsi4>
    3cce:	0a d0       	rcall	.+20     	; 0x3ce4 <__divmodsi4_neg1>
    3cd0:	00 1c       	adc	r0, r0
    3cd2:	38 f4       	brcc	.+14     	; 0x3ce2 <__divmodsi4_exit>

00003cd4 <__divmodsi4_neg2>:
    3cd4:	50 95       	com	r21
    3cd6:	40 95       	com	r20
    3cd8:	30 95       	com	r19
    3cda:	21 95       	neg	r18
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce0:	5f 4f       	sbci	r21, 0xFF	; 255

00003ce2 <__divmodsi4_exit>:
    3ce2:	08 95       	ret

00003ce4 <__divmodsi4_neg1>:
    3ce4:	f6 f7       	brtc	.-4      	; 0x3ce2 <__divmodsi4_exit>
    3ce6:	90 95       	com	r25
    3ce8:	80 95       	com	r24
    3cea:	70 95       	com	r23
    3cec:	61 95       	neg	r22
    3cee:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf4:	08 95       	ret

00003cf6 <__udivmodsi4>:
    3cf6:	a1 e2       	ldi	r26, 0x21	; 33
    3cf8:	1a 2e       	mov	r1, r26
    3cfa:	aa 1b       	sub	r26, r26
    3cfc:	bb 1b       	sub	r27, r27
    3cfe:	fd 01       	movw	r30, r26
    3d00:	0d c0       	rjmp	.+26     	; 0x3d1c <__udivmodsi4_ep>

00003d02 <__udivmodsi4_loop>:
    3d02:	aa 1f       	adc	r26, r26
    3d04:	bb 1f       	adc	r27, r27
    3d06:	ee 1f       	adc	r30, r30
    3d08:	ff 1f       	adc	r31, r31
    3d0a:	a2 17       	cp	r26, r18
    3d0c:	b3 07       	cpc	r27, r19
    3d0e:	e4 07       	cpc	r30, r20
    3d10:	f5 07       	cpc	r31, r21
    3d12:	20 f0       	brcs	.+8      	; 0x3d1c <__udivmodsi4_ep>
    3d14:	a2 1b       	sub	r26, r18
    3d16:	b3 0b       	sbc	r27, r19
    3d18:	e4 0b       	sbc	r30, r20
    3d1a:	f5 0b       	sbc	r31, r21

00003d1c <__udivmodsi4_ep>:
    3d1c:	66 1f       	adc	r22, r22
    3d1e:	77 1f       	adc	r23, r23
    3d20:	88 1f       	adc	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	1a 94       	dec	r1
    3d26:	69 f7       	brne	.-38     	; 0x3d02 <__udivmodsi4_loop>
    3d28:	60 95       	com	r22
    3d2a:	70 95       	com	r23
    3d2c:	80 95       	com	r24
    3d2e:	90 95       	com	r25
    3d30:	9b 01       	movw	r18, r22
    3d32:	ac 01       	movw	r20, r24
    3d34:	bd 01       	movw	r22, r26
    3d36:	cf 01       	movw	r24, r30
    3d38:	08 95       	ret

00003d3a <__prologue_saves__>:
    3d3a:	2f 92       	push	r2
    3d3c:	3f 92       	push	r3
    3d3e:	4f 92       	push	r4
    3d40:	5f 92       	push	r5
    3d42:	6f 92       	push	r6
    3d44:	7f 92       	push	r7
    3d46:	8f 92       	push	r8
    3d48:	9f 92       	push	r9
    3d4a:	af 92       	push	r10
    3d4c:	bf 92       	push	r11
    3d4e:	cf 92       	push	r12
    3d50:	df 92       	push	r13
    3d52:	ef 92       	push	r14
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	ca 1b       	sub	r28, r26
    3d64:	db 0b       	sbc	r29, r27
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	09 94       	ijmp

00003d72 <__epilogue_restores__>:
    3d72:	2a 88       	ldd	r2, Y+18	; 0x12
    3d74:	39 88       	ldd	r3, Y+17	; 0x11
    3d76:	48 88       	ldd	r4, Y+16	; 0x10
    3d78:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d80:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d82:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d84:	b9 84       	ldd	r11, Y+9	; 0x09
    3d86:	c8 84       	ldd	r12, Y+8	; 0x08
    3d88:	df 80       	ldd	r13, Y+7	; 0x07
    3d8a:	ee 80       	ldd	r14, Y+6	; 0x06
    3d8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3d8e:	0c 81       	ldd	r16, Y+4	; 0x04
    3d90:	1b 81       	ldd	r17, Y+3	; 0x03
    3d92:	aa 81       	ldd	r26, Y+2	; 0x02
    3d94:	b9 81       	ldd	r27, Y+1	; 0x01
    3d96:	ce 0f       	add	r28, r30
    3d98:	d1 1d       	adc	r29, r1
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	ed 01       	movw	r28, r26
    3da6:	08 95       	ret

00003da8 <_exit>:
    3da8:	f8 94       	cli

00003daa <__stop_program>:
    3daa:	ff cf       	rjmp	.-2      	; 0x3daa <__stop_program>
