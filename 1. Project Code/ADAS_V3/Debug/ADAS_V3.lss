
ADAS_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  00004e06  00004e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080021a  0080021a  00005054  2**0
                  ALLOC
  3 .stab         00004b84  00000000  00000000  00005054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bd0  00000000  00000000  00009bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000bb3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000df45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000104a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001095a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_1>
       8:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_2>
       c:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 34       	cpi	r26, 0x40	; 64
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 26 	call	0x4c72	; 0x4c72 <main>
      8a:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ef       	ldi	r26, 0xFF	; 255
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 26 	jmp	0x4dcc	; 0x4dcc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 26 	jmp	0x4dcc	; 0x4dcc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ef       	ldi	r22, 0xFF	; 255
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 5f       	subi	r30, 0xF9	; 249
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_Timer_Void_TimerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/** Enable global interrupt flag */
	SET_BIT(SREG, 7);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24

#if   TIMER0_MODE   ==   NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	8c 93       	st	X, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
     e60:	a9 e5       	ldi	r26, 0x59	; 89
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e9 e5       	ldi	r30, 0x59	; 89
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <M_Timer_Void_TimerSetTime>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	2c 97       	sbiw	r28, 0x0c	; 12
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	69 87       	std	Y+9, r22	; 0x09
     e8a:	7a 87       	std	Y+10, r23	; 0x0a
     e8c:	8b 87       	std	Y+11, r24	; 0x0b
     e8e:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
     e90:	80 e4       	ldi	r24, 0x40	; 64
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	af 83       	std	Y+7, r26	; 0x07
     e9e:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	ab 85       	ldd	r26, Y+11	; 0x0b
     ea6:	bc 85       	ldd	r27, Y+12	; 0x0c
     ea8:	28 ee       	ldi	r18, 0xE8	; 232
     eaa:	33 e0       	ldi	r19, 0x03	; 3
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <__mulsi3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	4f 81       	ldd	r20, Y+7	; 0x07
     ec2:	58 85       	ldd	r21, Y+8	; 0x08
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
     ecc:	da 01       	movw	r26, r20
     ece:	c9 01       	movw	r24, r18
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	ab 81       	ldd	r26, Y+3	; 0x03
     ede:	bc 81       	ldd	r27, Y+4	; 0x04
     ee0:	89 2f       	mov	r24, r25
     ee2:	9a 2f       	mov	r25, r26
     ee4:	ab 2f       	mov	r26, r27
     ee6:	bb 27       	eor	r27, r27
     ee8:	80 93 1a 02 	sts	0x021A, r24
     eec:	90 93 1b 02 	sts	0x021B, r25
     ef0:	a0 93 1c 02 	sts	0x021C, r26
     ef4:	b0 93 1d 02 	sts	0x021D, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	80 93 22 02 	sts	0x0222, r24
	if(Timer_U8_RemTicks != 0)
     efe:	80 91 22 02 	lds	r24, 0x0222
     f02:	88 23       	and	r24, r24
     f04:	c9 f0       	breq	.+50     	; 0xf38 <M_Timer_Void_TimerSetTime+0xc4>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
     f06:	e2 e5       	ldi	r30, 0x52	; 82
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 91 22 02 	lds	r24, 0x0222
     f0e:	81 95       	neg	r24
     f10:	80 83       	st	Z, r24
		Timer_U32_NumOfOV++;
     f12:	80 91 1a 02 	lds	r24, 0x021A
     f16:	90 91 1b 02 	lds	r25, 0x021B
     f1a:	a0 91 1c 02 	lds	r26, 0x021C
     f1e:	b0 91 1d 02 	lds	r27, 0x021D
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	a1 1d       	adc	r26, r1
     f26:	b1 1d       	adc	r27, r1
     f28:	80 93 1a 02 	sts	0x021A, r24
     f2c:	90 93 1b 02 	sts	0x021B, r25
     f30:	a0 93 1c 02 	sts	0x021C, r26
     f34:	b0 93 1d 02 	sts	0x021D, r27
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
     f38:	2c 96       	adiw	r28, 0x0c	; 12
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <M_Timer_Void_TimerStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <M_Timer_Void_TimerStart+0x6>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3b 83       	std	Y+3, r19	; 0x03
     f60:	2a 83       	std	Y+2, r18	; 0x02
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	31 f0       	breq	.+12     	; 0xf76 <M_Timer_Void_TimerStart+0x2c>
     f6a:	2a 81       	ldd	r18, Y+2	; 0x02
     f6c:	3b 81       	ldd	r19, Y+3	; 0x03
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	b9 f0       	breq	.+46     	; 0xfa2 <M_Timer_Void_TimerStart+0x58>
     f74:	2b c0       	rjmp	.+86     	; 0xfcc <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
     f76:	a3 e5       	ldi	r26, 0x53	; 83
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e3 e5       	ldi	r30, 0x53	; 83
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	8c 93       	st	X, r24
     fa0:	15 c0       	rjmp	.+42     	; 0xfcc <M_Timer_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
     fa2:	ae e4       	ldi	r26, 0x4E	; 78
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ee e4       	ldi	r30, 0x4E	; 78
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     fb0:	ae e4       	ldi	r26, 0x4E	; 78
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8d 7f       	andi	r24, 0xFD	; 253
     fbc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
     fbe:	ae e4       	ldi	r26, 0x4E	; 78
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	84 60       	ori	r24, 0x04	; 4
     fca:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <M_Timer_Void_TimerStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <M_Timer_Void_TimerStop+0x6>
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3b 83       	std	Y+3, r19	; 0x03
     fee:	2a 83       	std	Y+2, r18	; 0x02
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	31 f0       	breq	.+12     	; 0x1004 <M_Timer_Void_TimerStop+0x2c>
     ff8:	2a 81       	ldd	r18, Y+2	; 0x02
     ffa:	3b 81       	ldd	r19, Y+3	; 0x03
     ffc:	21 30       	cpi	r18, 0x01	; 1
     ffe:	31 05       	cpc	r19, r1
    1000:	b9 f0       	breq	.+46     	; 0x1030 <M_Timer_Void_TimerStop+0x58>
    1002:	2b c0       	rjmp	.+86     	; 0x105a <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    1004:	a3 e5       	ldi	r26, 0x53	; 83
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e3 e5       	ldi	r30, 0x53	; 83
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8e 7f       	andi	r24, 0xFE	; 254
    1010:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e3 e5       	ldi	r30, 0x53	; 83
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8d 7f       	andi	r24, 0xFD	; 253
    101e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8b 7f       	andi	r24, 0xFB	; 251
    102c:	8c 93       	st	X, r24
    102e:	15 c0       	rjmp	.+42     	; 0x105a <M_Timer_Void_TimerStop+0x82>

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    104c:	ae e4       	ldi	r26, 0x4E	; 78
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ee e4       	ldi	r30, 0x4E	; 78
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8b 7f       	andi	r24, 0xFB	; 251
    1058:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <M_Timer_Void_PWMInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <M_Timer_Void_PWMInit+0x6>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3b 83       	std	Y+3, r19	; 0x03
    107c:	2a 83       	std	Y+2, r18	; 0x02
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <M_Timer_Void_PWMInit+0x2c>
    1086:	2a 81       	ldd	r18, Y+2	; 0x02
    1088:	3b 81       	ldd	r19, Y+3	; 0x03
    108a:	21 30       	cpi	r18, 0x01	; 1
    108c:	31 05       	cpc	r19, r1
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <M_Timer_Void_PWMInit+0x52>
    1090:	47 c0       	rjmp	.+142    	; 0x1120 <M_Timer_Void_PWMInit+0xba>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    1092:	87 e1       	ldi	r24, 0x17	; 23
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    10a8:	a3 e5       	ldi	r26, 0x53	; 83
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e3 e5       	ldi	r30, 0x53	; 83
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	8c 93       	st	X, r24
    10b6:	34 c0       	rjmp	.+104    	; 0x1120 <M_Timer_Void_PWMInit+0xba>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    10b8:	8d e2       	ldi	r24, 0x2D	; 45
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    10c0:	af e4       	ldi	r26, 0x4F	; 79
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ef e4       	ldi	r30, 0x4F	; 79
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8e 7f       	andi	r24, 0xFE	; 254
    10cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    10ce:	af e4       	ldi	r26, 0x4F	; 79
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ef e4       	ldi	r30, 0x4F	; 79
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    10dc:	ae e4       	ldi	r26, 0x4E	; 78
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ee e4       	ldi	r30, 0x4E	; 78
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 60       	ori	r24, 0x08	; 8
    10e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    10ea:	ae e4       	ldi	r26, 0x4E	; 78
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ee e4       	ldi	r30, 0x4E	; 78
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 61       	ori	r24, 0x10	; 16
    10f6:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7b       	andi	r24, 0xBF	; 191
    1104:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 68       	ori	r24, 0x80	; 128
    1112:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    1114:	e6 e4       	ldi	r30, 0x46	; 70
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	27 97       	sbiw	r28, 0x07	; 7
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	4a 83       	std	Y+2, r20	; 0x02
    1148:	5b 83       	std	Y+3, r21	; 0x03
    114a:	6c 83       	std	Y+4, r22	; 0x04
    114c:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3f 83       	std	Y+7, r19	; 0x07
    1156:	2e 83       	std	Y+6, r18	; 0x06
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	d9 f1       	breq	.+118    	; 0x11d6 <M_Timer_Void_PWMSetDutyCycle+0xaa>
    1160:	ee 81       	ldd	r30, Y+6	; 0x06
    1162:	ff 81       	ldd	r31, Y+7	; 0x07
    1164:	e1 30       	cpi	r30, 0x01	; 1
    1166:	f1 05       	cpc	r31, r1
    1168:	b1 f5       	brne	.+108    	; 0x11d6 <M_Timer_Void_PWMSetDutyCycle+0xaa>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    116a:	0a e4       	ldi	r16, 0x4A	; 74
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	e6 e4       	ldi	r30, 0x46	; 70
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	cc 01       	movw	r24, r24
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	2a 81       	ldd	r18, Y+2	; 0x02
    118e:	3b 81       	ldd	r19, Y+3	; 0x03
    1190:	4c 81       	ldd	r20, Y+4	; 0x04
    1192:	5d 81       	ldd	r21, Y+5	; 0x05
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	48 ec       	ldi	r20, 0xC8	; 200
    11a6:	52 e4       	ldi	r21, 0x42	; 66
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	f8 01       	movw	r30, r16
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    11d6:	27 96       	adiw	r28, 0x07	; 7
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <M_Timer_Void_PWMStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_Timer_Void_TimerStart>
}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <M_Timer_Void_PWMStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <M_Timer_Void_TimerStop>
}
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <M_Timer_Void_SetCallBack>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <M_Timer_Void_SetCallBack+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 39 02 	sts	0x0239, r25
    1236:	80 93 38 02 	sts	0x0238, r24
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    126e:	80 91 23 02 	lds	r24, 0x0223
    1272:	90 91 24 02 	lds	r25, 0x0224
    1276:	a0 91 25 02 	lds	r26, 0x0225
    127a:	b0 91 26 02 	lds	r27, 0x0226
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	a1 1d       	adc	r26, r1
    1282:	b1 1d       	adc	r27, r1
    1284:	80 93 23 02 	sts	0x0223, r24
    1288:	90 93 24 02 	sts	0x0224, r25
    128c:	a0 93 25 02 	sts	0x0225, r26
    1290:	b0 93 26 02 	sts	0x0226, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    1294:	20 91 23 02 	lds	r18, 0x0223
    1298:	30 91 24 02 	lds	r19, 0x0224
    129c:	40 91 25 02 	lds	r20, 0x0225
    12a0:	50 91 26 02 	lds	r21, 0x0226
    12a4:	80 91 1a 02 	lds	r24, 0x021A
    12a8:	90 91 1b 02 	lds	r25, 0x021B
    12ac:	a0 91 1c 02 	lds	r26, 0x021C
    12b0:	b0 91 1d 02 	lds	r27, 0x021D
    12b4:	28 17       	cp	r18, r24
    12b6:	39 07       	cpc	r19, r25
    12b8:	4a 07       	cpc	r20, r26
    12ba:	5b 07       	cpc	r21, r27
    12bc:	99 f4       	brne	.+38     	; 0x12e4 <__vector_11+0xa0>
	{
		Local_U32_Counter = 0;
    12be:	10 92 23 02 	sts	0x0223, r1
    12c2:	10 92 24 02 	sts	0x0224, r1
    12c6:	10 92 25 02 	sts	0x0225, r1
    12ca:	10 92 26 02 	sts	0x0226, r1
		Timer_CallBack();
    12ce:	e0 91 38 02 	lds	r30, 0x0238
    12d2:	f0 91 39 02 	lds	r31, 0x0239
    12d6:	09 95       	icall
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    12d8:	e2 e5       	ldi	r30, 0x52	; 82
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 91 22 02 	lds	r24, 0x0222
    12e0:	81 95       	neg	r24
    12e2:	80 83       	st	Z, r24
	}
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <M_EXTINT_Void_EXTINTInit+0x6>
    1310:	0f 92       	push	r0
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3b 83       	std	Y+3, r19	; 0x03
    1320:	2a 83       	std	Y+2, r18	; 0x02
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	f9 f0       	breq	.+62     	; 0x136a <M_EXTINT_Void_EXTINTInit+0x60>
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	81 f1       	breq	.+96     	; 0x1396 <M_EXTINT_Void_EXTINTInit+0x8c>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	d1 f5       	brne	.+116    	; 0x13b2 <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    133e:	a5 e5       	ldi	r26, 0x55	; 85
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e5       	ldi	r30, 0x55	; 85
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8e 7f       	andi	r24, 0xFE	; 254
    134a:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    134c:	a5 e5       	ldi	r26, 0x55	; 85
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e5       	ldi	r30, 0x55	; 85
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
    135a:	ab e5       	ldi	r26, 0x5B	; 91
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	eb e5       	ldi	r30, 0x5B	; 91
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	80 64       	ori	r24, 0x40	; 64
    1366:	8c 93       	st	X, r24
    1368:	24 c0       	rjmp	.+72     	; 0x13b2 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8b 7f       	andi	r24, 0xFB	; 251
    1376:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	88 60       	ori	r24, 0x08	; 8
    1384:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT1_BIT);
    1386:	ab e5       	ldi	r26, 0x5B	; 91
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e5       	ldi	r30, 0x5B	; 91
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	8c 93       	st	X, r24
    1394:	0e c0       	rjmp	.+28     	; 0x13b2 <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1396:	a4 e5       	ldi	r26, 0x54	; 84
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e4 e5       	ldi	r30, 0x54	; 84
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT2_BIT);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 62       	ori	r24, 0x20	; 32
    13b0:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <M_EXTINT_Void_SetCallBack+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <M_EXTINT_Void_SetCallBack+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	7b 83       	std	Y+3, r23	; 0x03
    13d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <M_EXTINT_Void_SetCallBack+0x48>
    13e6:	2c 81       	ldd	r18, Y+4	; 0x04
    13e8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	91 f0       	breq	.+36     	; 0x1414 <M_EXTINT_Void_SetCallBack+0x56>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	9d 81       	ldd	r25, Y+5	; 0x05
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	a1 f4       	brne	.+40     	; 0x1420 <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	90 93 3f 02 	sts	0x023F, r25
    1400:	80 93 3e 02 	sts	0x023E, r24
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	90 93 3b 02 	sts	0x023B, r25
    140e:	80 93 3a 02 	sts	0x023A, r24
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	90 93 3d 02 	sts	0x023D, r25
    141c:	80 93 3c 02 	sts	0x023C, r24
	default:                                       break;
	}
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <__vector_1>:

ISR(INT0_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    145a:	e0 91 3e 02 	lds	r30, 0x023E
    145e:	f0 91 3f 02 	lds	r31, 0x023F
    1462:	09 95       	icall
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	ff 91       	pop	r31
    146a:	ef 91       	pop	r30
    146c:	bf 91       	pop	r27
    146e:	af 91       	pop	r26
    1470:	9f 91       	pop	r25
    1472:	8f 91       	pop	r24
    1474:	7f 91       	pop	r23
    1476:	6f 91       	pop	r22
    1478:	5f 91       	pop	r21
    147a:	4f 91       	pop	r20
    147c:	3f 91       	pop	r19
    147e:	2f 91       	pop	r18
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti

0000148a <__vector_2>:
ISR(INT1_vect)
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    14b4:	e0 91 3a 02 	lds	r30, 0x023A
    14b8:	f0 91 3b 02 	lds	r31, 0x023B
    14bc:	09 95       	icall
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_3>:
ISR(INT2_vect)
{
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    150e:	e0 91 3c 02 	lds	r30, 0x023C
    1512:	f0 91 3d 02 	lds	r31, 0x023D
    1516:	09 95       	icall
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <M_DIO_Void_SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	2a 97       	sbiw	r28, 0x0a	; 10
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9a e0       	ldi	r25, 0x0A	; 10
    155a:	69 2f       	mov	r22, r25
    155c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    1560:	89 2f       	mov	r24, r25
    1562:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9a e0       	ldi	r25, 0x0A	; 10
    1568:	69 2f       	mov	r22, r25
    156a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    156e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	3a 87       	std	Y+10, r19	; 0x0a
    1578:	29 87       	std	Y+9, r18	; 0x09
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	39 f0       	breq	.+14     	; 0x1590 <M_DIO_Void_SetPinDirection+0x52>
    1582:	29 85       	ldd	r18, Y+9	; 0x09
    1584:	3a 85       	ldd	r19, Y+10	; 0x0a
    1586:	21 30       	cpi	r18, 0x01	; 1
    1588:	31 05       	cpc	r19, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <M_DIO_Void_SetPinDirection+0x50>
    158c:	76 c0       	rjmp	.+236    	; 0x167a <M_DIO_Void_SetPinDirection+0x13c>
    158e:	e4 c0       	rjmp	.+456    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT :
		switch(Local_U8_Port)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	38 87       	std	Y+8, r19	; 0x08
    1598:	2f 83       	std	Y+7, r18	; 0x07
    159a:	8f 81       	ldd	r24, Y+7	; 0x07
    159c:	98 85       	ldd	r25, Y+8	; 0x08
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	91 05       	cpc	r25, r1
    15a2:	61 f1       	breq	.+88     	; 0x15fc <M_DIO_Void_SetPinDirection+0xbe>
    15a4:	2f 81       	ldd	r18, Y+7	; 0x07
    15a6:	38 85       	ldd	r19, Y+8	; 0x08
    15a8:	23 30       	cpi	r18, 0x03	; 3
    15aa:	31 05       	cpc	r19, r1
    15ac:	34 f4       	brge	.+12     	; 0x15ba <M_DIO_Void_SetPinDirection+0x7c>
    15ae:	8f 81       	ldd	r24, Y+7	; 0x07
    15b0:	98 85       	ldd	r25, Y+8	; 0x08
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <M_DIO_Void_SetPinDirection+0x94>
    15b8:	cf c0       	rjmp	.+414    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
    15ba:	2f 81       	ldd	r18, Y+7	; 0x07
    15bc:	38 85       	ldd	r19, Y+8	; 0x08
    15be:	23 30       	cpi	r18, 0x03	; 3
    15c0:	31 05       	cpc	r19, r1
    15c2:	89 f1       	breq	.+98     	; 0x1626 <M_DIO_Void_SetPinDirection+0xe8>
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <M_DIO_Void_SetPinDirection+0x92>
    15ce:	40 c0       	rjmp	.+128    	; 0x1650 <M_DIO_Void_SetPinDirection+0x112>
    15d0:	c3 c0       	rjmp	.+390    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    15d2:	aa e3       	ldi	r26, 0x3A	; 58
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ea e3       	ldi	r30, 0x3A	; 58
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <M_DIO_Void_SetPinDirection+0xb2>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <M_DIO_Void_SetPinDirection+0xae>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	ae c0       	rjmp	.+348    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <M_DIO_Void_SetPinDirection+0xdc>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <M_DIO_Void_SetPinDirection+0xd8>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	99 c0       	rjmp	.+306    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <M_DIO_Void_SetPinDirection+0x106>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <M_DIO_Void_SetPinDirection+0x102>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	84 c0       	rjmp	.+264    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1650:	a1 e3       	ldi	r26, 0x31	; 49
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <M_DIO_Void_SetPinDirection+0x130>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <M_DIO_Void_SetPinDirection+0x12c>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6f c0       	rjmp	.+222    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
		}
		break;
		case OUTPUT:
			switch(Local_U8_Port)
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3e 83       	std	Y+6, r19	; 0x06
    1682:	2d 83       	std	Y+5, r18	; 0x05
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	91 05       	cpc	r25, r1
    168c:	51 f1       	breq	.+84     	; 0x16e2 <M_DIO_Void_SetPinDirection+0x1a4>
    168e:	2d 81       	ldd	r18, Y+5	; 0x05
    1690:	3e 81       	ldd	r19, Y+6	; 0x06
    1692:	23 30       	cpi	r18, 0x03	; 3
    1694:	31 05       	cpc	r19, r1
    1696:	34 f4       	brge	.+12     	; 0x16a4 <M_DIO_Void_SetPinDirection+0x166>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	91 05       	cpc	r25, r1
    16a0:	61 f0       	breq	.+24     	; 0x16ba <M_DIO_Void_SetPinDirection+0x17c>
    16a2:	5a c0       	rjmp	.+180    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	23 30       	cpi	r18, 0x03	; 3
    16aa:	31 05       	cpc	r19, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <M_DIO_Void_SetPinDirection+0x1cc>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	91 05       	cpc	r25, r1
    16b6:	e9 f1       	breq	.+122    	; 0x1732 <M_DIO_Void_SetPinDirection+0x1f4>
    16b8:	4f c0       	rjmp	.+158    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    16ba:	aa e3       	ldi	r26, 0x3A	; 58
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <M_DIO_Void_SetPinDirection+0x19a>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <M_DIO_Void_SetPinDirection+0x196>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	3b c0       	rjmp	.+118    	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    16e2:	a7 e3       	ldi	r26, 0x37	; 55
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e3       	ldi	r30, 0x37	; 55
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <M_DIO_Void_SetPinDirection+0x1c2>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <M_DIO_Void_SetPinDirection+0x1be>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	27 c0       	rjmp	.+78     	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    170a:	a4 e3       	ldi	r26, 0x34	; 52
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e4 e3       	ldi	r30, 0x34	; 52
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <M_DIO_Void_SetPinDirection+0x1ea>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <M_DIO_Void_SetPinDirection+0x1e6>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	13 c0       	rjmp	.+38     	; 0x1758 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    1732:	a1 e3       	ldi	r26, 0x31	; 49
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e1 e3       	ldi	r30, 0x31	; 49
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <M_DIO_Void_SetPinDirection+0x212>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <M_DIO_Void_SetPinDirection+0x20e>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
			}
			break;
	}
}
    1758:	2a 96       	adiw	r28, 0x0a	; 10
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <M_DIO_Void_SetPinValue>:

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	2a 97       	sbiw	r28, 0x0a	; 10
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	8b 83       	std	Y+3, r24	; 0x03
    1780:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9a e0       	ldi	r25, 0x0A	; 10
    1786:	69 2f       	mov	r22, r25
    1788:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    178c:	89 2f       	mov	r24, r25
    178e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9a e0       	ldi	r25, 0x0A	; 10
    1794:	69 2f       	mov	r22, r25
    1796:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    179a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3a 87       	std	Y+10, r19	; 0x0a
    17a4:	29 87       	std	Y+9, r18	; 0x09
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	39 f0       	breq	.+14     	; 0x17bc <M_DIO_Void_SetPinValue+0x52>
    17ae:	29 85       	ldd	r18, Y+9	; 0x09
    17b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b2:	21 30       	cpi	r18, 0x01	; 1
    17b4:	31 05       	cpc	r19, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <M_DIO_Void_SetPinValue+0x50>
    17b8:	76 c0       	rjmp	.+236    	; 0x18a6 <M_DIO_Void_SetPinValue+0x13c>
    17ba:	e4 c0       	rjmp	.+456    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW :
		switch(Local_U8_Port)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	38 87       	std	Y+8, r19	; 0x08
    17c4:	2f 83       	std	Y+7, r18	; 0x07
    17c6:	8f 81       	ldd	r24, Y+7	; 0x07
    17c8:	98 85       	ldd	r25, Y+8	; 0x08
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	61 f1       	breq	.+88     	; 0x1828 <M_DIO_Void_SetPinValue+0xbe>
    17d0:	2f 81       	ldd	r18, Y+7	; 0x07
    17d2:	38 85       	ldd	r19, Y+8	; 0x08
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	31 05       	cpc	r19, r1
    17d8:	34 f4       	brge	.+12     	; 0x17e6 <M_DIO_Void_SetPinValue+0x7c>
    17da:	8f 81       	ldd	r24, Y+7	; 0x07
    17dc:	98 85       	ldd	r25, Y+8	; 0x08
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	69 f0       	breq	.+26     	; 0x17fe <M_DIO_Void_SetPinValue+0x94>
    17e4:	cf c0       	rjmp	.+414    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
    17e6:	2f 81       	ldd	r18, Y+7	; 0x07
    17e8:	38 85       	ldd	r19, Y+8	; 0x08
    17ea:	23 30       	cpi	r18, 0x03	; 3
    17ec:	31 05       	cpc	r19, r1
    17ee:	89 f1       	breq	.+98     	; 0x1852 <M_DIO_Void_SetPinValue+0xe8>
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	98 85       	ldd	r25, Y+8	; 0x08
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	91 05       	cpc	r25, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <M_DIO_Void_SetPinValue+0x92>
    17fa:	40 c0       	rjmp	.+128    	; 0x187c <M_DIO_Void_SetPinValue+0x112>
    17fc:	c3 c0       	rjmp	.+390    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    17fe:	ab e3       	ldi	r26, 0x3B	; 59
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <M_DIO_Void_SetPinValue+0xb2>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <M_DIO_Void_SetPinValue+0xae>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	ae c0       	rjmp	.+348    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1828:	a8 e3       	ldi	r26, 0x38	; 56
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e8 e3       	ldi	r30, 0x38	; 56
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <M_DIO_Void_SetPinValue+0xdc>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <M_DIO_Void_SetPinValue+0xd8>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	99 c0       	rjmp	.+306    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1852:	a5 e3       	ldi	r26, 0x35	; 53
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <M_DIO_Void_SetPinValue+0x106>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <M_DIO_Void_SetPinValue+0x102>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	84 c0       	rjmp	.+264    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    187c:	a2 e3       	ldi	r26, 0x32	; 50
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <M_DIO_Void_SetPinValue+0x130>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <M_DIO_Void_SetPinValue+0x12c>
    189e:	80 95       	com	r24
    18a0:	84 23       	and	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	6f c0       	rjmp	.+222    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
		}
		break;
		case HIGH:
			switch(Local_U8_Port)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3e 83       	std	Y+6, r19	; 0x06
    18ae:	2d 83       	std	Y+5, r18	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	91 05       	cpc	r25, r1
    18b8:	51 f1       	breq	.+84     	; 0x190e <M_DIO_Void_SetPinValue+0x1a4>
    18ba:	2d 81       	ldd	r18, Y+5	; 0x05
    18bc:	3e 81       	ldd	r19, Y+6	; 0x06
    18be:	23 30       	cpi	r18, 0x03	; 3
    18c0:	31 05       	cpc	r19, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <M_DIO_Void_SetPinValue+0x166>
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <M_DIO_Void_SetPinValue+0x17c>
    18ce:	5a c0       	rjmp	.+180    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	23 30       	cpi	r18, 0x03	; 3
    18d6:	31 05       	cpc	r19, r1
    18d8:	71 f1       	breq	.+92     	; 0x1936 <M_DIO_Void_SetPinValue+0x1cc>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	91 05       	cpc	r25, r1
    18e2:	e9 f1       	breq	.+122    	; 0x195e <M_DIO_Void_SetPinValue+0x1f4>
    18e4:	4f c0       	rjmp	.+158    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <M_DIO_Void_SetPinValue+0x19a>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <M_DIO_Void_SetPinValue+0x196>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	3b c0       	rjmp	.+118    	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    190e:	a8 e3       	ldi	r26, 0x38	; 56
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e3       	ldi	r30, 0x38	; 56
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <M_DIO_Void_SetPinValue+0x1c2>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <M_DIO_Void_SetPinValue+0x1be>
    1930:	84 2b       	or	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	27 c0       	rjmp	.+78     	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1936:	a5 e3       	ldi	r26, 0x35	; 53
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e3       	ldi	r30, 0x35	; 53
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <M_DIO_Void_SetPinValue+0x1ea>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <M_DIO_Void_SetPinValue+0x1e6>
    1958:	84 2b       	or	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	13 c0       	rjmp	.+38     	; 0x1984 <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    195e:	a2 e3       	ldi	r26, 0x32	; 50
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <M_DIO_Void_SetPinValue+0x212>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <M_DIO_Void_SetPinValue+0x20e>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
			}
			break;
	}
}
    1984:	2a 96       	adiw	r28, 0x0a	; 10
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <M_DIO_U8_GetPinValue>:

u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <M_DIO_U8_GetPinValue+0x6>
    199c:	00 d0       	rcall	.+0      	; 0x199e <M_DIO_U8_GetPinValue+0x8>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <M_DIO_U8_GetPinValue+0xa>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_State = HIGH ;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9a e0       	ldi	r25, 0x0A	; 10
    19ae:	69 2f       	mov	r22, r25
    19b0:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    19b4:	89 2f       	mov	r24, r25
    19b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9a e0       	ldi	r25, 0x0A	; 10
    19bc:	69 2f       	mov	r22, r25
    19be:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    19c2:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_U8_Port)
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	3e 83       	std	Y+6, r19	; 0x06
    19cc:	2d 83       	std	Y+5, r18	; 0x05
    19ce:	4d 81       	ldd	r20, Y+5	; 0x05
    19d0:	5e 81       	ldd	r21, Y+6	; 0x06
    19d2:	42 30       	cpi	r20, 0x02	; 2
    19d4:	51 05       	cpc	r21, r1
    19d6:	41 f1       	breq	.+80     	; 0x1a28 <M_DIO_U8_GetPinValue+0x92>
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	91 05       	cpc	r25, r1
    19e0:	34 f4       	brge	.+12     	; 0x19ee <M_DIO_U8_GetPinValue+0x58>
    19e2:	2d 81       	ldd	r18, Y+5	; 0x05
    19e4:	3e 81       	ldd	r19, Y+6	; 0x06
    19e6:	21 30       	cpi	r18, 0x01	; 1
    19e8:	31 05       	cpc	r19, r1
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <M_DIO_U8_GetPinValue+0x6e>
    19ec:	52 c0       	rjmp	.+164    	; 0x1a92 <M_DIO_U8_GetPinValue+0xfc>
    19ee:	4d 81       	ldd	r20, Y+5	; 0x05
    19f0:	5e 81       	ldd	r21, Y+6	; 0x06
    19f2:	43 30       	cpi	r20, 0x03	; 3
    19f4:	51 05       	cpc	r21, r1
    19f6:	51 f1       	breq	.+84     	; 0x1a4c <M_DIO_U8_GetPinValue+0xb6>
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	91 05       	cpc	r25, r1
    1a00:	b9 f1       	breq	.+110    	; 0x1a70 <M_DIO_U8_GetPinValue+0xda>
    1a02:	47 c0       	rjmp	.+142    	; 0x1a92 <M_DIO_U8_GetPinValue+0xfc>
	{
		case 1: Local_U8_State = GET_BIT(PINA_REG,Local_U8_Pin); break;
    1a04:	e9 e3       	ldi	r30, 0x39	; 57
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <M_DIO_U8_GetPinValue+0x86>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <M_DIO_U8_GetPinValue+0x82>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	8b 83       	std	Y+3, r24	; 0x03
    1a26:	35 c0       	rjmp	.+106    	; 0x1a92 <M_DIO_U8_GetPinValue+0xfc>
		case 2: Local_U8_State = GET_BIT(PINB_REG,Local_U8_Pin); break;
    1a28:	e6 e3       	ldi	r30, 0x36	; 54
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <M_DIO_U8_GetPinValue+0xaa>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <M_DIO_U8_GetPinValue+0xa6>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	23 c0       	rjmp	.+70     	; 0x1a92 <M_DIO_U8_GetPinValue+0xfc>
		case 3: Local_U8_State = GET_BIT(PINC_REG,Local_U8_Pin); break;
    1a4c:	e3 e3       	ldi	r30, 0x33	; 51
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <M_DIO_U8_GetPinValue+0xce>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <M_DIO_U8_GetPinValue+0xca>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <M_DIO_U8_GetPinValue+0xfc>
		case 4: Local_U8_State = GET_BIT(PIND_REG,Local_U8_Pin); break;
    1a70:	e0 e3       	ldi	r30, 0x30	; 48
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a9 01       	movw	r20, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <M_DIO_U8_GetPinValue+0xf2>
    1a84:	55 95       	asr	r21
    1a86:	47 95       	ror	r20
    1a88:	8a 95       	dec	r24
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <M_DIO_U8_GetPinValue+0xee>
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	81 70       	andi	r24, 0x01	; 1
    1a90:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_U8_State ;
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a94:	26 96       	adiw	r28, 0x06	; 6
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <M_DIO_Void_TogPin>:

void M_DIO_Void_TogPin (u8 Copy_U8_Num)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <M_DIO_Void_TogPin+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <M_DIO_Void_TogPin+0x8>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9a e0       	ldi	r25, 0x0A	; 10
    1aba:	69 2f       	mov	r22, r25
    1abc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    1ac0:	89 2f       	mov	r24, r25
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num / 10;
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9a e0       	ldi	r25, 0x0A	; 10
    1ac8:	69 2f       	mov	r22, r25
    1aca:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    1ace:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_U8_Port)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3d 83       	std	Y+5, r19	; 0x05
    1ad8:	2c 83       	std	Y+4, r18	; 0x04
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <M_DIO_Void_TogPin+0x92>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	23 30       	cpi	r18, 0x03	; 3
    1aea:	31 05       	cpc	r19, r1
    1aec:	34 f4       	brge	.+12     	; 0x1afa <M_DIO_Void_TogPin+0x54>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	91 05       	cpc	r25, r1
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <M_DIO_Void_TogPin+0x6a>
    1af8:	5a c0       	rjmp	.+180    	; 0x1bae <M_DIO_Void_TogPin+0x108>
    1afa:	2c 81       	ldd	r18, Y+4	; 0x04
    1afc:	3d 81       	ldd	r19, Y+5	; 0x05
    1afe:	23 30       	cpi	r18, 0x03	; 3
    1b00:	31 05       	cpc	r19, r1
    1b02:	71 f1       	breq	.+92     	; 0x1b60 <M_DIO_Void_TogPin+0xba>
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	e9 f1       	breq	.+122    	; 0x1b88 <M_DIO_Void_TogPin+0xe2>
    1b0e:	4f c0       	rjmp	.+158    	; 0x1bae <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PINA_REG,Local_U8_Pin); break;
    1b10:	a9 e3       	ldi	r26, 0x39	; 57
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e9 e3       	ldi	r30, 0x39	; 57
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <M_DIO_Void_TogPin+0x88>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <M_DIO_Void_TogPin+0x84>
    1b32:	84 27       	eor	r24, r20
    1b34:	8c 93       	st	X, r24
    1b36:	3b c0       	rjmp	.+118    	; 0x1bae <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PINB_REG,Local_U8_Pin); break;
    1b38:	a6 e3       	ldi	r26, 0x36	; 54
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e6 e3       	ldi	r30, 0x36	; 54
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <M_DIO_Void_TogPin+0xb0>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <M_DIO_Void_TogPin+0xac>
    1b5a:	84 27       	eor	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	27 c0       	rjmp	.+78     	; 0x1bae <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PINC_REG,Local_U8_Pin); break;
    1b60:	a3 e3       	ldi	r26, 0x33	; 51
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e3 e3       	ldi	r30, 0x33	; 51
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <M_DIO_Void_TogPin+0xd8>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <M_DIO_Void_TogPin+0xd4>
    1b82:	84 27       	eor	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PIND_REG,Local_U8_Pin); break;
    1b88:	a0 e3       	ldi	r26, 0x30	; 48
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e0 e3       	ldi	r30, 0x30	; 48
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <M_DIO_Void_TogPin+0x100>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <M_DIO_Void_TogPin+0xfc>
    1baa:	84 27       	eor	r24, r20
    1bac:	8c 93       	st	X, r24
	}
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1bc6:	a7 e2       	ldi	r26, 0x27	; 39
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e7 e2       	ldi	r30, 0x27	; 39
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1bd4:	a7 e2       	ldi	r26, 0x27	; 39
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e7 e2       	ldi	r30, 0x27	; 39
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	8f 77       	andi	r24, 0x7F	; 127
    1be0:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1be2:	a7 e2       	ldi	r26, 0x27	; 39
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 e2       	ldi	r30, 0x27	; 39
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 7d       	andi	r24, 0xDF	; 223
    1bee:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#elif ADC_PRESCALER_DV   ==   64
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
    1bf0:	a6 e2       	ldi	r26, 0x26	; 38
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e6 e2       	ldi	r30, 0x26	; 38
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8e 7f       	andi	r24, 0xFE	; 254
    1bfc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1bfe:	a6 e2       	ldi	r26, 0x26	; 38
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e6 e2       	ldi	r30, 0x26	; 38
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	82 60       	ori	r24, 0x02	; 2
    1c0a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1c0c:	a6 e2       	ldi	r26, 0x26	; 38
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e6 e2       	ldi	r30, 0x26	; 38
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	84 60       	ori	r24, 0x04	; 4
    1c18:	8c 93       	st	X, r24
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1c1a:	a6 e2       	ldi	r26, 0x26	; 38
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e6 e2       	ldi	r30, 0x26	; 38
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 62       	ori	r24, 0x20	; 32
    1c26:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1c28:	a6 e2       	ldi	r26, 0x26	; 38
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e6 e2       	ldi	r30, 0x26	; 38
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	80 68       	ori	r24, 0x80	; 128
    1c34:	8c 93       	st	X, r24
}
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <M_ADC_U16_ADCRead+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <M_ADC_U16_ADCRead+0x8>
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	1a 82       	std	Y+2, r1	; 0x02
    1c50:	1b 82       	std	Y+3, r1	; 0x03
    1c52:	1c 82       	std	Y+4, r1	; 0x04

	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1c54:	a6 e2       	ldi	r26, 0x26	; 38
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e2       	ldi	r30, 0x26	; 38
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 64       	ori	r24, 0x40	; 64
    1c60:	8c 93       	st	X, r24

	ADMUX_REG = ADMUX_REG & 0b11100000;
    1c62:	a7 e2       	ldi	r26, 0x27	; 39
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e7 e2       	ldi	r30, 0x27	; 39
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 7e       	andi	r24, 0xE0	; 224
    1c6e:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
    1c70:	a7 e2       	ldi	r26, 0x27	; 39
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e7 e2       	ldi	r30, 0x27	; 39
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	90 81       	ld	r25, Z
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	89 2b       	or	r24, r25
    1c7e:	8c 93       	st	X, r24
    1c80:	16 c0       	rjmp	.+44     	; 0x1cae <M_ADC_U16_ADCRead+0x72>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	ab 81       	ldd	r26, Y+3	; 0x03
    1c88:	bc 81       	ldd	r27, Y+4	; 0x04
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	a1 1d       	adc	r26, r1
    1c8e:	b1 1d       	adc	r27, r1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	ab 83       	std	Y+3, r26	; 0x03
    1c96:	bc 83       	std	Y+4, r27	; 0x04
		if((GET_BIT(ADCSRA_REG,ADIF_BIT)) == ADC_CONVERSION_COMPLETE)
    1c98:	e6 e2       	ldi	r30, 0x26	; 38
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	82 95       	swap	r24
    1ca0:	8f 70       	andi	r24, 0x0F	; 15
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	90 70       	andi	r25, 0x00	; 0
    1caa:	88 23       	and	r24, r24
    1cac:	61 f4       	brne	.+24     	; 0x1cc6 <M_ADC_U16_ADCRead+0x8a>
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb6:	80 38       	cpi	r24, 0x80	; 128
    1cb8:	24 e8       	ldi	r18, 0x84	; 132
    1cba:	92 07       	cpc	r25, r18
    1cbc:	2e e1       	ldi	r18, 0x1E	; 30
    1cbe:	a2 07       	cpc	r26, r18
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	b2 07       	cpc	r27, r18
    1cc4:	f0 f2       	brcs	.-68     	; 0x1c82 <M_ADC_U16_ADCRead+0x46>
		if((GET_BIT(ADCSRA_REG,ADIF_BIT)) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
    1cc6:	e4 e2       	ldi	r30, 0x24	; 36
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <H_PushButton_Void_PushButtonInit>:
#include <util/delay.h>
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <H_PushButton_Void_PushButtonInit+0x6>
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3b 83       	std	Y+3, r19	; 0x03
    1cf4:	2a 83       	std	Y+2, r18	; 0x02
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	f1 f0       	breq	.+60     	; 0x1d3c <H_PushButton_Void_PushButtonInit+0x5e>
    1d00:	2a 81       	ldd	r18, Y+2	; 0x02
    1d02:	3b 81       	ldd	r19, Y+3	; 0x03
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <H_PushButton_Void_PushButtonInit+0x36>
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <H_PushButton_Void_PushButtonInit+0x4c>
    1d12:	2e c0       	rjmp	.+92     	; 0x1d70 <H_PushButton_Void_PushButtonInit+0x92>
    1d14:	2a 81       	ldd	r18, Y+2	; 0x02
    1d16:	3b 81       	ldd	r19, Y+3	; 0x03
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	c1 f0       	breq	.+48     	; 0x1d4e <H_PushButton_Void_PushButtonInit+0x70>
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	e1 f0       	breq	.+56     	; 0x1d60 <H_PushButton_Void_PushButtonInit+0x82>
    1d28:	23 c0       	rjmp	.+70     	; 0x1d70 <H_PushButton_Void_PushButtonInit+0x92>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT);
    1d2a:	8f e2       	ldi	r24, 0x2F	; 47
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_0_PIN , HIGH) ;
    1d32:	8f e2       	ldi	r24, 0x2F	; 47
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    1d3a:	1a c0       	rjmp	.+52     	; 0x1d70 <H_PushButton_Void_PushButtonInit+0x92>
	                    break;
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT);
    1d3c:	8e e2       	ldi	r24, 0x2E	; 46
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_1_PIN , HIGH) ;
    1d44:	8e e2       	ldi	r24, 0x2E	; 46
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    1d4c:	11 c0       	rjmp	.+34     	; 0x1d70 <H_PushButton_Void_PushButtonInit+0x92>
		                    break;
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT);
    1d4e:	8d e2       	ldi	r24, 0x2D	; 45
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_2_PIN , HIGH) ;
    1d56:	8d e2       	ldi	r24, 0x2D	; 45
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    1d5e:	08 c0       	rjmp	.+16     	; 0x1d70 <H_PushButton_Void_PushButtonInit+0x92>
		                    break;
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT);
    1d60:	8b e2       	ldi	r24, 0x2B	; 43
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	                    M_DIO_Void_SetPinValue    (PUSH_BUTTON_3_PIN , HIGH) ;
    1d68:	8b e2       	ldi	r24, 0x2B	; 43
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
		                    break;
	default:                break;
	}
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	ec 97       	sbiw	r28, 0x3c	; 60
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    1d96:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3c af       	std	Y+60, r19	; 0x3c
    1d9e:	2b af       	std	Y+59, r18	; 0x3b
    1da0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1da2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <H_PushButton_U8_PushButtonRead+0x30>
    1daa:	97 c0       	rjmp	.+302    	; 0x1eda <H_PushButton_U8_PushButtonRead+0x15e>
    1dac:	2b ad       	ldd	r18, Y+59	; 0x3b
    1dae:	3c ad       	ldd	r19, Y+60	; 0x3c
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <H_PushButton_U8_PushButtonRead+0x44>
    1db6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1db8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	71 f0       	breq	.+28     	; 0x1dda <H_PushButton_U8_PushButtonRead+0x5e>
    1dbe:	0b c2       	rjmp	.+1046   	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
    1dc0:	2b ad       	ldd	r18, Y+59	; 0x3b
    1dc2:	3c ad       	ldd	r19, Y+60	; 0x3c
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <H_PushButton_U8_PushButtonRead+0x50>
    1dca:	07 c1       	rjmp	.+526    	; 0x1fda <H_PushButton_U8_PushButtonRead+0x25e>
    1dcc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dce:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <H_PushButton_U8_PushButtonRead+0x5c>
    1dd6:	81 c1       	rjmp	.+770    	; 0x20da <H_PushButton_U8_PushButtonRead+0x35e>
    1dd8:	fe c1       	rjmp	.+1020   	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1dda:	8f e2       	ldi	r24, 0x2F	; 47
    1ddc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    1de0:	88 23       	and	r24, r24
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <H_PushButton_U8_PushButtonRead+0x6a>
    1de4:	f8 c1       	rjmp	.+1008   	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 ea       	ldi	r26, 0xA0	; 160
    1dec:	b1 e4       	ldi	r27, 0x41	; 65
    1dee:	8d ab       	std	Y+53, r24	; 0x35
    1df0:	9e ab       	std	Y+54, r25	; 0x36
    1df2:	af ab       	std	Y+55, r26	; 0x37
    1df4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6d a9       	ldd	r22, Y+53	; 0x35
    1df8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dfc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	55 e4       	ldi	r21, 0x45	; 69
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	89 ab       	std	Y+49, r24	; 0x31
    1e10:	9a ab       	std	Y+50, r25	; 0x32
    1e12:	ab ab       	std	Y+51, r26	; 0x33
    1e14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e16:	69 a9       	ldd	r22, Y+49	; 0x31
    1e18:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 ab       	std	Y+48, r25	; 0x30
    1e34:	8f a7       	std	Y+47, r24	; 0x2f
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    1e38:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6d a9       	ldd	r22, Y+53	; 0x35
    1e52:	7e a9       	ldd	r23, Y+54	; 0x36
    1e54:	8f a9       	ldd	r24, Y+55	; 0x37
    1e56:	98 ad       	ldd	r25, Y+56	; 0x38
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <H_PushButton_U8_PushButtonRead+0x11c>
    1e7a:	80 e9       	ldi	r24, 0x90	; 144
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <H_PushButton_U8_PushButtonRead+0x10a>
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e90:	98 a9       	ldd	r25, Y+48	; 0x30
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	98 ab       	std	Y+48, r25	; 0x30
    1e96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <H_PushButton_U8_PushButtonRead+0xfe>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
    1ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <H_PushButton_U8_PushButtonRead+0x146>
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    1eca:	8f e2       	ldi	r24, 0x2F	; 47
    1ecc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <H_PushButton_U8_PushButtonRead+0x15a>
    1ed4:	80 c1       	rjmp	.+768    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1ed6:	19 ae       	std	Y+57, r1	; 0x39
    1ed8:	7e c1       	rjmp	.+764    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1eda:	8e e2       	ldi	r24, 0x2E	; 46
    1edc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <H_PushButton_U8_PushButtonRead+0x16a>
    1ee4:	78 c1       	rjmp	.+752    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 ea       	ldi	r26, 0xA0	; 160
    1eec:	b1 e4       	ldi	r27, 0x41	; 65
    1eee:	8f a3       	std	Y+39, r24	; 0x27
    1ef0:	98 a7       	std	Y+40, r25	; 0x28
    1ef2:	a9 a7       	std	Y+41, r26	; 0x29
    1ef4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef8:	78 a5       	ldd	r23, Y+40	; 0x28
    1efa:	89 a5       	ldd	r24, Y+41	; 0x29
    1efc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	55 e4       	ldi	r21, 0x45	; 69
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8b a3       	std	Y+35, r24	; 0x23
    1f10:	9c a3       	std	Y+36, r25	; 0x24
    1f12:	ad a3       	std	Y+37, r26	; 0x25
    1f14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f16:	6b a1       	ldd	r22, Y+35	; 0x23
    1f18:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    1f38:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6f a1       	ldd	r22, Y+39	; 0x27
    1f52:	78 a5       	ldd	r23, Y+40	; 0x28
    1f54:	89 a5       	ldd	r24, Y+41	; 0x29
    1f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <H_PushButton_U8_PushButtonRead+0x21c>
    1f7a:	80 e9       	ldi	r24, 0x90	; 144
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	98 a3       	std	Y+32, r25	; 0x20
    1f80:	8f 8f       	std	Y+31, r24	; 0x1f
    1f82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f84:	98 a1       	ldd	r25, Y+32	; 0x20
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <H_PushButton_U8_PushButtonRead+0x20a>
    1f8a:	98 a3       	std	Y+32, r25	; 0x20
    1f8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <H_PushButton_U8_PushButtonRead+0x1fe>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9a a3       	std	Y+34, r25	; 0x22
    1fb4:	89 a3       	std	Y+33, r24	; 0x21
    1fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fba:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <H_PushButton_U8_PushButtonRead+0x246>
    1fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc8:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1fca:	8e e2       	ldi	r24, 0x2E	; 46
    1fcc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <H_PushButton_U8_PushButtonRead+0x25a>
    1fd4:	00 c1       	rjmp	.+512    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1fd6:	19 ae       	std	Y+57, r1	; 0x39
    1fd8:	fe c0       	rjmp	.+508    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1fda:	8d e2       	ldi	r24, 0x2D	; 45
    1fdc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <H_PushButton_U8_PushButtonRead+0x26a>
    1fe4:	f8 c0       	rjmp	.+496    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 ea       	ldi	r26, 0xA0	; 160
    1fec:	b1 e4       	ldi	r27, 0x41	; 65
    1fee:	89 8f       	std	Y+25, r24	; 0x19
    1ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	55 e4       	ldi	r21, 0x45	; 69
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8d 8b       	std	Y+21, r24	; 0x15
    2010:	9e 8b       	std	Y+22, r25	; 0x16
    2012:	af 8b       	std	Y+23, r26	; 0x17
    2014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2016:	6d 89       	ldd	r22, Y+21	; 0x15
    2018:	7e 89       	ldd	r23, Y+22	; 0x16
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	2c f4       	brge	.+10     	; 0x2038 <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	3f ef       	ldi	r19, 0xFF	; 255
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204c:	18 16       	cp	r1, r24
    204e:	4c f5       	brge	.+82     	; 0x20a2 <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2050:	69 8d       	ldd	r22, Y+25	; 0x19
    2052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <H_PushButton_U8_PushButtonRead+0x31c>
    207a:	80 e9       	ldi	r24, 0x90	; 144
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	9a 8b       	std	Y+18, r25	; 0x12
    2080:	89 8b       	std	Y+17, r24	; 0x11
    2082:	89 89       	ldd	r24, Y+17	; 0x11
    2084:	9a 89       	ldd	r25, Y+18	; 0x12
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <H_PushButton_U8_PushButtonRead+0x30a>
    208a:	9a 8b       	std	Y+18, r25	; 0x12
    208c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	8b 89       	ldd	r24, Y+19	; 0x13
    2090:	9c 89       	ldd	r25, Y+20	; 0x14
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	9c 8b       	std	Y+20, r25	; 0x14
    2096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	69 f7       	brne	.-38     	; 0x207a <H_PushButton_U8_PushButtonRead+0x2fe>
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	6d 89       	ldd	r22, Y+21	; 0x15
    20a4:	7e 89       	ldd	r23, Y+22	; 0x16
    20a6:	8f 89       	ldd	r24, Y+23	; 0x17
    20a8:	98 8d       	ldd	r25, Y+24	; 0x18
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9c 8b       	std	Y+20, r25	; 0x14
    20b4:	8b 8b       	std	Y+19, r24	; 0x13
    20b6:	8b 89       	ldd	r24, Y+19	; 0x13
    20b8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ba:	98 8b       	std	Y+16, r25	; 0x10
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
    20be:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c0:	98 89       	ldd	r25, Y+16	; 0x10
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <H_PushButton_U8_PushButtonRead+0x346>
    20c6:	98 8b       	std	Y+16, r25	; 0x10
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    20ca:	8d e2       	ldi	r24, 0x2D	; 45
    20cc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    20d0:	88 23       	and	r24, r24
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <H_PushButton_U8_PushButtonRead+0x35a>
    20d4:	80 c0       	rjmp	.+256    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    20d6:	19 ae       	std	Y+57, r1	; 0x39
    20d8:	7e c0       	rjmp	.+252    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    20da:	8b e2       	ldi	r24, 0x2B	; 43
    20dc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    20e0:	88 23       	and	r24, r24
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <H_PushButton_U8_PushButtonRead+0x36a>
    20e4:	78 c0       	rjmp	.+240    	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 ea       	ldi	r26, 0xA0	; 160
    20ec:	b1 e4       	ldi	r27, 0x41	; 65
    20ee:	8b 87       	std	Y+11, r24	; 0x0b
    20f0:	9c 87       	std	Y+12, r25	; 0x0c
    20f2:	ad 87       	std	Y+13, r26	; 0x0d
    20f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a e7       	ldi	r20, 0x7A	; 122
    2104:	55 e4       	ldi	r21, 0x45	; 69
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	8f 83       	std	Y+7, r24	; 0x07
    2110:	98 87       	std	Y+8, r25	; 0x08
    2112:	a9 87       	std	Y+9, r26	; 0x09
    2114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	3f c0       	rjmp	.+126    	; 0x21b6 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    2138:	6f 81       	ldd	r22, Y+7	; 0x07
    213a:	78 85       	ldd	r23, Y+8	; 0x08
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	4c f5       	brge	.+82     	; 0x21a2 <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <H_PushButton_U8_PushButtonRead+0x41c>
    217a:	80 e9       	ldi	r24, 0x90	; 144
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <H_PushButton_U8_PushButtonRead+0x40a>
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f7       	brne	.-38     	; 0x217a <H_PushButton_U8_PushButtonRead+0x3fe>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <H_PushButton_U8_PushButtonRead+0x446>
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    21ca:	8b e2       	ldi	r24, 0x2B	; 43
    21cc:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    21d0:	88 23       	and	r24, r24
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    21d4:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    21d6:	89 ad       	ldd	r24, Y+57	; 0x39
}
    21d8:	ec 96       	adiw	r28, 0x3c	; 60
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <H_LED_Void_LedInit>:
#include <util/delay.h>
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <H_LED_Void_LedInit+0x6>
    21f0:	0f 92       	push	r0
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	3b 83       	std	Y+3, r19	; 0x03
    2200:	2a 83       	std	Y+2, r18	; 0x02
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	91 05       	cpc	r25, r1
    220a:	d9 f0       	breq	.+54     	; 0x2242 <H_LED_Void_LedInit+0x58>
    220c:	2a 81       	ldd	r18, Y+2	; 0x02
    220e:	3b 81       	ldd	r19, Y+3	; 0x03
    2210:	23 30       	cpi	r18, 0x03	; 3
    2212:	31 05       	cpc	r19, r1
    2214:	34 f4       	brge	.+12     	; 0x2222 <H_LED_Void_LedInit+0x38>
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	61 f0       	breq	.+24     	; 0x2238 <H_LED_Void_LedInit+0x4e>
    2220:	1e c0       	rjmp	.+60     	; 0x225e <H_LED_Void_LedInit+0x74>
    2222:	2a 81       	ldd	r18, Y+2	; 0x02
    2224:	3b 81       	ldd	r19, Y+3	; 0x03
    2226:	23 30       	cpi	r18, 0x03	; 3
    2228:	31 05       	cpc	r19, r1
    222a:	81 f0       	breq	.+32     	; 0x224c <H_LED_Void_LedInit+0x62>
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	91 05       	cpc	r25, r1
    2234:	81 f0       	breq	.+32     	; 0x2256 <H_LED_Void_LedInit+0x6c>
    2236:	13 c0       	rjmp	.+38     	; 0x225e <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    2238:	80 e1       	ldi	r24, 0x10	; 16
    223a:	61 e0       	ldi	r22, 0x01	; 1
    223c:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
    2240:	0e c0       	rjmp	.+28     	; 0x225e <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    2242:	8f e0       	ldi	r24, 0x0F	; 15
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
    224a:	09 c0       	rjmp	.+18     	; 0x225e <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    224c:	8e e0       	ldi	r24, 0x0E	; 14
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
    2254:	04 c0       	rjmp	.+8      	; 0x225e <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    2256:	8b e1       	ldi	r24, 0x1B	; 27
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <H_LED_Void_LedOn+0x6>
    2270:	0f 92       	push	r0
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	3b 83       	std	Y+3, r19	; 0x03
    2280:	2a 83       	std	Y+2, r18	; 0x02
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	9b 81       	ldd	r25, Y+3	; 0x03
    2286:	82 30       	cpi	r24, 0x02	; 2
    2288:	91 05       	cpc	r25, r1
    228a:	d9 f0       	breq	.+54     	; 0x22c2 <H_LED_Void_LedOn+0x58>
    228c:	2a 81       	ldd	r18, Y+2	; 0x02
    228e:	3b 81       	ldd	r19, Y+3	; 0x03
    2290:	23 30       	cpi	r18, 0x03	; 3
    2292:	31 05       	cpc	r19, r1
    2294:	34 f4       	brge	.+12     	; 0x22a2 <H_LED_Void_LedOn+0x38>
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	9b 81       	ldd	r25, Y+3	; 0x03
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	61 f0       	breq	.+24     	; 0x22b8 <H_LED_Void_LedOn+0x4e>
    22a0:	1e c0       	rjmp	.+60     	; 0x22de <H_LED_Void_LedOn+0x74>
    22a2:	2a 81       	ldd	r18, Y+2	; 0x02
    22a4:	3b 81       	ldd	r19, Y+3	; 0x03
    22a6:	23 30       	cpi	r18, 0x03	; 3
    22a8:	31 05       	cpc	r19, r1
    22aa:	81 f0       	breq	.+32     	; 0x22cc <H_LED_Void_LedOn+0x62>
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	91 05       	cpc	r25, r1
    22b4:	81 f0       	breq	.+32     	; 0x22d6 <H_LED_Void_LedOn+0x6c>
    22b6:	13 c0       	rjmp	.+38     	; 0x22de <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    22b8:	80 e1       	ldi	r24, 0x10	; 16
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    22c2:	8f e0       	ldi	r24, 0x0F	; 15
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    22cc:	8e e0       	ldi	r24, 0x0E	; 14
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    22d6:	8b e1       	ldi	r24, 0x1B	; 27
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <H_LED_Void_LedOff+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	3b 83       	std	Y+3, r19	; 0x03
    2300:	2a 83       	std	Y+2, r18	; 0x02
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	91 05       	cpc	r25, r1
    230a:	d9 f0       	breq	.+54     	; 0x2342 <H_LED_Void_LedOff+0x58>
    230c:	2a 81       	ldd	r18, Y+2	; 0x02
    230e:	3b 81       	ldd	r19, Y+3	; 0x03
    2310:	23 30       	cpi	r18, 0x03	; 3
    2312:	31 05       	cpc	r19, r1
    2314:	34 f4       	brge	.+12     	; 0x2322 <H_LED_Void_LedOff+0x38>
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	61 f0       	breq	.+24     	; 0x2338 <H_LED_Void_LedOff+0x4e>
    2320:	1e c0       	rjmp	.+60     	; 0x235e <H_LED_Void_LedOff+0x74>
    2322:	2a 81       	ldd	r18, Y+2	; 0x02
    2324:	3b 81       	ldd	r19, Y+3	; 0x03
    2326:	23 30       	cpi	r18, 0x03	; 3
    2328:	31 05       	cpc	r19, r1
    232a:	81 f0       	breq	.+32     	; 0x234c <H_LED_Void_LedOff+0x62>
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	9b 81       	ldd	r25, Y+3	; 0x03
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	91 05       	cpc	r25, r1
    2334:	81 f0       	breq	.+32     	; 0x2356 <H_LED_Void_LedOff+0x6c>
    2336:	13 c0       	rjmp	.+38     	; 0x235e <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    2338:	80 e1       	ldi	r24, 0x10	; 16
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2340:	0e c0       	rjmp	.+28     	; 0x235e <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2342:	8f e0       	ldi	r24, 0x0F	; 15
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    234a:	09 c0       	rjmp	.+18     	; 0x235e <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    234c:	8e e0       	ldi	r24, 0x0E	; 14
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2354:	04 c0       	rjmp	.+8      	; 0x235e <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    2356:	8b e1       	ldi	r24, 0x1B	; 27
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	eb 97       	sbiw	r28, 0x3b	; 59
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2380:	89 ad       	ldd	r24, Y+57	; 0x39
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3b af       	std	Y+59, r19	; 0x3b
    2388:	2a af       	std	Y+58, r18	; 0x3a
    238a:	8a ad       	ldd	r24, Y+58	; 0x3a
    238c:	9b ad       	ldd	r25, Y+59	; 0x3b
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	91 05       	cpc	r25, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <H_LED_Void_LedBlink+0x2c>
    2394:	93 c0       	rjmp	.+294    	; 0x24bc <H_LED_Void_LedBlink+0x152>
    2396:	2a ad       	ldd	r18, Y+58	; 0x3a
    2398:	3b ad       	ldd	r19, Y+59	; 0x3b
    239a:	23 30       	cpi	r18, 0x03	; 3
    239c:	31 05       	cpc	r19, r1
    239e:	34 f4       	brge	.+12     	; 0x23ac <H_LED_Void_LedBlink+0x42>
    23a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    23a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    23a4:	81 30       	cpi	r24, 0x01	; 1
    23a6:	91 05       	cpc	r25, r1
    23a8:	71 f0       	breq	.+28     	; 0x23c6 <H_LED_Void_LedBlink+0x5c>
    23aa:	f8 c1       	rjmp	.+1008   	; 0x279c <H_LED_Void_LedBlink+0x432>
    23ac:	2a ad       	ldd	r18, Y+58	; 0x3a
    23ae:	3b ad       	ldd	r19, Y+59	; 0x3b
    23b0:	23 30       	cpi	r18, 0x03	; 3
    23b2:	31 05       	cpc	r19, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <H_LED_Void_LedBlink+0x4e>
    23b6:	fd c0       	rjmp	.+506    	; 0x25b2 <H_LED_Void_LedBlink+0x248>
    23b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    23ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    23bc:	84 30       	cpi	r24, 0x04	; 4
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <H_LED_Void_LedBlink+0x5a>
    23c2:	72 c1       	rjmp	.+740    	; 0x26a8 <H_LED_Void_LedBlink+0x33e>
    23c4:	eb c1       	rjmp	.+982    	; 0x279c <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    23c6:	80 e1       	ldi	r24, 0x10	; 16
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a6 e9       	ldi	r26, 0x96	; 150
    23d4:	b3 e4       	ldi	r27, 0x43	; 67
    23d6:	8d ab       	std	Y+53, r24	; 0x35
    23d8:	9e ab       	std	Y+54, r25	; 0x36
    23da:	af ab       	std	Y+55, r26	; 0x37
    23dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	6d a9       	ldd	r22, Y+53	; 0x35
    23e0:	7e a9       	ldd	r23, Y+54	; 0x36
    23e2:	8f a9       	ldd	r24, Y+55	; 0x37
    23e4:	98 ad       	ldd	r25, Y+56	; 0x38
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a e7       	ldi	r20, 0x7A	; 122
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	89 ab       	std	Y+49, r24	; 0x31
    23f8:	9a ab       	std	Y+50, r25	; 0x32
    23fa:	ab ab       	std	Y+51, r26	; 0x33
    23fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2400:	7a a9       	ldd	r23, Y+50	; 0x32
    2402:	8b a9       	ldd	r24, Y+51	; 0x33
    2404:	9c a9       	ldd	r25, Y+52	; 0x34
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
    241e:	3f c0       	rjmp	.+126    	; 0x249e <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	7a a9       	ldd	r23, Y+50	; 0x32
    2424:	8b a9       	ldd	r24, Y+51	; 0x33
    2426:	9c a9       	ldd	r25, Y+52	; 0x34
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	6d a9       	ldd	r22, Y+53	; 0x35
    243a:	7e a9       	ldd	r23, Y+54	; 0x36
    243c:	8f a9       	ldd	r24, Y+55	; 0x37
    243e:	98 ad       	ldd	r25, Y+56	; 0x38
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	98 ab       	std	Y+48, r25	; 0x30
    245e:	8f a7       	std	Y+47, r24	; 0x2f
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <H_LED_Void_LedBlink+0x116>
    2462:	80 e9       	ldi	r24, 0x90	; 144
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	9e a7       	std	Y+46, r25	; 0x2e
    2468:	8d a7       	std	Y+45, r24	; 0x2d
    246a:	8d a5       	ldd	r24, Y+45	; 0x2d
    246c:	9e a5       	ldd	r25, Y+46	; 0x2e
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <H_LED_Void_LedBlink+0x104>
    2472:	9e a7       	std	Y+46, r25	; 0x2e
    2474:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8f a5       	ldd	r24, Y+47	; 0x2f
    2478:	98 a9       	ldd	r25, Y+48	; 0x30
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	98 ab       	std	Y+48, r25	; 0x30
    247e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8f a5       	ldd	r24, Y+47	; 0x2f
    2482:	98 a9       	ldd	r25, Y+48	; 0x30
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <H_LED_Void_LedBlink+0xf8>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	69 a9       	ldd	r22, Y+49	; 0x31
    248c:	7a a9       	ldd	r23, Y+50	; 0x32
    248e:	8b a9       	ldd	r24, Y+51	; 0x33
    2490:	9c a9       	ldd	r25, Y+52	; 0x34
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	98 ab       	std	Y+48, r25	; 0x30
    249c:	8f a7       	std	Y+47, r24	; 0x2f
    249e:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a0:	98 a9       	ldd	r25, Y+48	; 0x30
    24a2:	9c a7       	std	Y+44, r25	; 0x2c
    24a4:	8b a7       	std	Y+43, r24	; 0x2b
    24a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <H_LED_Void_LedBlink+0x140>
    24ae:	9c a7       	std	Y+44, r25	; 0x2c
    24b0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    24b2:	80 e1       	ldi	r24, 0x10	; 16
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    24ba:	70 c1       	rjmp	.+736    	; 0x279c <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    24bc:	8f e0       	ldi	r24, 0x0F	; 15
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a6 e9       	ldi	r26, 0x96	; 150
    24ca:	b3 e4       	ldi	r27, 0x43	; 67
    24cc:	8f a3       	std	Y+39, r24	; 0x27
    24ce:	98 a7       	std	Y+40, r25	; 0x28
    24d0:	a9 a7       	std	Y+41, r26	; 0x29
    24d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6f a1       	ldd	r22, Y+39	; 0x27
    24d6:	78 a5       	ldd	r23, Y+40	; 0x28
    24d8:	89 a5       	ldd	r24, Y+41	; 0x29
    24da:	9a a5       	ldd	r25, Y+42	; 0x2a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a e7       	ldi	r20, 0x7A	; 122
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8b a3       	std	Y+35, r24	; 0x23
    24ee:	9c a3       	std	Y+36, r25	; 0x24
    24f0:	ad a3       	std	Y+37, r26	; 0x25
    24f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    2516:	6b a1       	ldd	r22, Y+35	; 0x23
    2518:	7c a1       	ldd	r23, Y+36	; 0x24
    251a:	8d a1       	ldd	r24, Y+37	; 0x25
    251c:	9e a1       	ldd	r25, Y+38	; 0x26
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6f a1       	ldd	r22, Y+39	; 0x27
    2530:	78 a5       	ldd	r23, Y+40	; 0x28
    2532:	89 a5       	ldd	r24, Y+41	; 0x29
    2534:	9a a5       	ldd	r25, Y+42	; 0x2a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9a a3       	std	Y+34, r25	; 0x22
    2554:	89 a3       	std	Y+33, r24	; 0x21
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <H_LED_Void_LedBlink+0x20c>
    2558:	80 e9       	ldi	r24, 0x90	; 144
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	98 a3       	std	Y+32, r25	; 0x20
    255e:	8f 8f       	std	Y+31, r24	; 0x1f
    2560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2562:	98 a1       	ldd	r25, Y+32	; 0x20
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <H_LED_Void_LedBlink+0x1fa>
    2568:	98 a3       	std	Y+32, r25	; 0x20
    256a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	89 a1       	ldd	r24, Y+33	; 0x21
    256e:	9a a1       	ldd	r25, Y+34	; 0x22
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <H_LED_Void_LedBlink+0x1ee>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9a a3       	std	Y+34, r25	; 0x22
    2592:	89 a3       	std	Y+33, r24	; 0x21
    2594:	89 a1       	ldd	r24, Y+33	; 0x21
    2596:	9a a1       	ldd	r25, Y+34	; 0x22
    2598:	9e 8f       	std	Y+30, r25	; 0x1e
    259a:	8d 8f       	std	Y+29, r24	; 0x1d
    259c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <H_LED_Void_LedBlink+0x236>
    25a4:	9e 8f       	std	Y+30, r25	; 0x1e
    25a6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    25a8:	8f e0       	ldi	r24, 0x0F	; 15
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    25b0:	f5 c0       	rjmp	.+490    	; 0x279c <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    25b2:	8e e0       	ldi	r24, 0x0E	; 14
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a6 e9       	ldi	r26, 0x96	; 150
    25c0:	b3 e4       	ldi	r27, 0x43	; 67
    25c2:	89 8f       	std	Y+25, r24	; 0x19
    25c4:	9a 8f       	std	Y+26, r25	; 0x1a
    25c6:	ab 8f       	std	Y+27, r26	; 0x1b
    25c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	69 8d       	ldd	r22, Y+25	; 0x19
    25cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a e7       	ldi	r20, 0x7A	; 122
    25d8:	55 e4       	ldi	r21, 0x45	; 69
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8d 8b       	std	Y+21, r24	; 0x15
    25e4:	9e 8b       	std	Y+22, r25	; 0x16
    25e6:	af 8b       	std	Y+23, r26	; 0x17
    25e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ea:	6d 89       	ldd	r22, Y+21	; 0x15
    25ec:	7e 89       	ldd	r23, Y+22	; 0x16
    25ee:	8f 89       	ldd	r24, Y+23	; 0x17
    25f0:	98 8d       	ldd	r25, Y+24	; 0x18
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
    260a:	3f c0       	rjmp	.+126    	; 0x268a <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    260c:	6d 89       	ldd	r22, Y+21	; 0x15
    260e:	7e 89       	ldd	r23, Y+22	; 0x16
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	98 8d       	ldd	r25, Y+24	; 0x18
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	69 8d       	ldd	r22, Y+25	; 0x19
    2626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9c 8b       	std	Y+20, r25	; 0x14
    264a:	8b 8b       	std	Y+19, r24	; 0x13
    264c:	0f c0       	rjmp	.+30     	; 0x266c <H_LED_Void_LedBlink+0x302>
    264e:	80 e9       	ldi	r24, 0x90	; 144
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	9a 8b       	std	Y+18, r25	; 0x12
    2654:	89 8b       	std	Y+17, r24	; 0x11
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	9a 89       	ldd	r25, Y+18	; 0x12
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <H_LED_Void_LedBlink+0x2f0>
    265e:	9a 8b       	std	Y+18, r25	; 0x12
    2660:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8b 89       	ldd	r24, Y+19	; 0x13
    2664:	9c 89       	ldd	r25, Y+20	; 0x14
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <H_LED_Void_LedBlink+0x2e4>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6d 89       	ldd	r22, Y+21	; 0x15
    2678:	7e 89       	ldd	r23, Y+22	; 0x16
    267a:	8f 89       	ldd	r24, Y+23	; 0x17
    267c:	98 8d       	ldd	r25, Y+24	; 0x18
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	8b 89       	ldd	r24, Y+19	; 0x13
    268c:	9c 89       	ldd	r25, Y+20	; 0x14
    268e:	98 8b       	std	Y+16, r25	; 0x10
    2690:	8f 87       	std	Y+15, r24	; 0x0f
    2692:	8f 85       	ldd	r24, Y+15	; 0x0f
    2694:	98 89       	ldd	r25, Y+16	; 0x10
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <H_LED_Void_LedBlink+0x32c>
    269a:	98 8b       	std	Y+16, r25	; 0x10
    269c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    269e:	8e e0       	ldi	r24, 0x0E	; 14
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    26a6:	7a c0       	rjmp	.+244    	; 0x279c <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    26a8:	8b e1       	ldi	r24, 0x1B	; 27
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a6 e9       	ldi	r26, 0x96	; 150
    26b6:	b3 e4       	ldi	r27, 0x43	; 67
    26b8:	8b 87       	std	Y+11, r24	; 0x0b
    26ba:	9c 87       	std	Y+12, r25	; 0x0c
    26bc:	ad 87       	std	Y+13, r26	; 0x0d
    26be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a e7       	ldi	r20, 0x7A	; 122
    26ce:	55 e4       	ldi	r21, 0x45	; 69
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	a9 87       	std	Y+9, r26	; 0x09
    26de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <H_LED_Void_LedBlink+0x3f8>
    2744:	80 e9       	ldi	r24, 0x90	; 144
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <H_LED_Void_LedBlink+0x3e6>
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <H_LED_Void_LedBlink+0x3da>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <H_LED_Void_LedBlink+0x422>
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2794:	8b e1       	ldi	r24, 0x1B	; 27
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    279c:	eb 96       	adiw	r28, 0x3b	; 59
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <H_LED_Void_LedTog+0x6>
    27b4:	0f 92       	push	r0
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	3b 83       	std	Y+3, r19	; 0x03
    27c4:	2a 83       	std	Y+2, r18	; 0x02
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	82 30       	cpi	r24, 0x02	; 2
    27cc:	91 05       	cpc	r25, r1
    27ce:	d1 f0       	breq	.+52     	; 0x2804 <H_LED_Void_LedTog+0x56>
    27d0:	2a 81       	ldd	r18, Y+2	; 0x02
    27d2:	3b 81       	ldd	r19, Y+3	; 0x03
    27d4:	23 30       	cpi	r18, 0x03	; 3
    27d6:	31 05       	cpc	r19, r1
    27d8:	34 f4       	brge	.+12     	; 0x27e6 <H_LED_Void_LedTog+0x38>
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	9b 81       	ldd	r25, Y+3	; 0x03
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	91 05       	cpc	r25, r1
    27e2:	61 f0       	breq	.+24     	; 0x27fc <H_LED_Void_LedTog+0x4e>
    27e4:	1a c0       	rjmp	.+52     	; 0x281a <H_LED_Void_LedTog+0x6c>
    27e6:	2a 81       	ldd	r18, Y+2	; 0x02
    27e8:	3b 81       	ldd	r19, Y+3	; 0x03
    27ea:	23 30       	cpi	r18, 0x03	; 3
    27ec:	31 05       	cpc	r19, r1
    27ee:	71 f0       	breq	.+28     	; 0x280c <H_LED_Void_LedTog+0x5e>
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	84 30       	cpi	r24, 0x04	; 4
    27f6:	91 05       	cpc	r25, r1
    27f8:	69 f0       	breq	.+26     	; 0x2814 <H_LED_Void_LedTog+0x66>
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    27fc:	80 e1       	ldi	r24, 0x10	; 16
    27fe:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <M_DIO_Void_TogPin>
    2802:	0b c0       	rjmp	.+22     	; 0x281a <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2804:	8f e0       	ldi	r24, 0x0F	; 15
    2806:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <M_DIO_Void_TogPin>
    280a:	07 c0       	rjmp	.+14     	; 0x281a <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    280c:	8e e0       	ldi	r24, 0x0E	; 14
    280e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <M_DIO_Void_TogPin>
    2812:	03 c0       	rjmp	.+6      	; 0x281a <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2814:	8b e1       	ldi	r24, 0x1B	; 27
    2816:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    282e:	84 e1       	ldi	r24, 0x14	; 20
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    2836:	85 e1       	ldi	r24, 0x15	; 21
    2838:	61 e0       	ldi	r22, 0x01	; 1
    283a:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    283e:	86 e1       	ldi	r24, 0x16	; 22
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    2846:	88 e1       	ldi	r24, 0x18	; 24
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    284e:	8d e0       	ldi	r24, 0x0D	; 13
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    2856:	8c e0       	ldi	r24, 0x0C	; 12
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    285e:	83 e3       	ldi	r24, 0x33	; 51
    2860:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    2864:	82 e3       	ldi	r24, 0x32	; 50
    2866:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    286a:	88 e2       	ldi	r24, 0x28	; 40
    286c:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    2870:	8c e0       	ldi	r24, 0x0C	; 12
    2872:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>


#endif
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	e9 97       	sbiw	r28, 0x39	; 57
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    289e:	8d e0       	ldi	r24, 0x0D	; 13
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    28a6:	89 ad       	ldd	r24, Y+57	; 0x39
    28a8:	82 95       	swap	r24
    28aa:	8f 70       	andi	r24, 0x0F	; 15
    28ac:	98 2f       	mov	r25, r24
    28ae:	91 70       	andi	r25, 0x01	; 1
    28b0:	84 e1       	ldi	r24, 0x14	; 20
    28b2:	69 2f       	mov	r22, r25
    28b4:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    28b8:	89 ad       	ldd	r24, Y+57	; 0x39
    28ba:	82 95       	swap	r24
    28bc:	86 95       	lsr	r24
    28be:	87 70       	andi	r24, 0x07	; 7
    28c0:	98 2f       	mov	r25, r24
    28c2:	91 70       	andi	r25, 0x01	; 1
    28c4:	85 e1       	ldi	r24, 0x15	; 21
    28c6:	69 2f       	mov	r22, r25
    28c8:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    28cc:	89 ad       	ldd	r24, Y+57	; 0x39
    28ce:	82 95       	swap	r24
    28d0:	86 95       	lsr	r24
    28d2:	86 95       	lsr	r24
    28d4:	83 70       	andi	r24, 0x03	; 3
    28d6:	98 2f       	mov	r25, r24
    28d8:	91 70       	andi	r25, 0x01	; 1
    28da:	86 e1       	ldi	r24, 0x16	; 22
    28dc:	69 2f       	mov	r22, r25
    28de:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    28e2:	89 ad       	ldd	r24, Y+57	; 0x39
    28e4:	98 2f       	mov	r25, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	99 27       	eor	r25, r25
    28ea:	99 1f       	adc	r25, r25
    28ec:	88 e1       	ldi	r24, 0x18	; 24
    28ee:	69 2f       	mov	r22, r25
    28f0:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    28f4:	8c e0       	ldi	r24, 0x0C	; 12
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e8       	ldi	r26, 0x80	; 128
    2902:	bf e3       	ldi	r27, 0x3F	; 63
    2904:	8d ab       	std	Y+53, r24	; 0x35
    2906:	9e ab       	std	Y+54, r25	; 0x36
    2908:	af ab       	std	Y+55, r26	; 0x37
    290a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6d a9       	ldd	r22, Y+53	; 0x35
    290e:	7e a9       	ldd	r23, Y+54	; 0x36
    2910:	8f a9       	ldd	r24, Y+55	; 0x37
    2912:	98 ad       	ldd	r25, Y+56	; 0x38
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	55 e4       	ldi	r21, 0x45	; 69
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	89 ab       	std	Y+49, r24	; 0x31
    2926:	9a ab       	std	Y+50, r25	; 0x32
    2928:	ab ab       	std	Y+51, r26	; 0x33
    292a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    292c:	69 a9       	ldd	r22, Y+49	; 0x31
    292e:	7a a9       	ldd	r23, Y+50	; 0x32
    2930:	8b a9       	ldd	r24, Y+51	; 0x33
    2932:	9c a9       	ldd	r25, Y+52	; 0x34
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6d a9       	ldd	r22, Y+53	; 0x35
    2968:	7e a9       	ldd	r23, Y+54	; 0x36
    296a:	8f a9       	ldd	r24, Y+55	; 0x37
    296c:	98 ad       	ldd	r25, Y+56	; 0x38
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <H_Lcd_Void_LCDWriteCharacter+0x126>
    2990:	80 e9       	ldi	r24, 0x90	; 144
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	9e a7       	std	Y+46, r25	; 0x2e
    2996:	8d a7       	std	Y+45, r24	; 0x2d
    2998:	8d a5       	ldd	r24, Y+45	; 0x2d
    299a:	9e a5       	ldd	r25, Y+46	; 0x2e
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <H_Lcd_Void_LCDWriteCharacter+0x114>
    29a0:	9e a7       	std	Y+46, r25	; 0x2e
    29a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	98 ab       	std	Y+48, r25	; 0x30
    29ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b0:	98 a9       	ldd	r25, Y+48	; 0x30
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <H_Lcd_Void_LCDWriteCharacter+0x108>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ba:	7a a9       	ldd	r23, Y+50	; 0x32
    29bc:	8b a9       	ldd	r24, Y+51	; 0x33
    29be:	9c a9       	ldd	r25, Y+52	; 0x34
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
    29cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ce:	98 a9       	ldd	r25, Y+48	; 0x30
    29d0:	9c a7       	std	Y+44, r25	; 0x2c
    29d2:	8b a7       	std	Y+43, r24	; 0x2b
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <H_Lcd_Void_LCDWriteCharacter+0x150>
    29dc:	9c a7       	std	Y+44, r25	; 0x2c
    29de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    29e0:	8c e0       	ldi	r24, 0x0C	; 12
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a0 e8       	ldi	r26, 0x80	; 128
    29ee:	bf e3       	ldi	r27, 0x3F	; 63
    29f0:	8f a3       	std	Y+39, r24	; 0x27
    29f2:	98 a7       	std	Y+40, r25	; 0x28
    29f4:	a9 a7       	std	Y+41, r26	; 0x29
    29f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f8:	6f a1       	ldd	r22, Y+39	; 0x27
    29fa:	78 a5       	ldd	r23, Y+40	; 0x28
    29fc:	89 a5       	ldd	r24, Y+41	; 0x29
    29fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a e7       	ldi	r20, 0x7A	; 122
    2a06:	55 e4       	ldi	r21, 0x45	; 69
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	8b a3       	std	Y+35, r24	; 0x23
    2a12:	9c a3       	std	Y+36, r25	; 0x24
    2a14:	ad a3       	std	Y+37, r26	; 0x25
    2a16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e8       	ldi	r20, 0x80	; 128
    2a26:	5f e3       	ldi	r21, 0x3F	; 63
    2a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2c:	88 23       	and	r24, r24
    2a2e:	2c f4       	brge	.+10     	; 0x2a3a <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	3f c0       	rjmp	.+126    	; 0x2ab8 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    2a3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a40:	9e a1       	ldd	r25, Y+38	; 0x26
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4e:	18 16       	cp	r1, r24
    2a50:	4c f5       	brge	.+82     	; 0x2aa4 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	6f a1       	ldd	r22, Y+39	; 0x27
    2a54:	78 a5       	ldd	r23, Y+40	; 0x28
    2a56:	89 a5       	ldd	r24, Y+41	; 0x29
    2a58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e2       	ldi	r20, 0x20	; 32
    2a60:	51 e4       	ldi	r21, 0x41	; 65
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	bc 01       	movw	r22, r24
    2a6c:	cd 01       	movw	r24, r26
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9a a3       	std	Y+34, r25	; 0x22
    2a78:	89 a3       	std	Y+33, r24	; 0x21
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <H_Lcd_Void_LCDWriteCharacter+0x212>
    2a7c:	80 e9       	ldi	r24, 0x90	; 144
    2a7e:	91 e0       	ldi	r25, 0x01	; 1
    2a80:	98 a3       	std	Y+32, r25	; 0x20
    2a82:	8f 8f       	std	Y+31, r24	; 0x1f
    2a84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a86:	98 a1       	ldd	r25, Y+32	; 0x20
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <H_Lcd_Void_LCDWriteCharacter+0x200>
    2a8c:	98 a3       	std	Y+32, r25	; 0x20
    2a8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	89 a1       	ldd	r24, Y+33	; 0x21
    2a92:	9a a1       	ldd	r25, Y+34	; 0x22
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	69 f7       	brne	.-38     	; 0x2a7c <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    2aa2:	14 c0       	rjmp	.+40     	; 0x2acc <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9a a3       	std	Y+34, r25	; 0x22
    2ab6:	89 a3       	std	Y+33, r24	; 0x21
    2ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aba:	9a a1       	ldd	r25, Y+34	; 0x22
    2abc:	9e 8f       	std	Y+30, r25	; 0x1e
    2abe:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    2ac8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    2acc:	89 ad       	ldd	r24, Y+57	; 0x39
    2ace:	98 2f       	mov	r25, r24
    2ad0:	91 70       	andi	r25, 0x01	; 1
    2ad2:	84 e1       	ldi	r24, 0x14	; 20
    2ad4:	69 2f       	mov	r22, r25
    2ad6:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    2ada:	89 ad       	ldd	r24, Y+57	; 0x39
    2adc:	86 95       	lsr	r24
    2ade:	98 2f       	mov	r25, r24
    2ae0:	91 70       	andi	r25, 0x01	; 1
    2ae2:	85 e1       	ldi	r24, 0x15	; 21
    2ae4:	69 2f       	mov	r22, r25
    2ae6:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    2aea:	89 ad       	ldd	r24, Y+57	; 0x39
    2aec:	86 95       	lsr	r24
    2aee:	86 95       	lsr	r24
    2af0:	98 2f       	mov	r25, r24
    2af2:	91 70       	andi	r25, 0x01	; 1
    2af4:	86 e1       	ldi	r24, 0x16	; 22
    2af6:	69 2f       	mov	r22, r25
    2af8:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    2afc:	89 ad       	ldd	r24, Y+57	; 0x39
    2afe:	86 95       	lsr	r24
    2b00:	86 95       	lsr	r24
    2b02:	86 95       	lsr	r24
    2b04:	98 2f       	mov	r25, r24
    2b06:	91 70       	andi	r25, 0x01	; 1
    2b08:	88 e1       	ldi	r24, 0x18	; 24
    2b0a:	69 2f       	mov	r22, r25
    2b0c:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2b10:	8c e0       	ldi	r24, 0x0C	; 12
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	89 8f       	std	Y+25, r24	; 0x19
    2b22:	9a 8f       	std	Y+26, r25	; 0x1a
    2b24:	ab 8f       	std	Y+27, r26	; 0x1b
    2b26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8d 8b       	std	Y+21, r24	; 0x15
    2b42:	9e 8b       	std	Y+22, r25	; 0x16
    2b44:	af 8b       	std	Y+23, r26	; 0x17
    2b46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9c 8b       	std	Y+20, r25	; 0x14
    2b66:	8b 8b       	std	Y+19, r24	; 0x13
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    2b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b70:	98 8d       	ldd	r25, Y+24	; 0x18
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	69 8d       	ldd	r22, Y+25	; 0x19
    2b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9c 8b       	std	Y+20, r25	; 0x14
    2ba8:	8b 8b       	std	Y+19, r24	; 0x13
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <H_Lcd_Void_LCDWriteCharacter+0x342>
    2bac:	80 e9       	ldi	r24, 0x90	; 144
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9a 8b       	std	Y+18, r25	; 0x12
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
    2bb4:	89 89       	ldd	r24, Y+17	; 0x11
    2bb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <H_Lcd_Void_LCDWriteCharacter+0x330>
    2bbc:	9a 8b       	std	Y+18, r25	; 0x12
    2bbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <H_Lcd_Void_LCDWriteCharacter+0x324>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bda:	98 8d       	ldd	r25, Y+24	; 0x18
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9c 8b       	std	Y+20, r25	; 0x14
    2be6:	8b 8b       	std	Y+19, r24	; 0x13
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	98 8b       	std	Y+16, r25	; 0x10
    2bee:	8f 87       	std	Y+15, r24	; 0x0f
    2bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf2:	98 89       	ldd	r25, Y+16	; 0x10
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    2bf8:	98 8b       	std	Y+16, r25	; 0x10
    2bfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2bfc:	8c e0       	ldi	r24, 0x0C	; 12
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 ea       	ldi	r26, 0xA0	; 160
    2c0a:	b0 e4       	ldi	r27, 0x40	; 64
    2c0c:	8b 87       	std	Y+11, r24	; 0x0b
    2c0e:	9c 87       	std	Y+12, r25	; 0x0c
    2c10:	ad 87       	std	Y+13, r26	; 0x0d
    2c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	55 e4       	ldi	r21, 0x45	; 69
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8f 83       	std	Y+7, r24	; 0x07
    2c2e:	98 87       	std	Y+8, r25	; 0x08
    2c30:	a9 87       	std	Y+9, r26	; 0x09
    2c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	2c f4       	brge	.+10     	; 0x2c56 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	3f c0       	rjmp	.+126    	; 0x2cd4 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	3f ef       	ldi	r19, 0xFF	; 255
    2c62:	4f e7       	ldi	r20, 0x7F	; 127
    2c64:	57 e4       	ldi	r21, 0x47	; 71
    2c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	4c f5       	brge	.+82     	; 0x2cc0 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    2c98:	80 e9       	ldi	r24, 0x90	; 144
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	69 f7       	brne	.-38     	; 0x2c98 <H_Lcd_Void_LCDWriteCharacter+0x410>
    2cbe:	14 c0       	rjmp	.+40     	; 0x2ce8 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <H_Lcd_Void_LCDWriteCharacter+0x458>
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2ce8:	e9 96       	adiw	r28, 0x39	; 57
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	e9 97       	sbiw	r28, 0x39	; 57
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    2d10:	8d e0       	ldi	r24, 0x0D	; 13
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2d18:	89 ad       	ldd	r24, Y+57	; 0x39
    2d1a:	82 95       	swap	r24
    2d1c:	8f 70       	andi	r24, 0x0F	; 15
    2d1e:	98 2f       	mov	r25, r24
    2d20:	91 70       	andi	r25, 0x01	; 1
    2d22:	84 e1       	ldi	r24, 0x14	; 20
    2d24:	69 2f       	mov	r22, r25
    2d26:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2d2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2d2c:	82 95       	swap	r24
    2d2e:	86 95       	lsr	r24
    2d30:	87 70       	andi	r24, 0x07	; 7
    2d32:	98 2f       	mov	r25, r24
    2d34:	91 70       	andi	r25, 0x01	; 1
    2d36:	85 e1       	ldi	r24, 0x15	; 21
    2d38:	69 2f       	mov	r22, r25
    2d3a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    2d3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d40:	82 95       	swap	r24
    2d42:	86 95       	lsr	r24
    2d44:	86 95       	lsr	r24
    2d46:	83 70       	andi	r24, 0x03	; 3
    2d48:	98 2f       	mov	r25, r24
    2d4a:	91 70       	andi	r25, 0x01	; 1
    2d4c:	86 e1       	ldi	r24, 0x16	; 22
    2d4e:	69 2f       	mov	r22, r25
    2d50:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2d54:	89 ad       	ldd	r24, Y+57	; 0x39
    2d56:	98 2f       	mov	r25, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	99 27       	eor	r25, r25
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	88 e1       	ldi	r24, 0x18	; 24
    2d60:	69 2f       	mov	r22, r25
    2d62:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2d66:	8c e0       	ldi	r24, 0x0C	; 12
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a0 e8       	ldi	r26, 0x80	; 128
    2d74:	bf e3       	ldi	r27, 0x3F	; 63
    2d76:	8d ab       	std	Y+53, r24	; 0x35
    2d78:	9e ab       	std	Y+54, r25	; 0x36
    2d7a:	af ab       	std	Y+55, r26	; 0x37
    2d7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d80:	7e a9       	ldd	r23, Y+54	; 0x36
    2d82:	8f a9       	ldd	r24, Y+55	; 0x37
    2d84:	98 ad       	ldd	r25, Y+56	; 0x38
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4a e7       	ldi	r20, 0x7A	; 122
    2d8c:	55 e4       	ldi	r21, 0x45	; 69
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	89 ab       	std	Y+49, r24	; 0x31
    2d98:	9a ab       	std	Y+50, r25	; 0x32
    2d9a:	ab ab       	std	Y+51, r26	; 0x33
    2d9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2da0:	7a a9       	ldd	r23, Y+50	; 0x32
    2da2:	8b a9       	ldd	r24, Y+51	; 0x33
    2da4:	9c a9       	ldd	r25, Y+52	; 0x34
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e8       	ldi	r20, 0x80	; 128
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2db2:	88 23       	and	r24, r24
    2db4:	2c f4       	brge	.+10     	; 0x2dc0 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	98 ab       	std	Y+48, r25	; 0x30
    2dbc:	8f a7       	std	Y+47, r24	; 0x2f
    2dbe:	3f c0       	rjmp	.+126    	; 0x2e3e <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    2dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd4:	18 16       	cp	r1, r24
    2dd6:	4c f5       	brge	.+82     	; 0x2e2a <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dda:	7e a9       	ldd	r23, Y+54	; 0x36
    2ddc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dde:	98 ad       	ldd	r25, Y+56	; 0x38
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e2       	ldi	r20, 0x20	; 32
    2de6:	51 e4       	ldi	r21, 0x41	; 65
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	98 ab       	std	Y+48, r25	; 0x30
    2dfe:	8f a7       	std	Y+47, r24	; 0x2f
    2e00:	0f c0       	rjmp	.+30     	; 0x2e20 <H_Lcd_Void_LCDWriteCommand+0x126>
    2e02:	80 e9       	ldi	r24, 0x90	; 144
    2e04:	91 e0       	ldi	r25, 0x01	; 1
    2e06:	9e a7       	std	Y+46, r25	; 0x2e
    2e08:	8d a7       	std	Y+45, r24	; 0x2d
    2e0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <H_Lcd_Void_LCDWriteCommand+0x114>
    2e12:	9e a7       	std	Y+46, r25	; 0x2e
    2e14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e18:	98 a9       	ldd	r25, Y+48	; 0x30
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e22:	98 a9       	ldd	r25, Y+48	; 0x30
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	69 f7       	brne	.-38     	; 0x2e02 <H_Lcd_Void_LCDWriteCommand+0x108>
    2e28:	14 c0       	rjmp	.+40     	; 0x2e52 <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e30:	9c a9       	ldd	r25, Y+52	; 0x34
    2e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	98 ab       	std	Y+48, r25	; 0x30
    2e3c:	8f a7       	std	Y+47, r24	; 0x2f
    2e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e40:	98 a9       	ldd	r25, Y+48	; 0x30
    2e42:	9c a7       	std	Y+44, r25	; 0x2c
    2e44:	8b a7       	std	Y+43, r24	; 0x2b
    2e46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <H_Lcd_Void_LCDWriteCommand+0x150>
    2e4e:	9c a7       	std	Y+44, r25	; 0x2c
    2e50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2e52:	8c e0       	ldi	r24, 0x0C	; 12
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e8       	ldi	r26, 0x80	; 128
    2e60:	bf e3       	ldi	r27, 0x3F	; 63
    2e62:	8f a3       	std	Y+39, r24	; 0x27
    2e64:	98 a7       	std	Y+40, r25	; 0x28
    2e66:	a9 a7       	std	Y+41, r26	; 0x29
    2e68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8b a3       	std	Y+35, r24	; 0x23
    2e84:	9c a3       	std	Y+36, r25	; 0x24
    2e86:	ad a3       	std	Y+37, r26	; 0x25
    2e88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e90:	9e a1       	ldd	r25, Y+38	; 0x26
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9a a3       	std	Y+34, r25	; 0x22
    2ea8:	89 a3       	std	Y+33, r24	; 0x21
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2eac:	6b a1       	ldd	r22, Y+35	; 0x23
    2eae:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9a a3       	std	Y+34, r25	; 0x22
    2eea:	89 a3       	std	Y+33, r24	; 0x21
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <H_Lcd_Void_LCDWriteCommand+0x212>
    2eee:	80 e9       	ldi	r24, 0x90	; 144
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	98 a3       	std	Y+32, r25	; 0x20
    2ef4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ef6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ef8:	98 a1       	ldd	r25, Y+32	; 0x20
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <H_Lcd_Void_LCDWriteCommand+0x200>
    2efe:	98 a3       	std	Y+32, r25	; 0x20
    2f00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	89 a1       	ldd	r24, Y+33	; 0x21
    2f04:	9a a1       	ldd	r25, Y+34	; 0x22
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9a a3       	std	Y+34, r25	; 0x22
    2f0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6b a1       	ldd	r22, Y+35	; 0x23
    2f18:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9a a3       	std	Y+34, r25	; 0x22
    2f28:	89 a3       	std	Y+33, r24	; 0x21
    2f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f30:	8d 8f       	std	Y+29, r24	; 0x1d
    2f32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    2f3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f40:	98 2f       	mov	r25, r24
    2f42:	91 70       	andi	r25, 0x01	; 1
    2f44:	84 e1       	ldi	r24, 0x14	; 20
    2f46:	69 2f       	mov	r22, r25
    2f48:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2f4c:	89 ad       	ldd	r24, Y+57	; 0x39
    2f4e:	86 95       	lsr	r24
    2f50:	98 2f       	mov	r25, r24
    2f52:	91 70       	andi	r25, 0x01	; 1
    2f54:	85 e1       	ldi	r24, 0x15	; 21
    2f56:	69 2f       	mov	r22, r25
    2f58:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2f5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2f5e:	86 95       	lsr	r24
    2f60:	86 95       	lsr	r24
    2f62:	98 2f       	mov	r25, r24
    2f64:	91 70       	andi	r25, 0x01	; 1
    2f66:	86 e1       	ldi	r24, 0x16	; 22
    2f68:	69 2f       	mov	r22, r25
    2f6a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    2f6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	86 95       	lsr	r24
    2f76:	98 2f       	mov	r25, r24
    2f78:	91 70       	andi	r25, 0x01	; 1
    2f7a:	88 e1       	ldi	r24, 0x18	; 24
    2f7c:	69 2f       	mov	r22, r25
    2f7e:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2f82:	8c e0       	ldi	r24, 0x0C	; 12
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e8       	ldi	r26, 0x80	; 128
    2f90:	bf e3       	ldi	r27, 0x3F	; 63
    2f92:	89 8f       	std	Y+25, r24	; 0x19
    2f94:	9a 8f       	std	Y+26, r25	; 0x1a
    2f96:	ab 8f       	std	Y+27, r26	; 0x1b
    2f98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4a e7       	ldi	r20, 0x7A	; 122
    2fa8:	55 e4       	ldi	r21, 0x45	; 69
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8d 8b       	std	Y+21, r24	; 0x15
    2fb4:	9e 8b       	std	Y+22, r25	; 0x16
    2fb6:	af 8b       	std	Y+23, r26	; 0x17
    2fb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fba:	6d 89       	ldd	r22, Y+21	; 0x15
    2fbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e8       	ldi	r20, 0x80	; 128
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fce:	88 23       	and	r24, r24
    2fd0:	2c f4       	brge	.+10     	; 0x2fdc <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9c 8b       	std	Y+20, r25	; 0x14
    2fd8:	8b 8b       	std	Y+19, r24	; 0x13
    2fda:	3f c0       	rjmp	.+126    	; 0x305a <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    2fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fde:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	3f ef       	ldi	r19, 0xFF	; 255
    2fe8:	4f e7       	ldi	r20, 0x7F	; 127
    2fea:	57 e4       	ldi	r21, 0x47	; 71
    2fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff0:	18 16       	cp	r1, r24
    2ff2:	4c f5       	brge	.+82     	; 0x3046 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e2       	ldi	r20, 0x20	; 32
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9c 8b       	std	Y+20, r25	; 0x14
    301a:	8b 8b       	std	Y+19, r24	; 0x13
    301c:	0f c0       	rjmp	.+30     	; 0x303c <H_Lcd_Void_LCDWriteCommand+0x342>
    301e:	80 e9       	ldi	r24, 0x90	; 144
    3020:	91 e0       	ldi	r25, 0x01	; 1
    3022:	9a 8b       	std	Y+18, r25	; 0x12
    3024:	89 8b       	std	Y+17, r24	; 0x11
    3026:	89 89       	ldd	r24, Y+17	; 0x11
    3028:	9a 89       	ldd	r25, Y+18	; 0x12
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <H_Lcd_Void_LCDWriteCommand+0x330>
    302e:	9a 8b       	std	Y+18, r25	; 0x12
    3030:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	9c 8b       	std	Y+20, r25	; 0x14
    303a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303c:	8b 89       	ldd	r24, Y+19	; 0x13
    303e:	9c 89       	ldd	r25, Y+20	; 0x14
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	69 f7       	brne	.-38     	; 0x301e <H_Lcd_Void_LCDWriteCommand+0x324>
    3044:	14 c0       	rjmp	.+40     	; 0x306e <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3046:	6d 89       	ldd	r22, Y+21	; 0x15
    3048:	7e 89       	ldd	r23, Y+22	; 0x16
    304a:	8f 89       	ldd	r24, Y+23	; 0x17
    304c:	98 8d       	ldd	r25, Y+24	; 0x18
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	9c 8b       	std	Y+20, r25	; 0x14
    3058:	8b 8b       	std	Y+19, r24	; 0x13
    305a:	8b 89       	ldd	r24, Y+19	; 0x13
    305c:	9c 89       	ldd	r25, Y+20	; 0x14
    305e:	98 8b       	std	Y+16, r25	; 0x10
    3060:	8f 87       	std	Y+15, r24	; 0x0f
    3062:	8f 85       	ldd	r24, Y+15	; 0x0f
    3064:	98 89       	ldd	r25, Y+16	; 0x10
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <H_Lcd_Void_LCDWriteCommand+0x36c>
    306a:	98 8b       	std	Y+16, r25	; 0x10
    306c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    306e:	8c e0       	ldi	r24, 0x0C	; 12
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 ea       	ldi	r26, 0xA0	; 160
    307c:	b0 e4       	ldi	r27, 0x40	; 64
    307e:	8b 87       	std	Y+11, r24	; 0x0b
    3080:	9c 87       	std	Y+12, r25	; 0x0c
    3082:	ad 87       	std	Y+13, r26	; 0x0d
    3084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	6b 85       	ldd	r22, Y+11	; 0x0b
    3088:	7c 85       	ldd	r23, Y+12	; 0x0c
    308a:	8d 85       	ldd	r24, Y+13	; 0x0d
    308c:	9e 85       	ldd	r25, Y+14	; 0x0e
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	4a e7       	ldi	r20, 0x7A	; 122
    3094:	55 e4       	ldi	r21, 0x45	; 69
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8f 83       	std	Y+7, r24	; 0x07
    30a0:	98 87       	std	Y+8, r25	; 0x08
    30a2:	a9 87       	std	Y+9, r26	; 0x09
    30a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a6:	6f 81       	ldd	r22, Y+7	; 0x07
    30a8:	78 85       	ldd	r23, Y+8	; 0x08
    30aa:	89 85       	ldd	r24, Y+9	; 0x09
    30ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	2c f4       	brge	.+10     	; 0x30c8 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	3f ef       	ldi	r19, 0xFF	; 255
    30d4:	4f e7       	ldi	r20, 0x7F	; 127
    30d6:	57 e4       	ldi	r21, 0x47	; 71
    30d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30dc:	18 16       	cp	r1, r24
    30de:	4c f5       	brge	.+82     	; 0x3132 <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <H_Lcd_Void_LCDWriteCommand+0x42e>
    310a:	80 e9       	ldi	r24, 0x90	; 144
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	9c 83       	std	Y+4, r25	; 0x04
    3110:	8b 83       	std	Y+3, r24	; 0x03
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	9c 81       	ldd	r25, Y+4	; 0x04
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <H_Lcd_Void_LCDWriteCommand+0x41c>
    311a:	9c 83       	std	Y+4, r25	; 0x04
    311c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	69 f7       	brne	.-38     	; 0x310a <H_Lcd_Void_LCDWriteCommand+0x410>
    3130:	14 c0       	rjmp	.+40     	; 0x315a <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	6f 81       	ldd	r22, Y+7	; 0x07
    3134:	78 85       	ldd	r23, Y+8	; 0x08
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	9a 81       	ldd	r25, Y+2	; 0x02
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <H_Lcd_Void_LCDWriteCommand+0x458>
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    315a:	e9 96       	adiw	r28, 0x39	; 57
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <H_Lcd_Void_LCDWriteString+0x6>
    3172:	0f 92       	push	r0
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	9b 83       	std	Y+3, r25	; 0x03
    317a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    317c:	19 82       	std	Y+1, r1	; 0x01
    317e:	0e c0       	rjmp	.+28     	; 0x319c <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	fc 01       	movw	r30, r24
    318c:	e2 0f       	add	r30, r18
    318e:	f3 1f       	adc	r31, r19
    3190:	80 81       	ld	r24, Z
    3192:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	8f 5f       	subi	r24, 0xFF	; 255
    319a:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	9b 81       	ldd	r25, Y+3	; 0x03
    31a6:	fc 01       	movw	r30, r24
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	80 81       	ld	r24, Z
    31ae:	88 23       	and	r24, r24
    31b0:	39 f7       	brne	.-50     	; 0x3180 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	2f 97       	sbiw	r28, 0x0f	; 15
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
    31ea:	6c 87       	std	Y+12, r22	; 0x0c
    31ec:	7d 87       	std	Y+13, r23	; 0x0d
    31ee:	8e 87       	std	Y+14, r24	; 0x0e
    31f0:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    31f2:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    31f4:	8a e0       	ldi	r24, 0x0A	; 10
    31f6:	fe 01       	movw	r30, r28
    31f8:	32 96       	adiw	r30, 0x02	; 2
    31fa:	df 01       	movw	r26, r30
    31fc:	98 2f       	mov	r25, r24
    31fe:	1d 92       	st	X+, r1
    3200:	9a 95       	dec	r25
    3202:	e9 f7       	brne	.-6      	; 0x31fe <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    3204:	8c 85       	ldd	r24, Y+12	; 0x0c
    3206:	9d 85       	ldd	r25, Y+13	; 0x0d
    3208:	ae 85       	ldd	r26, Y+14	; 0x0e
    320a:	bf 85       	ldd	r27, Y+15	; 0x0f
    320c:	bb 23       	and	r27, r27
    320e:	94 f4       	brge	.+36     	; 0x3234 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    3210:	8c 85       	ldd	r24, Y+12	; 0x0c
    3212:	9d 85       	ldd	r25, Y+13	; 0x0d
    3214:	ae 85       	ldd	r26, Y+14	; 0x0e
    3216:	bf 85       	ldd	r27, Y+15	; 0x0f
    3218:	b0 95       	com	r27
    321a:	a0 95       	com	r26
    321c:	90 95       	com	r25
    321e:	81 95       	neg	r24
    3220:	9f 4f       	sbci	r25, 0xFF	; 255
    3222:	af 4f       	sbci	r26, 0xFF	; 255
    3224:	bf 4f       	sbci	r27, 0xFF	; 255
    3226:	8c 87       	std	Y+12, r24	; 0x0c
    3228:	9d 87       	std	Y+13, r25	; 0x0d
    322a:	ae 87       	std	Y+14, r26	; 0x0e
    322c:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    322e:	8d e2       	ldi	r24, 0x2D	; 45
    3230:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	08 2f       	mov	r16, r24
    3238:	11 27       	eor	r17, r17
    323a:	07 fd       	sbrc	r16, 7
    323c:	10 95       	com	r17
    323e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3240:	9d 85       	ldd	r25, Y+13	; 0x0d
    3242:	ae 85       	ldd	r26, Y+14	; 0x0e
    3244:	bf 85       	ldd	r27, Y+15	; 0x0f
    3246:	2a e0       	ldi	r18, 0x0A	; 10
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <__divmodsi4>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	28 2f       	mov	r18, r24
    325c:	ce 01       	movw	r24, r28
    325e:	02 96       	adiw	r24, 0x02	; 2
    3260:	fc 01       	movw	r30, r24
    3262:	e0 0f       	add	r30, r16
    3264:	f1 1f       	adc	r31, r17
    3266:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    3268:	8c 85       	ldd	r24, Y+12	; 0x0c
    326a:	9d 85       	ldd	r25, Y+13	; 0x0d
    326c:	ae 85       	ldd	r26, Y+14	; 0x0e
    326e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3270:	2a e0       	ldi	r18, 0x0A	; 10
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <__divmodsi4>
    3280:	da 01       	movw	r26, r20
    3282:	c9 01       	movw	r24, r18
    3284:	8c 87       	std	Y+12, r24	; 0x0c
    3286:	9d 87       	std	Y+13, r25	; 0x0d
    3288:	ae 87       	std	Y+14, r26	; 0x0e
    328a:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	8f 5f       	subi	r24, 0xFF	; 255
    3290:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    3292:	8c 85       	ldd	r24, Y+12	; 0x0c
    3294:	9d 85       	ldd	r25, Y+13	; 0x0d
    3296:	ae 85       	ldd	r26, Y+14	; 0x0e
    3298:	bf 85       	ldd	r27, Y+15	; 0x0f
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	a1 05       	cpc	r26, r1
    329e:	b1 05       	cpc	r27, r1
    32a0:	49 f6       	brne	.-110    	; 0x3234 <H_Lcd_Void_LCDWriteNumber+0x62>
    32a2:	11 c0       	rjmp	.+34     	; 0x32c6 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	81 50       	subi	r24, 0x01	; 1
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	33 27       	eor	r19, r19
    32b0:	27 fd       	sbrc	r18, 7
    32b2:	30 95       	com	r19
    32b4:	ce 01       	movw	r24, r28
    32b6:	02 96       	adiw	r24, 0x02	; 2
    32b8:	fc 01       	movw	r30, r24
    32ba:	e2 0f       	add	r30, r18
    32bc:	f3 1f       	adc	r31, r19
    32be:	80 81       	ld	r24, Z
    32c0:	80 5d       	subi	r24, 0xD0	; 208
    32c2:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	18 16       	cp	r1, r24
    32ca:	64 f3       	brlt	.-40     	; 0x32a4 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    32cc:	2f 96       	adiw	r28, 0x0f	; 15
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	08 95       	ret

000032e2 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <H_Lcd_Void_LCDGoTo+0x6>
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <H_Lcd_Void_LCDGoTo+0x8>
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <H_Lcd_Void_LCDGoTo+0xa>
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	8d 83       	std	Y+5, r24	; 0x05
    32f2:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    32f4:	80 e8       	ldi	r24, 0x80	; 128
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	80 ec       	ldi	r24, 0xC0	; 192
    32fa:	8a 83       	std	Y+2, r24	; 0x02
    32fc:	84 e9       	ldi	r24, 0x94	; 148
    32fe:	8b 83       	std	Y+3, r24	; 0x03
    3300:	84 ed       	ldi	r24, 0xD4	; 212
    3302:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	ce 01       	movw	r24, r28
    330c:	01 96       	adiw	r24, 0x01	; 1
    330e:	fc 01       	movw	r30, r24
    3310:	e2 0f       	add	r30, r18
    3312:	f3 1f       	adc	r31, r19
    3314:	90 81       	ld	r25, Z
    3316:	8e 81       	ldd	r24, Y+6	; 0x06
    3318:	89 0f       	add	r24, r25
    331a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <H_Lcd_Void_LCDWriteCommand>
}
    331e:	26 96       	adiw	r28, 0x06	; 6
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <H_KeyPad_Void_KeyPadInit>:
#include <util/delay.h>
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    3338:	82 e2       	ldi	r24, 0x22	; 34
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    3340:	81 e2       	ldi	r24, 0x21	; 33
    3342:	61 e0       	ldi	r22, 0x01	; 1
    3344:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    3348:	80 e2       	ldi	r24, 0x20	; 32
    334a:	61 e0       	ldi	r22, 0x01	; 1
    334c:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    3350:	82 e2       	ldi	r24, 0x22	; 34
    3352:	61 e0       	ldi	r22, 0x01	; 1
    3354:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    3358:	81 e2       	ldi	r24, 0x21	; 33
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    3360:	80 e2       	ldi	r24, 0x20	; 32
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    3368:	8f e2       	ldi	r24, 0x2F	; 47
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    3370:	8e e2       	ldi	r24, 0x2E	; 46
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    3378:	8d e2       	ldi	r24, 0x2D	; 45
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
}
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	af 97       	sbiw	r28, 0x2f	; 47
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[3] = {KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    339a:	ce 01       	movw	r24, r28
    339c:	42 96       	adiw	r24, 0x12	; 18
    339e:	9a a3       	std	Y+34, r25	; 0x22
    33a0:	89 a3       	std	Y+33, r24	; 0x21
    33a2:	e7 e1       	ldi	r30, 0x17	; 23
    33a4:	f2 e0       	ldi	r31, 0x02	; 2
    33a6:	fc a3       	std	Y+36, r31	; 0x24
    33a8:	eb a3       	std	Y+35, r30	; 0x23
    33aa:	f3 e0       	ldi	r31, 0x03	; 3
    33ac:	fd a3       	std	Y+37, r31	; 0x25
    33ae:	eb a1       	ldd	r30, Y+35	; 0x23
    33b0:	fc a1       	ldd	r31, Y+36	; 0x24
    33b2:	00 80       	ld	r0, Z
    33b4:	8b a1       	ldd	r24, Y+35	; 0x23
    33b6:	9c a1       	ldd	r25, Y+36	; 0x24
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	9c a3       	std	Y+36, r25	; 0x24
    33bc:	8b a3       	std	Y+35, r24	; 0x23
    33be:	e9 a1       	ldd	r30, Y+33	; 0x21
    33c0:	fa a1       	ldd	r31, Y+34	; 0x22
    33c2:	00 82       	st	Z, r0
    33c4:	89 a1       	ldd	r24, Y+33	; 0x21
    33c6:	9a a1       	ldd	r25, Y+34	; 0x22
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	9a a3       	std	Y+34, r25	; 0x22
    33cc:	89 a3       	std	Y+33, r24	; 0x21
    33ce:	9d a1       	ldd	r25, Y+37	; 0x25
    33d0:	91 50       	subi	r25, 0x01	; 1
    33d2:	9d a3       	std	Y+37, r25	; 0x25
    33d4:	ed a1       	ldd	r30, Y+37	; 0x25
    33d6:	ee 23       	and	r30, r30
    33d8:	51 f7       	brne	.-44     	; 0x33ae <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_U8_KeypadColPins[3] = {KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN };
    33da:	ce 01       	movw	r24, r28
    33dc:	45 96       	adiw	r24, 0x15	; 21
    33de:	9f a3       	std	Y+39, r25	; 0x27
    33e0:	8e a3       	std	Y+38, r24	; 0x26
    33e2:	e4 e1       	ldi	r30, 0x14	; 20
    33e4:	f2 e0       	ldi	r31, 0x02	; 2
    33e6:	f9 a7       	std	Y+41, r31	; 0x29
    33e8:	e8 a7       	std	Y+40, r30	; 0x28
    33ea:	f3 e0       	ldi	r31, 0x03	; 3
    33ec:	fa a7       	std	Y+42, r31	; 0x2a
    33ee:	e8 a5       	ldd	r30, Y+40	; 0x28
    33f0:	f9 a5       	ldd	r31, Y+41	; 0x29
    33f2:	00 80       	ld	r0, Z
    33f4:	88 a5       	ldd	r24, Y+40	; 0x28
    33f6:	99 a5       	ldd	r25, Y+41	; 0x29
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	99 a7       	std	Y+41, r25	; 0x29
    33fc:	88 a7       	std	Y+40, r24	; 0x28
    33fe:	ee a1       	ldd	r30, Y+38	; 0x26
    3400:	ff a1       	ldd	r31, Y+39	; 0x27
    3402:	00 82       	st	Z, r0
    3404:	8e a1       	ldd	r24, Y+38	; 0x26
    3406:	9f a1       	ldd	r25, Y+39	; 0x27
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	9f a3       	std	Y+39, r25	; 0x27
    340c:	8e a3       	std	Y+38, r24	; 0x26
    340e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3410:	91 50       	subi	r25, 0x01	; 1
    3412:	9a a7       	std	Y+42, r25	; 0x2a
    3414:	ea a5       	ldd	r30, Y+42	; 0x2a
    3416:	ee 23       	and	r30, r30
    3418:	51 f7       	brne	.-44     	; 0x33ee <H_KeyPad_U8_KeyPadRead+0x68>
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [3][3] = {{ '1' , '2' , '3' },
							          { '4' , '5' , '6' },
						         	  { '7' , '8' , '9' }};
    341a:	ce 01       	movw	r24, r28
    341c:	48 96       	adiw	r24, 0x18	; 24
    341e:	9c a7       	std	Y+44, r25	; 0x2c
    3420:	8b a7       	std	Y+43, r24	; 0x2b
    3422:	eb e0       	ldi	r30, 0x0B	; 11
    3424:	f2 e0       	ldi	r31, 0x02	; 2
    3426:	fe a7       	std	Y+46, r31	; 0x2e
    3428:	ed a7       	std	Y+45, r30	; 0x2d
    342a:	f9 e0       	ldi	r31, 0x09	; 9
    342c:	ff a7       	std	Y+47, r31	; 0x2f
    342e:	ed a5       	ldd	r30, Y+45	; 0x2d
    3430:	fe a5       	ldd	r31, Y+46	; 0x2e
    3432:	00 80       	ld	r0, Z
    3434:	8d a5       	ldd	r24, Y+45	; 0x2d
    3436:	9e a5       	ldd	r25, Y+46	; 0x2e
    3438:	01 96       	adiw	r24, 0x01	; 1
    343a:	9e a7       	std	Y+46, r25	; 0x2e
    343c:	8d a7       	std	Y+45, r24	; 0x2d
    343e:	eb a5       	ldd	r30, Y+43	; 0x2b
    3440:	fc a5       	ldd	r31, Y+44	; 0x2c
    3442:	00 82       	st	Z, r0
    3444:	8b a5       	ldd	r24, Y+43	; 0x2b
    3446:	9c a5       	ldd	r25, Y+44	; 0x2c
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	9c a7       	std	Y+44, r25	; 0x2c
    344c:	8b a7       	std	Y+43, r24	; 0x2b
    344e:	9f a5       	ldd	r25, Y+47	; 0x2f
    3450:	91 50       	subi	r25, 0x01	; 1
    3452:	9f a7       	std	Y+47, r25	; 0x2f
    3454:	ef a5       	ldd	r30, Y+47	; 0x2f
    3456:	ee 23       	and	r30, r30
    3458:	51 f7       	brne	.-44     	; 0x342e <H_KeyPad_U8_KeyPadRead+0xa8>
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_RowCounter = 0;
    345e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_ColCounter = 0;
    3460:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter < 3 ; Local_U8_RowCounter++)
    3462:	18 8a       	std	Y+16, r1	; 0x10
    3464:	c8 c0       	rjmp	.+400    	; 0x35f6 <H_KeyPad_U8_KeyPadRead+0x270>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    3466:	88 89       	ldd	r24, Y+16	; 0x10
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	ce 01       	movw	r24, r28
    346e:	42 96       	adiw	r24, 0x12	; 18
    3470:	fc 01       	movw	r30, r24
    3472:	e2 0f       	add	r30, r18
    3474:	f3 1f       	adc	r31, r19
    3476:	80 81       	ld	r24, Z
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter < 3 ; Local_U8_ColCounter++)
    347e:	1f 86       	std	Y+15, r1	; 0x0f
    3480:	a7 c0       	rjmp	.+334    	; 0x35d0 <H_KeyPad_U8_KeyPadRead+0x24a>
		{
			if(M_DIO_U8_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    3482:	8f 85       	ldd	r24, Y+15	; 0x0f
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	ce 01       	movw	r24, r28
    348a:	45 96       	adiw	r24, 0x15	; 21
    348c:	fc 01       	movw	r30, r24
    348e:	e2 0f       	add	r30, r18
    3490:	f3 1f       	adc	r31, r19
    3492:	80 81       	ld	r24, Z
    3494:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    3498:	88 23       	and	r24, r24
    349a:	09 f0       	breq	.+2      	; 0x349e <H_KeyPad_U8_KeyPadRead+0x118>
    349c:	96 c0       	rjmp	.+300    	; 0x35ca <H_KeyPad_U8_KeyPadRead+0x244>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	a0 e2       	ldi	r26, 0x20	; 32
    34a4:	b2 e4       	ldi	r27, 0x42	; 66
    34a6:	8b 87       	std	Y+11, r24	; 0x0b
    34a8:	9c 87       	std	Y+12, r25	; 0x0c
    34aa:	ad 87       	std	Y+13, r26	; 0x0d
    34ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	4a e7       	ldi	r20, 0x7A	; 122
    34bc:	55 e4       	ldi	r21, 0x45	; 69
    34be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	8f 83       	std	Y+7, r24	; 0x07
    34c8:	98 87       	std	Y+8, r25	; 0x08
    34ca:	a9 87       	std	Y+9, r26	; 0x09
    34cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e8       	ldi	r20, 0x80	; 128
    34dc:	5f e3       	ldi	r21, 0x3F	; 63
    34de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e2:	88 23       	and	r24, r24
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <H_KeyPad_U8_KeyPadRead+0x16a>
		__ticks = 1;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	3f c0       	rjmp	.+126    	; 0x356e <H_KeyPad_U8_KeyPadRead+0x1e8>
	else if (__tmp > 65535)
    34f0:	6f 81       	ldd	r22, Y+7	; 0x07
    34f2:	78 85       	ldd	r23, Y+8	; 0x08
    34f4:	89 85       	ldd	r24, Y+9	; 0x09
    34f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	3f ef       	ldi	r19, 0xFF	; 255
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	57 e4       	ldi	r21, 0x47	; 71
    3500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3504:	18 16       	cp	r1, r24
    3506:	4c f5       	brge	.+82     	; 0x355a <H_KeyPad_U8_KeyPadRead+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3508:	6b 85       	ldd	r22, Y+11	; 0x0b
    350a:	7c 85       	ldd	r23, Y+12	; 0x0c
    350c:	8d 85       	ldd	r24, Y+13	; 0x0d
    350e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	bc 01       	movw	r22, r24
    3522:	cd 01       	movw	r24, r26
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	0f c0       	rjmp	.+30     	; 0x3550 <H_KeyPad_U8_KeyPadRead+0x1ca>
    3532:	80 e9       	ldi	r24, 0x90	; 144
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	9c 83       	std	Y+4, r25	; 0x04
    3538:	8b 83       	std	Y+3, r24	; 0x03
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <H_KeyPad_U8_KeyPadRead+0x1b8>
    3542:	9c 83       	std	Y+4, r25	; 0x04
    3544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3546:	8d 81       	ldd	r24, Y+5	; 0x05
    3548:	9e 81       	ldd	r25, Y+6	; 0x06
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3550:	8d 81       	ldd	r24, Y+5	; 0x05
    3552:	9e 81       	ldd	r25, Y+6	; 0x06
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	69 f7       	brne	.-38     	; 0x3532 <H_KeyPad_U8_KeyPadRead+0x1ac>
    3558:	14 c0       	rjmp	.+40     	; 0x3582 <H_KeyPad_U8_KeyPadRead+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9e 83       	std	Y+6, r25	; 0x06
    356c:	8d 83       	std	Y+5, r24	; 0x05
    356e:	8d 81       	ldd	r24, Y+5	; 0x05
    3570:	9e 81       	ldd	r25, Y+6	; 0x06
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <H_KeyPad_U8_KeyPadRead+0x1f4>
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    3582:	8f 85       	ldd	r24, Y+15	; 0x0f
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	ce 01       	movw	r24, r28
    358a:	45 96       	adiw	r24, 0x15	; 21
    358c:	fc 01       	movw	r30, r24
    358e:	e2 0f       	add	r30, r18
    3590:	f3 1f       	adc	r31, r19
    3592:	80 81       	ld	r24, Z
    3594:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_DIO_U8_GetPinValue>
    3598:	88 23       	and	r24, r24
    359a:	b9 f4       	brne	.+46     	; 0x35ca <H_KeyPad_U8_KeyPadRead+0x244>
				{
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    359c:	88 89       	ldd	r24, Y+16	; 0x10
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a4:	48 2f       	mov	r20, r24
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	c9 01       	movw	r24, r18
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	82 0f       	add	r24, r18
    35b0:	93 1f       	adc	r25, r19
    35b2:	9e 01       	movw	r18, r28
    35b4:	2f 5f       	subi	r18, 0xFF	; 255
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	82 0f       	add	r24, r18
    35ba:	93 1f       	adc	r25, r19
    35bc:	84 0f       	add	r24, r20
    35be:	95 1f       	adc	r25, r21
    35c0:	fc 01       	movw	r30, r24
    35c2:	77 96       	adiw	r30, 0x17	; 23
    35c4:	80 81       	ld	r24, Z
    35c6:	89 8b       	std	Y+17, r24	; 0x11
    35c8:	07 c0       	rjmp	.+14     	; 0x35d8 <H_KeyPad_U8_KeyPadRead+0x252>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter < 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter < 3 ; Local_U8_ColCounter++)
    35ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    35cc:	8f 5f       	subi	r24, 0xFF	; 255
    35ce:	8f 87       	std	Y+15, r24	; 0x0f
    35d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d2:	83 30       	cpi	r24, 0x03	; 3
    35d4:	08 f4       	brcc	.+2      	; 0x35d8 <H_KeyPad_U8_KeyPadRead+0x252>
    35d6:	55 cf       	rjmp	.-342    	; 0x3482 <H_KeyPad_U8_KeyPadRead+0xfc>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    35d8:	88 89       	ldd	r24, Y+16	; 0x10
    35da:	28 2f       	mov	r18, r24
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	ce 01       	movw	r24, r28
    35e0:	42 96       	adiw	r24, 0x12	; 18
    35e2:	fc 01       	movw	r30, r24
    35e4:	e2 0f       	add	r30, r18
    35e6:	f3 1f       	adc	r31, r19
    35e8:	80 81       	ld	r24, Z
    35ea:	61 e0       	ldi	r22, 0x01	; 1
    35ec:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter < 3 ; Local_U8_RowCounter++)
    35f0:	88 89       	ldd	r24, Y+16	; 0x10
    35f2:	8f 5f       	subi	r24, 0xFF	; 255
    35f4:	88 8b       	std	Y+16, r24	; 0x10
    35f6:	88 89       	ldd	r24, Y+16	; 0x10
    35f8:	83 30       	cpi	r24, 0x03	; 3
    35fa:	08 f4       	brcc	.+2      	; 0x35fe <H_KeyPad_U8_KeyPadRead+0x278>
    35fc:	34 cf       	rjmp	.-408    	; 0x3466 <H_KeyPad_U8_KeyPadRead+0xe0>

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
    35fe:	89 89       	ldd	r24, Y+17	; 0x11
}
    3600:	af 96       	adiw	r28, 0x2f	; 47
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    361a:	84 e2       	ldi	r24, 0x24	; 36
    361c:	61 e0       	ldi	r22, 0x01	; 1
    361e:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>
}
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    3630:	84 e2       	ldi	r24, 0x24	; 36
    3632:	61 e0       	ldi	r22, 0x01	; 1
    3634:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
}
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    3646:	84 e2       	ldi	r24, 0x24	; 36
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
}
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
    365c:	84 e2       	ldi	r24, 0x24	; 36
    365e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <M_DIO_Void_TogPin>
}
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	2e 97       	sbiw	r28, 0x0e	; 14
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    367c:	84 e2       	ldi	r24, 0x24	; 36
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	a0 ea       	ldi	r26, 0xA0	; 160
    368a:	b2 e4       	ldi	r27, 0x42	; 66
    368c:	8b 87       	std	Y+11, r24	; 0x0b
    368e:	9c 87       	std	Y+12, r25	; 0x0c
    3690:	ad 87       	std	Y+13, r26	; 0x0d
    3692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3694:	6b 85       	ldd	r22, Y+11	; 0x0b
    3696:	7c 85       	ldd	r23, Y+12	; 0x0c
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a e7       	ldi	r20, 0x7A	; 122
    36a2:	55 e4       	ldi	r21, 0x45	; 69
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8f 83       	std	Y+7, r24	; 0x07
    36ae:	98 87       	std	Y+8, r25	; 0x08
    36b0:	a9 87       	std	Y+9, r26	; 0x09
    36b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36b4:	6f 81       	ldd	r22, Y+7	; 0x07
    36b6:	78 85       	ldd	r23, Y+8	; 0x08
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e8       	ldi	r20, 0x80	; 128
    36c2:	5f e3       	ldi	r21, 0x3F	; 63
    36c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36c8:	88 23       	and	r24, r24
    36ca:	2c f4       	brge	.+10     	; 0x36d6 <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9e 83       	std	Y+6, r25	; 0x06
    36d2:	8d 83       	std	Y+5, r24	; 0x05
    36d4:	3f c0       	rjmp	.+126    	; 0x3754 <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    36d6:	6f 81       	ldd	r22, Y+7	; 0x07
    36d8:	78 85       	ldd	r23, Y+8	; 0x08
    36da:	89 85       	ldd	r24, Y+9	; 0x09
    36dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	3f ef       	ldi	r19, 0xFF	; 255
    36e2:	4f e7       	ldi	r20, 0x7F	; 127
    36e4:	57 e4       	ldi	r21, 0x47	; 71
    36e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ea:	18 16       	cp	r1, r24
    36ec:	4c f5       	brge	.+82     	; 0x3740 <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e2       	ldi	r20, 0x20	; 32
    36fc:	51 e4       	ldi	r21, 0x41	; 65
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
    3716:	0f c0       	rjmp	.+30     	; 0x3736 <H_Buzzer_Void_BuzzerOnce+0xce>
    3718:	80 e9       	ldi	r24, 0x90	; 144
    371a:	91 e0       	ldi	r25, 0x01	; 1
    371c:	9c 83       	std	Y+4, r25	; 0x04
    371e:	8b 83       	std	Y+3, r24	; 0x03
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <H_Buzzer_Void_BuzzerOnce+0xbc>
    3728:	9c 83       	std	Y+4, r25	; 0x04
    372a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	9e 83       	std	Y+6, r25	; 0x06
    3734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	9e 81       	ldd	r25, Y+6	; 0x06
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	69 f7       	brne	.-38     	; 0x3718 <H_Buzzer_Void_BuzzerOnce+0xb0>
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	6f 81       	ldd	r22, Y+7	; 0x07
    3742:	78 85       	ldd	r23, Y+8	; 0x08
    3744:	89 85       	ldd	r24, Y+9	; 0x09
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9e 83       	std	Y+6, r25	; 0x06
    3752:	8d 83       	std	Y+5, r24	; 0x05
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	9e 81       	ldd	r25, Y+6	; 0x06
    3758:	9a 83       	std	Y+2, r25	; 0x02
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <H_Buzzer_Void_BuzzerOnce+0xf8>
    3764:	9a 83       	std	Y+2, r25	; 0x02
    3766:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    3768:	84 e2       	ldi	r24, 0x24	; 36
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
}
    3770:	2e 96       	adiw	r28, 0x0e	; 14
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	aa 97       	sbiw	r28, 0x2a	; 42
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    3796:	84 e2       	ldi	r24, 0x24	; 36
    3798:	61 e0       	ldi	r22, 0x01	; 1
    379a:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	a0 ea       	ldi	r26, 0xA0	; 160
    37a4:	b2 e4       	ldi	r27, 0x42	; 66
    37a6:	8f a3       	std	Y+39, r24	; 0x27
    37a8:	98 a7       	std	Y+40, r25	; 0x28
    37aa:	a9 a7       	std	Y+41, r26	; 0x29
    37ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ae:	6f a1       	ldd	r22, Y+39	; 0x27
    37b0:	78 a5       	ldd	r23, Y+40	; 0x28
    37b2:	89 a5       	ldd	r24, Y+41	; 0x29
    37b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	4a e7       	ldi	r20, 0x7A	; 122
    37bc:	55 e4       	ldi	r21, 0x45	; 69
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	8b a3       	std	Y+35, r24	; 0x23
    37c8:	9c a3       	std	Y+36, r25	; 0x24
    37ca:	ad a3       	std	Y+37, r26	; 0x25
    37cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ce:	6b a1       	ldd	r22, Y+35	; 0x23
    37d0:	7c a1       	ldd	r23, Y+36	; 0x24
    37d2:	8d a1       	ldd	r24, Y+37	; 0x25
    37d4:	9e a1       	ldd	r25, Y+38	; 0x26
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e8       	ldi	r20, 0x80	; 128
    37dc:	5f e3       	ldi	r21, 0x3F	; 63
    37de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37e2:	88 23       	and	r24, r24
    37e4:	2c f4       	brge	.+10     	; 0x37f0 <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9a a3       	std	Y+34, r25	; 0x22
    37ec:	89 a3       	std	Y+33, r24	; 0x21
    37ee:	3f c0       	rjmp	.+126    	; 0x386e <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
    37f0:	6b a1       	ldd	r22, Y+35	; 0x23
    37f2:	7c a1       	ldd	r23, Y+36	; 0x24
    37f4:	8d a1       	ldd	r24, Y+37	; 0x25
    37f6:	9e a1       	ldd	r25, Y+38	; 0x26
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	3f ef       	ldi	r19, 0xFF	; 255
    37fc:	4f e7       	ldi	r20, 0x7F	; 127
    37fe:	57 e4       	ldi	r21, 0x47	; 71
    3800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3804:	18 16       	cp	r1, r24
    3806:	4c f5       	brge	.+82     	; 0x385a <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	6f a1       	ldd	r22, Y+39	; 0x27
    380a:	78 a5       	ldd	r23, Y+40	; 0x28
    380c:	89 a5       	ldd	r24, Y+41	; 0x29
    380e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e2       	ldi	r20, 0x20	; 32
    3816:	51 e4       	ldi	r21, 0x41	; 65
    3818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	9a a3       	std	Y+34, r25	; 0x22
    382e:	89 a3       	std	Y+33, r24	; 0x21
    3830:	0f c0       	rjmp	.+30     	; 0x3850 <H_Buzzer_Void_BuzzerTwice+0xce>
    3832:	80 e9       	ldi	r24, 0x90	; 144
    3834:	91 e0       	ldi	r25, 0x01	; 1
    3836:	98 a3       	std	Y+32, r25	; 0x20
    3838:	8f 8f       	std	Y+31, r24	; 0x1f
    383a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    383c:	98 a1       	ldd	r25, Y+32	; 0x20
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <H_Buzzer_Void_BuzzerTwice+0xbc>
    3842:	98 a3       	std	Y+32, r25	; 0x20
    3844:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3846:	89 a1       	ldd	r24, Y+33	; 0x21
    3848:	9a a1       	ldd	r25, Y+34	; 0x22
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3850:	89 a1       	ldd	r24, Y+33	; 0x21
    3852:	9a a1       	ldd	r25, Y+34	; 0x22
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	69 f7       	brne	.-38     	; 0x3832 <H_Buzzer_Void_BuzzerTwice+0xb0>
    3858:	14 c0       	rjmp	.+40     	; 0x3882 <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385a:	6b a1       	ldd	r22, Y+35	; 0x23
    385c:	7c a1       	ldd	r23, Y+36	; 0x24
    385e:	8d a1       	ldd	r24, Y+37	; 0x25
    3860:	9e a1       	ldd	r25, Y+38	; 0x26
    3862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	9a a3       	std	Y+34, r25	; 0x22
    386c:	89 a3       	std	Y+33, r24	; 0x21
    386e:	89 a1       	ldd	r24, Y+33	; 0x21
    3870:	9a a1       	ldd	r25, Y+34	; 0x22
    3872:	9e 8f       	std	Y+30, r25	; 0x1e
    3874:	8d 8f       	std	Y+29, r24	; 0x1d
    3876:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3878:	9e 8d       	ldd	r25, Y+30	; 0x1e
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <H_Buzzer_Void_BuzzerTwice+0xf8>
    387e:	9e 8f       	std	Y+30, r25	; 0x1e
    3880:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    3882:	84 e2       	ldi	r24, 0x24	; 36
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e7       	ldi	r26, 0x70	; 112
    3890:	b2 e4       	ldi	r27, 0x42	; 66
    3892:	89 8f       	std	Y+25, r24	; 0x19
    3894:	9a 8f       	std	Y+26, r25	; 0x1a
    3896:	ab 8f       	std	Y+27, r26	; 0x1b
    3898:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	69 8d       	ldd	r22, Y+25	; 0x19
    389c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    389e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a e7       	ldi	r20, 0x7A	; 122
    38a8:	55 e4       	ldi	r21, 0x45	; 69
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	8d 8b       	std	Y+21, r24	; 0x15
    38b4:	9e 8b       	std	Y+22, r25	; 0x16
    38b6:	af 8b       	std	Y+23, r26	; 0x17
    38b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38ba:	6d 89       	ldd	r22, Y+21	; 0x15
    38bc:	7e 89       	ldd	r23, Y+22	; 0x16
    38be:	8f 89       	ldd	r24, Y+23	; 0x17
    38c0:	98 8d       	ldd	r25, Y+24	; 0x18
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e8       	ldi	r20, 0x80	; 128
    38c8:	5f e3       	ldi	r21, 0x3F	; 63
    38ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ce:	88 23       	and	r24, r24
    38d0:	2c f4       	brge	.+10     	; 0x38dc <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9c 8b       	std	Y+20, r25	; 0x14
    38d8:	8b 8b       	std	Y+19, r24	; 0x13
    38da:	3f c0       	rjmp	.+126    	; 0x395a <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
    38dc:	6d 89       	ldd	r22, Y+21	; 0x15
    38de:	7e 89       	ldd	r23, Y+22	; 0x16
    38e0:	8f 89       	ldd	r24, Y+23	; 0x17
    38e2:	98 8d       	ldd	r25, Y+24	; 0x18
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
    38e8:	4f e7       	ldi	r20, 0x7F	; 127
    38ea:	57 e4       	ldi	r21, 0x47	; 71
    38ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f0:	18 16       	cp	r1, r24
    38f2:	4c f5       	brge	.+82     	; 0x3946 <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	69 8d       	ldd	r22, Y+25	; 0x19
    38f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9c 8b       	std	Y+20, r25	; 0x14
    391a:	8b 8b       	std	Y+19, r24	; 0x13
    391c:	0f c0       	rjmp	.+30     	; 0x393c <H_Buzzer_Void_BuzzerTwice+0x1ba>
    391e:	80 e9       	ldi	r24, 0x90	; 144
    3920:	91 e0       	ldi	r25, 0x01	; 1
    3922:	9a 8b       	std	Y+18, r25	; 0x12
    3924:	89 8b       	std	Y+17, r24	; 0x11
    3926:	89 89       	ldd	r24, Y+17	; 0x11
    3928:	9a 89       	ldd	r25, Y+18	; 0x12
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <H_Buzzer_Void_BuzzerTwice+0x1a8>
    392e:	9a 8b       	std	Y+18, r25	; 0x12
    3930:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	8b 89       	ldd	r24, Y+19	; 0x13
    3934:	9c 89       	ldd	r25, Y+20	; 0x14
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	9c 8b       	std	Y+20, r25	; 0x14
    393a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393c:	8b 89       	ldd	r24, Y+19	; 0x13
    393e:	9c 89       	ldd	r25, Y+20	; 0x14
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	69 f7       	brne	.-38     	; 0x391e <H_Buzzer_Void_BuzzerTwice+0x19c>
    3944:	14 c0       	rjmp	.+40     	; 0x396e <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	6d 89       	ldd	r22, Y+21	; 0x15
    3948:	7e 89       	ldd	r23, Y+22	; 0x16
    394a:	8f 89       	ldd	r24, Y+23	; 0x17
    394c:	98 8d       	ldd	r25, Y+24	; 0x18
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	9c 89       	ldd	r25, Y+20	; 0x14
    395e:	98 8b       	std	Y+16, r25	; 0x10
    3960:	8f 87       	std	Y+15, r24	; 0x0f
    3962:	8f 85       	ldd	r24, Y+15	; 0x0f
    3964:	98 89       	ldd	r25, Y+16	; 0x10
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <H_Buzzer_Void_BuzzerTwice+0x1e4>
    396a:	98 8b       	std	Y+16, r25	; 0x10
    396c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    396e:	84 e2       	ldi	r24, 0x24	; 36
    3970:	61 e0       	ldi	r22, 0x01	; 1
    3972:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	a0 ea       	ldi	r26, 0xA0	; 160
    397c:	b2 e4       	ldi	r27, 0x42	; 66
    397e:	8b 87       	std	Y+11, r24	; 0x0b
    3980:	9c 87       	std	Y+12, r25	; 0x0c
    3982:	ad 87       	std	Y+13, r26	; 0x0d
    3984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3986:	6b 85       	ldd	r22, Y+11	; 0x0b
    3988:	7c 85       	ldd	r23, Y+12	; 0x0c
    398a:	8d 85       	ldd	r24, Y+13	; 0x0d
    398c:	9e 85       	ldd	r25, Y+14	; 0x0e
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	4a e7       	ldi	r20, 0x7A	; 122
    3994:	55 e4       	ldi	r21, 0x45	; 69
    3996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	8f 83       	std	Y+7, r24	; 0x07
    39a0:	98 87       	std	Y+8, r25	; 0x08
    39a2:	a9 87       	std	Y+9, r26	; 0x09
    39a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39a6:	6f 81       	ldd	r22, Y+7	; 0x07
    39a8:	78 85       	ldd	r23, Y+8	; 0x08
    39aa:	89 85       	ldd	r24, Y+9	; 0x09
    39ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e8       	ldi	r20, 0x80	; 128
    39b4:	5f e3       	ldi	r21, 0x3F	; 63
    39b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ba:	88 23       	and	r24, r24
    39bc:	2c f4       	brge	.+10     	; 0x39c8 <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	9e 83       	std	Y+6, r25	; 0x06
    39c4:	8d 83       	std	Y+5, r24	; 0x05
    39c6:	3f c0       	rjmp	.+126    	; 0x3a46 <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    39c8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ca:	78 85       	ldd	r23, Y+8	; 0x08
    39cc:	89 85       	ldd	r24, Y+9	; 0x09
    39ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	3f ef       	ldi	r19, 0xFF	; 255
    39d4:	4f e7       	ldi	r20, 0x7F	; 127
    39d6:	57 e4       	ldi	r21, 0x47	; 71
    39d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39dc:	18 16       	cp	r1, r24
    39de:	4c f5       	brge	.+82     	; 0x3a32 <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e2       	ldi	r20, 0x20	; 32
    39ee:	51 e4       	ldi	r21, 0x41	; 65
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9e 83       	std	Y+6, r25	; 0x06
    3a06:	8d 83       	std	Y+5, r24	; 0x05
    3a08:	0f c0       	rjmp	.+30     	; 0x3a28 <H_Buzzer_Void_BuzzerTwice+0x2a6>
    3a0a:	80 e9       	ldi	r24, 0x90	; 144
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	9c 83       	std	Y+4, r25	; 0x04
    3a10:	8b 83       	std	Y+3, r24	; 0x03
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	9c 81       	ldd	r25, Y+4	; 0x04
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <H_Buzzer_Void_BuzzerTwice+0x294>
    3a1a:	9c 83       	std	Y+4, r25	; 0x04
    3a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a20:	9e 81       	ldd	r25, Y+6	; 0x06
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a28:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	69 f7       	brne	.-38     	; 0x3a0a <H_Buzzer_Void_BuzzerTwice+0x288>
    3a30:	14 c0       	rjmp	.+40     	; 0x3a5a <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a32:	6f 81       	ldd	r22, Y+7	; 0x07
    3a34:	78 85       	ldd	r23, Y+8	; 0x08
    3a36:	89 85       	ldd	r24, Y+9	; 0x09
    3a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	8d 83       	std	Y+5, r24	; 0x05
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <H_Buzzer_Void_BuzzerTwice+0x2d0>
    3a56:	9a 83       	std	Y+2, r25	; 0x02
    3a58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    3a5a:	84 e2       	ldi	r24, 0x24	; 36
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
}
    3a62:	aa 96       	adiw	r28, 0x2a	; 42
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <A_Void_Exceed_Speed_Limit>:
u8 	g_Speed_Range	     = 0 ;
u16 g_KM_Counter		= 0 ;
u8 	g_LCD_Update_Pages	= 1 ;

void A_Void_Exceed_Speed_Limit(void)
{
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0 ;
	counter ++ ;
    3a7c:	80 91 37 02 	lds	r24, 0x0237
    3a80:	8f 5f       	subi	r24, 0xFF	; 255
    3a82:	80 93 37 02 	sts	0x0237, r24
	if ((g_Speed_Limit_State == SPD_LIM_ON) && (g_Speed > g_Speed_Limit))
    3a86:	80 91 27 02 	lds	r24, 0x0227
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	e1 f4       	brne	.+56     	; 0x3ac6 <A_Void_Exceed_Speed_Limit+0x52>
    3a8e:	80 91 2f 02 	lds	r24, 0x022F
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	80 91 2c 02 	lds	r24, 0x022C
    3a9a:	90 91 2d 02 	lds	r25, 0x022D
    3a9e:	28 17       	cp	r18, r24
    3aa0:	39 07       	cpc	r19, r25
    3aa2:	88 f4       	brcc	.+34     	; 0x3ac6 <A_Void_Exceed_Speed_Limit+0x52>
	{
		if(counter % 2 == 0)
    3aa4:	80 91 37 02 	lds	r24, 0x0237
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	81 70       	andi	r24, 0x01	; 1
    3aae:	90 70       	andi	r25, 0x00	; 0
    3ab0:	00 97       	sbiw	r24, 0x00	; 0
    3ab2:	29 f4       	brne	.+10     	; 0x3abe <A_Void_Exceed_Speed_Limit+0x4a>
		{
			M_DIO_Void_SetPinValue(RELAY_PIN,HIGH) ;
    3ab4:	85 e2       	ldi	r24, 0x25	; 37
    3ab6:	61 e0       	ldi	r22, 0x01	; 1
    3ab8:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <A_Void_Exceed_Speed_Limit+0x52>
		}
		else
		{
			M_DIO_Void_SetPinValue(RELAY_PIN,LOW) ;
    3abe:	85 e2       	ldi	r24, 0x25	; 37
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	0e 94 b5 0b 	call	0x176a	; 0x176a <M_DIO_Void_SetPinValue>
		}
	}
	/*speed limiter decrement*/
	if (Button == '2')
    3ac6:	80 91 08 02 	lds	r24, 0x0208
    3aca:	82 33       	cpi	r24, 0x32	; 50
    3acc:	49 f4       	brne	.+18     	; 0x3ae0 <A_Void_Exceed_Speed_Limit+0x6c>
	{
		if(g_Speed_Limit > 0)
    3ace:	80 91 2f 02 	lds	r24, 0x022F
    3ad2:	88 23       	and	r24, r24
    3ad4:	29 f0       	breq	.+10     	; 0x3ae0 <A_Void_Exceed_Speed_Limit+0x6c>
		{
			g_Speed_Limit -= 5 ;
    3ad6:	80 91 2f 02 	lds	r24, 0x022F
    3ada:	85 50       	subi	r24, 0x05	; 5
    3adc:	80 93 2f 02 	sts	0x022F, r24
		}
	}
	/*speed limiter increment*/
	if (Button == '3')
    3ae0:	80 91 08 02 	lds	r24, 0x0208
    3ae4:	83 33       	cpi	r24, 0x33	; 51
    3ae6:	49 f4       	brne	.+18     	; 0x3afa <A_Void_Exceed_Speed_Limit+0x86>
	{
		if(g_Speed_Limit < 100)
    3ae8:	80 91 2f 02 	lds	r24, 0x022F
    3aec:	84 36       	cpi	r24, 0x64	; 100
    3aee:	28 f4       	brcc	.+10     	; 0x3afa <A_Void_Exceed_Speed_Limit+0x86>
		{
			g_Speed_Limit += 5 ;
    3af0:	80 91 2f 02 	lds	r24, 0x022F
    3af4:	8b 5f       	subi	r24, 0xFB	; 251
    3af6:	80 93 2f 02 	sts	0x022F, r24
		}
	}
	if (counter == 10)
    3afa:	80 91 37 02 	lds	r24, 0x0237
    3afe:	8a 30       	cpi	r24, 0x0A	; 10
    3b00:	41 f4       	brne	.+16     	; 0x3b12 <A_Void_Exceed_Speed_Limit+0x9e>
	{
		if (GearBox_State == GEARBOX_D)
    3b02:	80 91 28 02 	lds	r24, 0x0228
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	11 f4       	brne	.+4      	; 0x3b0e <A_Void_Exceed_Speed_Limit+0x9a>
		{
			flag_for_DM = DRIVER_SLEEP ;
    3b0a:	10 92 09 02 	sts	0x0209, r1
		}
		counter = 0 ;
    3b0e:	10 92 37 02 	sts	0x0237, r1
	}

	if (counter %2 == 0)
    3b12:	80 91 37 02 	lds	r24, 0x0237
    3b16:	88 2f       	mov	r24, r24
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	81 70       	andi	r24, 0x01	; 1
    3b1c:	90 70       	andi	r25, 0x00	; 0
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	c9 f5       	brne	.+114    	; 0x3b94 <A_Void_Exceed_Speed_Limit+0x120>
	{
		g_KM_Counter += g_Speed_Range ;
    3b22:	80 91 34 02 	lds	r24, 0x0234
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	80 91 35 02 	lds	r24, 0x0235
    3b2e:	90 91 36 02 	lds	r25, 0x0236
    3b32:	82 0f       	add	r24, r18
    3b34:	93 1f       	adc	r25, r19
    3b36:	90 93 36 02 	sts	0x0236, r25
    3b3a:	80 93 35 02 	sts	0x0235, r24
		seconds ++ ;
    3b3e:	80 91 30 02 	lds	r24, 0x0230
    3b42:	90 91 31 02 	lds	r25, 0x0231
    3b46:	a0 91 32 02 	lds	r26, 0x0232
    3b4a:	b0 91 33 02 	lds	r27, 0x0233
    3b4e:	01 96       	adiw	r24, 0x01	; 1
    3b50:	a1 1d       	adc	r26, r1
    3b52:	b1 1d       	adc	r27, r1
    3b54:	80 93 30 02 	sts	0x0230, r24
    3b58:	90 93 31 02 	sts	0x0231, r25
    3b5c:	a0 93 32 02 	sts	0x0232, r26
    3b60:	b0 93 33 02 	sts	0x0233, r27
		if (seconds == 86400)
    3b64:	80 91 30 02 	lds	r24, 0x0230
    3b68:	90 91 31 02 	lds	r25, 0x0231
    3b6c:	a0 91 32 02 	lds	r26, 0x0232
    3b70:	b0 91 33 02 	lds	r27, 0x0233
    3b74:	80 38       	cpi	r24, 0x80	; 128
    3b76:	21 e5       	ldi	r18, 0x51	; 81
    3b78:	92 07       	cpc	r25, r18
    3b7a:	21 e0       	ldi	r18, 0x01	; 1
    3b7c:	a2 07       	cpc	r26, r18
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	b2 07       	cpc	r27, r18
    3b82:	41 f4       	brne	.+16     	; 0x3b94 <A_Void_Exceed_Speed_Limit+0x120>
		{
			seconds = 0 ;
    3b84:	10 92 30 02 	sts	0x0230, r1
    3b88:	10 92 31 02 	sts	0x0231, r1
    3b8c:	10 92 32 02 	sts	0x0232, r1
    3b90:	10 92 33 02 	sts	0x0233, r1
		}
	}
}
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	08 95       	ret

00003b9a <A_Void_Init_System>:

void A_Void_Init_System(void)
{
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
	M_ADC_Void_ADCInit();
    3ba2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <M_ADC_Void_ADCInit>

	H_KeyPad_Void_KeyPadInit();
    3ba6:	0e 94 98 19 	call	0x3330	; 0x3330 <H_KeyPad_Void_KeyPadInit>

	H_PushButton_Void_PushButtonInit(BRAKE_PEDAL);
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <H_PushButton_Void_PushButtonInit>


	H_LED_Void_LedInit(BRAKE_LED);
    3bb0:	84 e0       	ldi	r24, 0x04	; 4
    3bb2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <H_LED_Void_LedInit>
	H_LED_Void_LedInit(ALARM_LED);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <H_LED_Void_LedInit>

	H_Buzzer_Void_BuzzerInit();
    3bbc:	0e 94 09 1b 	call	0x3612	; 0x3612 <H_Buzzer_Void_BuzzerInit>

	H_Lcd_Void_LCDInit();
    3bc0:	0e 94 13 14 	call	0x2826	; 0x2826 <H_Lcd_Void_LCDInit>

	M_DIO_Void_SetPinDirection(RELAY_PIN,OUTPUT);
    3bc4:	85 e2       	ldi	r24, 0x25	; 37
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	0e 94 9f 0a 	call	0x153e	; 0x153e <M_DIO_Void_SetPinDirection>

	M_Timer_Void_TimerInit();
    3bcc:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_Timer_Void_TimerInit>
	M_Timer_Void_TimerSetTime(500);
    3bd0:	64 ef       	ldi	r22, 0xF4	; 244
    3bd2:	71 e0       	ldi	r23, 0x01	; 1
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 3a 07 	call	0xe74	; 0xe74 <M_Timer_Void_TimerSetTime>
	M_Timer_Void_SetCallBack(A_Void_Exceed_Speed_Limit);
    3bdc:	8a e3       	ldi	r24, 0x3A	; 58
    3bde:	9d e1       	ldi	r25, 0x1D	; 29
    3be0:	0e 94 10 09 	call	0x1220	; 0x1220 <M_Timer_Void_SetCallBack>
	M_Timer_Void_TimerStart(TIMER0_CHANNEL) ;
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_Timer_Void_TimerStart>
}
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	08 95       	ret

00003bf0 <A_Void_Keypad_Check_State>:

void A_Void_Keypad_Check_State(void)
{
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <A_Void_Keypad_Check_State+0x6>
    3bf6:	cd b7       	in	r28, 0x3d	; 61
    3bf8:	de b7       	in	r29, 0x3e	; 62
	Button = H_KeyPad_U8_KeyPadRead() ;
    3bfa:	0e 94 c3 19 	call	0x3386	; 0x3386 <H_KeyPad_U8_KeyPadRead>
    3bfe:	80 93 08 02 	sts	0x0208, r24
	switch(Button)
    3c02:	80 91 08 02 	lds	r24, 0x0208
    3c06:	28 2f       	mov	r18, r24
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	3a 83       	std	Y+2, r19	; 0x02
    3c0c:	29 83       	std	Y+1, r18	; 0x01
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	86 33       	cpi	r24, 0x36	; 54
    3c14:	91 05       	cpc	r25, r1
    3c16:	b9 f1       	breq	.+110    	; 0x3c86 <A_Void_Keypad_Check_State+0x96>
    3c18:	29 81       	ldd	r18, Y+1	; 0x01
    3c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c1c:	27 33       	cpi	r18, 0x37	; 55
    3c1e:	31 05       	cpc	r19, r1
    3c20:	84 f4       	brge	.+32     	; 0x3c42 <A_Void_Keypad_Check_State+0x52>
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	84 33       	cpi	r24, 0x34	; 52
    3c28:	91 05       	cpc	r25, r1
    3c2a:	09 f1       	breq	.+66     	; 0x3c6e <A_Void_Keypad_Check_State+0x7e>
    3c2c:	29 81       	ldd	r18, Y+1	; 0x01
    3c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c30:	25 33       	cpi	r18, 0x35	; 53
    3c32:	31 05       	cpc	r19, r1
    3c34:	14 f5       	brge	.+68     	; 0x3c7a <A_Void_Keypad_Check_State+0x8a>
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3a:	81 33       	cpi	r24, 0x31	; 49
    3c3c:	91 05       	cpc	r25, r1
    3c3e:	89 f0       	breq	.+34     	; 0x3c62 <A_Void_Keypad_Check_State+0x72>
    3c40:	34 c0       	rjmp	.+104    	; 0x3caa <A_Void_Keypad_Check_State+0xba>
    3c42:	29 81       	ldd	r18, Y+1	; 0x01
    3c44:	3a 81       	ldd	r19, Y+2	; 0x02
    3c46:	28 33       	cpi	r18, 0x38	; 56
    3c48:	31 05       	cpc	r19, r1
    3c4a:	49 f1       	breq	.+82     	; 0x3c9e <A_Void_Keypad_Check_State+0xae>
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	88 33       	cpi	r24, 0x38	; 56
    3c52:	91 05       	cpc	r25, r1
    3c54:	f4 f0       	brlt	.+60     	; 0x3c92 <A_Void_Keypad_Check_State+0xa2>
    3c56:	29 81       	ldd	r18, Y+1	; 0x01
    3c58:	3a 81       	ldd	r19, Y+2	; 0x02
    3c5a:	29 33       	cpi	r18, 0x39	; 57
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	41 f1       	breq	.+80     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
    3c60:	24 c0       	rjmp	.+72     	; 0x3caa <A_Void_Keypad_Check_State+0xba>
	{
	case '1' :
		/* Speed Limit ON/OFF */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	80 93 09 02 	sts	0x0209, r24
		A_Void_SpeedLimiter_Switch_State();
    3c68:	0e 94 f6 25 	call	0x4bec	; 0x4bec <A_Void_SpeedLimiter_Switch_State>
    3c6c:	21 c0       	rjmp	.+66     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '4' :
		/* CCS ON/OFF */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	80 93 09 02 	sts	0x0209, r24
		A_Void_CCS_Check_Task();
    3c74:	0e 94 75 24 	call	0x48ea	; 0x48ea <A_Void_CCS_Check_Task>
    3c78:	1b c0       	rjmp	.+54     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '5' :
		/* BAS ON/OFF */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	80 93 09 02 	sts	0x0209, r24
		A_Void_BAS_Check_Task();
    3c80:	0e 94 34 25 	call	0x4a68	; 0x4a68 <A_Void_BAS_Check_Task>
    3c84:	15 c0       	rjmp	.+42     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '6' :
		/* Changing Gear Box */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	80 93 09 02 	sts	0x0209, r24
		A_Void_GearBox_Check_Task();
    3c8c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <A_Void_GearBox_Check_Task>
    3c90:	0f c0       	rjmp	.+30     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '7' :
		/* LCD Left */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	80 93 09 02 	sts	0x0209, r24
		A_Void_LCD_Left();
    3c98:	0e 94 48 23 	call	0x4690	; 0x4690 <A_Void_LCD_Left>
    3c9c:	09 c0       	rjmp	.+18     	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '8' :
		/* LCD Right */
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	80 93 09 02 	sts	0x0209, r24
		A_Void_LCD_Right();
    3ca4:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <A_Void_LCD_Right>
    3ca8:	03 c0       	rjmp	.+6      	; 0x3cb0 <A_Void_Keypad_Check_State+0xc0>
		break;
	case '9' :
		break;
	default :
		H_LED_Void_LedOff(ALARM_LED);
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	0e 94 75 11 	call	0x22ea	; 0x22ea <H_LED_Void_LedOff>
		break;
	}
}
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <A_Void_BrakeLED_Check_State>:

void A_Void_BrakeLED_Check_State(void)
{
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
	if(H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_PRESSED)
    3cc2:	83 e0       	ldi	r24, 0x03	; 3
    3cc4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <H_PushButton_U8_PushButtonRead>
    3cc8:	88 23       	and	r24, r24
    3cca:	39 f4       	brne	.+14     	; 0x3cda <A_Void_BrakeLED_Check_State+0x20>
	{
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	80 93 09 02 	sts	0x0209, r24
		H_LED_Void_LedOn(BRAKE_LED);
    3cd2:	84 e0       	ldi	r24, 0x04	; 4
    3cd4:	0e 94 35 11 	call	0x226a	; 0x226a <H_LED_Void_LedOn>
    3cd8:	03 c0       	rjmp	.+6      	; 0x3ce0 <A_Void_BrakeLED_Check_State+0x26>
	}
	else
	{
		H_LED_Void_LedOff(BRAKE_LED);
    3cda:	84 e0       	ldi	r24, 0x04	; 4
    3cdc:	0e 94 75 11 	call	0x22ea	; 0x22ea <H_LED_Void_LedOff>
	}
}
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	08 95       	ret

00003ce6 <A_Void_LCD_Display>:

void A_Void_LCD_Display(void)
{
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	00 d0       	rcall	.+0      	; 0x3cec <A_Void_LCD_Display+0x6>
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
	switch(g_LCD_Tab)
    3cf0:	80 91 2b 02 	lds	r24, 0x022B
    3cf4:	28 2f       	mov	r18, r24
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	3a 83       	std	Y+2, r19	; 0x02
    3cfa:	29 83       	std	Y+1, r18	; 0x01
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3d00:	81 30       	cpi	r24, 0x01	; 1
    3d02:	91 05       	cpc	r25, r1
    3d04:	c1 f0       	breq	.+48     	; 0x3d36 <A_Void_LCD_Display+0x50>
    3d06:	29 81       	ldd	r18, Y+1	; 0x01
    3d08:	3a 81       	ldd	r19, Y+2	; 0x02
    3d0a:	22 30       	cpi	r18, 0x02	; 2
    3d0c:	31 05       	cpc	r19, r1
    3d0e:	2c f4       	brge	.+10     	; 0x3d1a <A_Void_LCD_Display+0x34>
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
    3d12:	9a 81       	ldd	r25, Y+2	; 0x02
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	61 f0       	breq	.+24     	; 0x3d30 <A_Void_LCD_Display+0x4a>
    3d18:	16 c0       	rjmp	.+44     	; 0x3d46 <A_Void_LCD_Display+0x60>
    3d1a:	29 81       	ldd	r18, Y+1	; 0x01
    3d1c:	3a 81       	ldd	r19, Y+2	; 0x02
    3d1e:	22 30       	cpi	r18, 0x02	; 2
    3d20:	31 05       	cpc	r19, r1
    3d22:	61 f0       	breq	.+24     	; 0x3d3c <A_Void_LCD_Display+0x56>
    3d24:	89 81       	ldd	r24, Y+1	; 0x01
    3d26:	9a 81       	ldd	r25, Y+2	; 0x02
    3d28:	83 30       	cpi	r24, 0x03	; 3
    3d2a:	91 05       	cpc	r25, r1
    3d2c:	51 f0       	breq	.+20     	; 0x3d42 <A_Void_LCD_Display+0x5c>
    3d2e:	0b c0       	rjmp	.+22     	; 0x3d46 <A_Void_LCD_Display+0x60>
	{
	case LCD_TAB_1 :
		A_Void_LCD_Screen1_Display();
    3d30:	0e 94 4e 21 	call	0x429c	; 0x429c <A_Void_LCD_Screen1_Display>
    3d34:	08 c0       	rjmp	.+16     	; 0x3d46 <A_Void_LCD_Display+0x60>
		break;
	case LCD_TAB_2 :
		A_Void_LCD_Screen2_Display();
    3d36:	0e 94 0f 22 	call	0x441e	; 0x441e <A_Void_LCD_Screen2_Display>
    3d3a:	05 c0       	rjmp	.+10     	; 0x3d46 <A_Void_LCD_Display+0x60>
		break;
	case LCD_TAB_3 :
		A_Void_LCD_Screen3_Display();
    3d3c:	0e 94 9d 22 	call	0x453a	; 0x453a <A_Void_LCD_Screen3_Display>
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <A_Void_LCD_Display+0x60>
		break;
	case LCD_TAB_4 :
		A_Void_LCD_Screen4_Display();
    3d42:	0e 94 25 23 	call	0x464a	; 0x464a <A_Void_LCD_Screen4_Display>
		break;
	}
}
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	08 95       	ret

00003d50 <A_Void_Speed_Check>:

void A_Void_Speed_Check(void)
{
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
	g_Speed = ((M_ADC_U16_ADCRead(ADC_CHANNEL_0) / 1023.0) * 200) ;
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <M_ADC_U16_ADCRead>
    3d5e:	cc 01       	movw	r24, r24
    3d60:	a0 e0       	ldi	r26, 0x00	; 0
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 ec       	ldi	r19, 0xC0	; 192
    3d78:	4f e7       	ldi	r20, 0x7F	; 127
    3d7a:	54 e4       	ldi	r21, 0x44	; 68
    3d7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	48 e4       	ldi	r20, 0x48	; 72
    3d8e:	53 e4       	ldi	r21, 0x43	; 67
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	bc 01       	movw	r22, r24
    3d9a:	cd 01       	movw	r24, r26
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	90 93 2d 02 	sts	0x022D, r25
    3da8:	80 93 2c 02 	sts	0x022C, r24

	if((g_Speed == g_Speed_Old + 1) || (g_Speed == g_Speed_Old - 1))
    3dac:	80 91 2e 02 	lds	r24, 0x022E
    3db0:	88 2f       	mov	r24, r24
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	01 96       	adiw	r24, 0x01	; 1
    3db6:	9c 01       	movw	r18, r24
    3db8:	80 91 2c 02 	lds	r24, 0x022C
    3dbc:	90 91 2d 02 	lds	r25, 0x022D
    3dc0:	28 17       	cp	r18, r24
    3dc2:	39 07       	cpc	r19, r25
    3dc4:	79 f1       	breq	.+94     	; 0x3e24 <A_Void_Speed_Check+0xd4>
    3dc6:	80 91 2e 02 	lds	r24, 0x022E
    3dca:	88 2f       	mov	r24, r24
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	9c 01       	movw	r18, r24
    3dd2:	80 91 2c 02 	lds	r24, 0x022C
    3dd6:	90 91 2d 02 	lds	r25, 0x022D
    3dda:	28 17       	cp	r18, r24
    3ddc:	39 07       	cpc	r19, r25
    3dde:	11 f1       	breq	.+68     	; 0x3e24 <A_Void_Speed_Check+0xd4>
	{
		/* Do Nothing */
	}
	else if(g_Speed_Old != g_Speed)
    3de0:	80 91 2e 02 	lds	r24, 0x022E
    3de4:	28 2f       	mov	r18, r24
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	80 91 2c 02 	lds	r24, 0x022C
    3dec:	90 91 2d 02 	lds	r25, 0x022D
    3df0:	28 17       	cp	r18, r24
    3df2:	39 07       	cpc	r19, r25
    3df4:	b9 f0       	breq	.+46     	; 0x3e24 <A_Void_Speed_Check+0xd4>
	{
		flag_for_DM = DRIVER_NOT_SLEEP ;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	80 93 09 02 	sts	0x0209, r24

		g_CCS_State     	= CCS_OFF    ;
    3dfc:	10 92 29 02 	sts	0x0229, r1
		if(g_LCD_Tab == LCD_TAB_2)
    3e00:	80 91 2b 02 	lds	r24, 0x022B
    3e04:	81 30       	cpi	r24, 0x01	; 1
    3e06:	41 f4       	brne	.+16     	; 0x3e18 <A_Void_Speed_Check+0xc8>
		{
			H_Lcd_Void_LCDGoTo(1, 5);
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	65 e0       	ldi	r22, 0x05	; 5
    3e0c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString((u8*)"OFF");
    3e10:	80 e6       	ldi	r24, 0x60	; 96
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		}

		g_Speed_Old = g_Speed ;
    3e18:	80 91 2c 02 	lds	r24, 0x022C
    3e1c:	90 91 2d 02 	lds	r25, 0x022D
    3e20:	80 93 2e 02 	sts	0x022E, r24
	}
	if((g_Speed > 0) && (g_Speed <= 40))
    3e24:	80 91 2c 02 	lds	r24, 0x022C
    3e28:	90 91 2d 02 	lds	r25, 0x022D
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	59 f0       	breq	.+22     	; 0x3e46 <A_Void_Speed_Check+0xf6>
    3e30:	80 91 2c 02 	lds	r24, 0x022C
    3e34:	90 91 2d 02 	lds	r25, 0x022D
    3e38:	89 32       	cpi	r24, 0x29	; 41
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	20 f4       	brcc	.+8      	; 0x3e46 <A_Void_Speed_Check+0xf6>
	{
		g_Speed_Range = RANGE_0_40 ;
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	80 93 34 02 	sts	0x0234, r24
    3e44:	4a c0       	rjmp	.+148    	; 0x3eda <A_Void_Speed_Check+0x18a>
	}
	else if((g_Speed > 40) && (g_Speed <= 80))
    3e46:	80 91 2c 02 	lds	r24, 0x022C
    3e4a:	90 91 2d 02 	lds	r25, 0x022D
    3e4e:	89 32       	cpi	r24, 0x29	; 41
    3e50:	91 05       	cpc	r25, r1
    3e52:	58 f0       	brcs	.+22     	; 0x3e6a <A_Void_Speed_Check+0x11a>
    3e54:	80 91 2c 02 	lds	r24, 0x022C
    3e58:	90 91 2d 02 	lds	r25, 0x022D
    3e5c:	81 35       	cpi	r24, 0x51	; 81
    3e5e:	91 05       	cpc	r25, r1
    3e60:	20 f4       	brcc	.+8      	; 0x3e6a <A_Void_Speed_Check+0x11a>
	{
		g_Speed_Range = RANGE_40_80 ;
    3e62:	82 e0       	ldi	r24, 0x02	; 2
    3e64:	80 93 34 02 	sts	0x0234, r24
    3e68:	38 c0       	rjmp	.+112    	; 0x3eda <A_Void_Speed_Check+0x18a>
	}
	else if((g_Speed > 80) && (g_Speed <= 120))
    3e6a:	80 91 2c 02 	lds	r24, 0x022C
    3e6e:	90 91 2d 02 	lds	r25, 0x022D
    3e72:	81 35       	cpi	r24, 0x51	; 81
    3e74:	91 05       	cpc	r25, r1
    3e76:	58 f0       	brcs	.+22     	; 0x3e8e <A_Void_Speed_Check+0x13e>
    3e78:	80 91 2c 02 	lds	r24, 0x022C
    3e7c:	90 91 2d 02 	lds	r25, 0x022D
    3e80:	89 37       	cpi	r24, 0x79	; 121
    3e82:	91 05       	cpc	r25, r1
    3e84:	20 f4       	brcc	.+8      	; 0x3e8e <A_Void_Speed_Check+0x13e>
	{
		g_Speed_Range = RANGE_80_120 ;
    3e86:	83 e0       	ldi	r24, 0x03	; 3
    3e88:	80 93 34 02 	sts	0x0234, r24
    3e8c:	26 c0       	rjmp	.+76     	; 0x3eda <A_Void_Speed_Check+0x18a>
	}
	else if((g_Speed > 120) && (g_Speed <= 160))
    3e8e:	80 91 2c 02 	lds	r24, 0x022C
    3e92:	90 91 2d 02 	lds	r25, 0x022D
    3e96:	89 37       	cpi	r24, 0x79	; 121
    3e98:	91 05       	cpc	r25, r1
    3e9a:	58 f0       	brcs	.+22     	; 0x3eb2 <A_Void_Speed_Check+0x162>
    3e9c:	80 91 2c 02 	lds	r24, 0x022C
    3ea0:	90 91 2d 02 	lds	r25, 0x022D
    3ea4:	81 3a       	cpi	r24, 0xA1	; 161
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	20 f4       	brcc	.+8      	; 0x3eb2 <A_Void_Speed_Check+0x162>
	{
		g_Speed_Range = RANGE_120_160 ;
    3eaa:	84 e0       	ldi	r24, 0x04	; 4
    3eac:	80 93 34 02 	sts	0x0234, r24
    3eb0:	14 c0       	rjmp	.+40     	; 0x3eda <A_Void_Speed_Check+0x18a>
	}
	else if((g_Speed > 160) && (g_Speed <= 200))
    3eb2:	80 91 2c 02 	lds	r24, 0x022C
    3eb6:	90 91 2d 02 	lds	r25, 0x022D
    3eba:	81 3a       	cpi	r24, 0xA1	; 161
    3ebc:	91 05       	cpc	r25, r1
    3ebe:	58 f0       	brcs	.+22     	; 0x3ed6 <A_Void_Speed_Check+0x186>
    3ec0:	80 91 2c 02 	lds	r24, 0x022C
    3ec4:	90 91 2d 02 	lds	r25, 0x022D
    3ec8:	89 3c       	cpi	r24, 0xC9	; 201
    3eca:	91 05       	cpc	r25, r1
    3ecc:	20 f4       	brcc	.+8      	; 0x3ed6 <A_Void_Speed_Check+0x186>
	{
		g_Speed_Range = RANGE_160_200 ;
    3ece:	85 e0       	ldi	r24, 0x05	; 5
    3ed0:	80 93 34 02 	sts	0x0234, r24
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <A_Void_Speed_Check+0x18a>
	}
	else
	{
		g_Speed_Range = 0 ;
    3ed6:	10 92 34 02 	sts	0x0234, r1
	}

	if(g_LCD_Tab == LCD_TAB_1)
    3eda:	80 91 2b 02 	lds	r24, 0x022B
    3ede:	88 23       	and	r24, r24
    3ee0:	09 f0       	breq	.+2      	; 0x3ee4 <A_Void_Speed_Check+0x194>
    3ee2:	40 c0       	rjmp	.+128    	; 0x3f64 <A_Void_Speed_Check+0x214>
	{
		H_Lcd_Void_LCDGoTo(0, 7);
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	67 e0       	ldi	r22, 0x07	; 7
    3ee8:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteNumber(g_Speed/100);
    3eec:	80 91 2c 02 	lds	r24, 0x022C
    3ef0:	90 91 2d 02 	lds	r25, 0x022D
    3ef4:	24 e6       	ldi	r18, 0x64	; 100
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	b9 01       	movw	r22, r18
    3efa:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    3efe:	cb 01       	movw	r24, r22
    3f00:	cc 01       	movw	r24, r24
    3f02:	a0 e0       	ldi	r26, 0x00	; 0
    3f04:	b0 e0       	ldi	r27, 0x00	; 0
    3f06:	bc 01       	movw	r22, r24
    3f08:	cd 01       	movw	r24, r26
    3f0a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_Speed%100)/10);
    3f0e:	80 91 2c 02 	lds	r24, 0x022C
    3f12:	90 91 2d 02 	lds	r25, 0x022D
    3f16:	24 e6       	ldi	r18, 0x64	; 100
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	b9 01       	movw	r22, r18
    3f1c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    3f20:	2a e0       	ldi	r18, 0x0A	; 10
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	b9 01       	movw	r22, r18
    3f26:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	cc 01       	movw	r24, r24
    3f2e:	a0 e0       	ldi	r26, 0x00	; 0
    3f30:	b0 e0       	ldi	r27, 0x00	; 0
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_Speed%100)%10));
    3f3a:	80 91 2c 02 	lds	r24, 0x022C
    3f3e:	90 91 2d 02 	lds	r25, 0x022D
    3f42:	24 e6       	ldi	r18, 0x64	; 100
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	b9 01       	movw	r22, r18
    3f48:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    3f4c:	2a e0       	ldi	r18, 0x0A	; 10
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	b9 01       	movw	r22, r18
    3f52:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    3f56:	cc 01       	movw	r24, r24
    3f58:	a0 e0       	ldi	r26, 0x00	; 0
    3f5a:	b0 e0       	ldi	r27, 0x00	; 0
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	cd 01       	movw	r24, r26
    3f60:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
	}

	if(g_LCD_Tab == LCD_TAB_1)
    3f64:	80 91 2b 02 	lds	r24, 0x022B
    3f68:	88 23       	and	r24, r24
    3f6a:	c9 f5       	brne	.+114    	; 0x3fde <A_Void_Speed_Check+0x28e>
	{
		H_Lcd_Void_LCDGoTo(1, 7);
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	67 e0       	ldi	r22, 0x07	; 7
    3f70:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteNumber(g_Speed_Limit/100);
    3f74:	80 91 2f 02 	lds	r24, 0x022F
    3f78:	94 e6       	ldi	r25, 0x64	; 100
    3f7a:	69 2f       	mov	r22, r25
    3f7c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    3f80:	88 2f       	mov	r24, r24
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	a0 e0       	ldi	r26, 0x00	; 0
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	bc 01       	movw	r22, r24
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_Speed_Limit%100)/10);
    3f90:	80 91 2f 02 	lds	r24, 0x022F
    3f94:	94 e6       	ldi	r25, 0x64	; 100
    3f96:	69 2f       	mov	r22, r25
    3f98:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    3f9c:	89 2f       	mov	r24, r25
    3f9e:	9a e0       	ldi	r25, 0x0A	; 10
    3fa0:	69 2f       	mov	r22, r25
    3fa2:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    3fa6:	88 2f       	mov	r24, r24
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	a0 e0       	ldi	r26, 0x00	; 0
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	bc 01       	movw	r22, r24
    3fb0:	cd 01       	movw	r24, r26
    3fb2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_Speed_Limit%100)%10));
    3fb6:	80 91 2f 02 	lds	r24, 0x022F
    3fba:	94 e6       	ldi	r25, 0x64	; 100
    3fbc:	69 2f       	mov	r22, r25
    3fbe:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    3fc2:	89 2f       	mov	r24, r25
    3fc4:	9a e0       	ldi	r25, 0x0A	; 10
    3fc6:	69 2f       	mov	r22, r25
    3fc8:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    3fcc:	89 2f       	mov	r24, r25
    3fce:	88 2f       	mov	r24, r24
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	a0 e0       	ldi	r26, 0x00	; 0
    3fd4:	b0 e0       	ldi	r27, 0x00	; 0
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
	}

}
    3fde:	cf 91       	pop	r28
    3fe0:	df 91       	pop	r29
    3fe2:	08 95       	ret

00003fe4 <A_Void_Drive_Monitor>:

void A_Void_Drive_Monitor (void)
{
    3fe4:	df 93       	push	r29
    3fe6:	cf 93       	push	r28
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
	if (flag_for_DM == DRIVER_NOT_SLEEP)
    3fec:	80 91 09 02 	lds	r24, 0x0209
    3ff0:	81 30       	cpi	r24, 0x01	; 1
    3ff2:	49 f4       	brne	.+18     	; 0x4006 <A_Void_Drive_Monitor+0x22>
	{
		H_Lcd_Void_LCDGoTo(2, 0) ;
    3ff4:	82 e0       	ldi	r24, 0x02	; 2
    3ff6:	60 e0       	ldi	r22, 0x00	; 0
    3ff8:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"                ") ;
    3ffc:	84 e6       	ldi	r24, 0x64	; 100
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    4004:	0c c0       	rjmp	.+24     	; 0x401e <A_Void_Drive_Monitor+0x3a>
	}
	else if (flag_for_DM == DRIVER_SLEEP)
    4006:	80 91 09 02 	lds	r24, 0x0209
    400a:	88 23       	and	r24, r24
    400c:	41 f4       	brne	.+16     	; 0x401e <A_Void_Drive_Monitor+0x3a>
	{
		H_Lcd_Void_LCDGoTo(2, 0) ;
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	60 e0       	ldi	r22, 0x00	; 0
    4012:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"You are sleeping") ;
    4016:	85 e7       	ldi	r24, 0x75	; 117
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
	}
}
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <A_Void_Display_Time>:
void A_Void_Display_Time (void)
{
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
	if (g_LCD_Tab == LCD_TAB_4)
    402c:	80 91 2b 02 	lds	r24, 0x022B
    4030:	83 30       	cpi	r24, 0x03	; 3
    4032:	09 f0       	breq	.+2      	; 0x4036 <A_Void_Display_Time+0x12>
    4034:	e4 c0       	rjmp	.+456    	; 0x41fe <A_Void_Display_Time+0x1da>
	{
		/*Second Row*/
		H_Lcd_Void_LCDGoTo(1,0);
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"Time : ");
    403e:	86 e8       	ldi	r24, 0x86	; 134
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber((seconds/3600)/10) ;
    4046:	80 91 30 02 	lds	r24, 0x0230
    404a:	90 91 31 02 	lds	r25, 0x0231
    404e:	a0 91 32 02 	lds	r26, 0x0232
    4052:	b0 91 33 02 	lds	r27, 0x0233
    4056:	20 ea       	ldi	r18, 0xA0	; 160
    4058:	3c e8       	ldi	r19, 0x8C	; 140
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    4066:	da 01       	movw	r26, r20
    4068:	c9 01       	movw	r24, r18
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((seconds/3600)%10) ;
    4072:	80 91 30 02 	lds	r24, 0x0230
    4076:	90 91 31 02 	lds	r25, 0x0231
    407a:	a0 91 32 02 	lds	r26, 0x0232
    407e:	b0 91 33 02 	lds	r27, 0x0233
    4082:	20 e1       	ldi	r18, 0x10	; 16
    4084:	3e e0       	ldi	r19, 0x0E	; 14
    4086:	40 e0       	ldi	r20, 0x00	; 0
    4088:	50 e0       	ldi	r21, 0x00	; 0
    408a:	bc 01       	movw	r22, r24
    408c:	cd 01       	movw	r24, r26
    408e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    4092:	da 01       	movw	r26, r20
    4094:	c9 01       	movw	r24, r18
    4096:	2a e0       	ldi	r18, 0x0A	; 10
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e0       	ldi	r20, 0x00	; 0
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	bc 01       	movw	r22, r24
    40ac:	cd 01       	movw	r24, r26
    40ae:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)":");
    40b2:	8e e8       	ldi	r24, 0x8E	; 142
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(((seconds%3600)/60)/10) ;
    40ba:	80 91 30 02 	lds	r24, 0x0230
    40be:	90 91 31 02 	lds	r25, 0x0231
    40c2:	a0 91 32 02 	lds	r26, 0x0232
    40c6:	b0 91 33 02 	lds	r27, 0x0233
    40ca:	20 e1       	ldi	r18, 0x10	; 16
    40cc:	3e e0       	ldi	r19, 0x0E	; 14
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	bc 01       	movw	r22, r24
    40d4:	cd 01       	movw	r24, r26
    40d6:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	28 e5       	ldi	r18, 0x58	; 88
    40e0:	32 e0       	ldi	r19, 0x02	; 2
    40e2:	40 e0       	ldi	r20, 0x00	; 0
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    40ee:	da 01       	movw	r26, r20
    40f0:	c9 01       	movw	r24, r18
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((seconds%3600)/60)%10) ;
    40fa:	80 91 30 02 	lds	r24, 0x0230
    40fe:	90 91 31 02 	lds	r25, 0x0231
    4102:	a0 91 32 02 	lds	r26, 0x0232
    4106:	b0 91 33 02 	lds	r27, 0x0233
    410a:	20 e1       	ldi	r18, 0x10	; 16
    410c:	3e e0       	ldi	r19, 0x0E	; 14
    410e:	40 e0       	ldi	r20, 0x00	; 0
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	2c e3       	ldi	r18, 0x3C	; 60
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e0       	ldi	r20, 0x00	; 0
    4124:	50 e0       	ldi	r21, 0x00	; 0
    4126:	bc 01       	movw	r22, r24
    4128:	cd 01       	movw	r24, r26
    412a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    412e:	da 01       	movw	r26, r20
    4130:	c9 01       	movw	r24, r18
    4132:	2a e0       	ldi	r18, 0x0A	; 10
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e0       	ldi	r20, 0x00	; 0
    4138:	50 e0       	ldi	r21, 0x00	; 0
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	bc 01       	movw	r22, r24
    4148:	cd 01       	movw	r24, r26
    414a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)":");
    414e:	8e e8       	ldi	r24, 0x8E	; 142
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(((seconds%3600)%60)/10) ;
    4156:	80 91 30 02 	lds	r24, 0x0230
    415a:	90 91 31 02 	lds	r25, 0x0231
    415e:	a0 91 32 02 	lds	r26, 0x0232
    4162:	b0 91 33 02 	lds	r27, 0x0233
    4166:	20 e1       	ldi	r18, 0x10	; 16
    4168:	3e e0       	ldi	r19, 0x0E	; 14
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	2c e3       	ldi	r18, 0x3C	; 60
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e0       	ldi	r20, 0x00	; 0
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	2a e0       	ldi	r18, 0x0A	; 10
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e0       	ldi	r20, 0x00	; 0
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	bc 01       	movw	r22, r24
    4198:	cd 01       	movw	r24, r26
    419a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    419e:	da 01       	movw	r26, r20
    41a0:	c9 01       	movw	r24, r18
    41a2:	bc 01       	movw	r22, r24
    41a4:	cd 01       	movw	r24, r26
    41a6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((seconds%3600)%60)%10) ;
    41aa:	80 91 30 02 	lds	r24, 0x0230
    41ae:	90 91 31 02 	lds	r25, 0x0231
    41b2:	a0 91 32 02 	lds	r26, 0x0232
    41b6:	b0 91 33 02 	lds	r27, 0x0233
    41ba:	20 e1       	ldi	r18, 0x10	; 16
    41bc:	3e e0       	ldi	r19, 0x0E	; 14
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	2c e3       	ldi	r18, 0x3C	; 60
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	40 e0       	ldi	r20, 0x00	; 0
    41d4:	50 e0       	ldi	r21, 0x00	; 0
    41d6:	bc 01       	movw	r22, r24
    41d8:	cd 01       	movw	r24, r26
    41da:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	2a e0       	ldi	r18, 0x0A	; 10
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	bc 01       	movw	r22, r24
    41ec:	cd 01       	movw	r24, r26
    41ee:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <__udivmodsi4>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	bc 01       	movw	r22, r24
    41f8:	cd 01       	movw	r24, r26
    41fa:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
	}
}
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <A_Void_Display_KMG>:

void A_Void_Display_KMG (void)
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
	if (g_LCD_Tab == LCD_TAB_3)
    420c:	80 91 2b 02 	lds	r24, 0x022B
    4210:	82 30       	cpi	r24, 0x02	; 2
    4212:	09 f0       	breq	.+2      	; 0x4216 <A_Void_Display_KMG+0x12>
    4214:	40 c0       	rjmp	.+128    	; 0x4296 <A_Void_Display_KMG+0x92>
	{
		H_Lcd_Void_LCDGoTo(0,13);
    4216:	80 e0       	ldi	r24, 0x00	; 0
    4218:	6d e0       	ldi	r22, 0x0D	; 13
    421a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteNumber(g_KM_Counter/100);
    421e:	80 91 35 02 	lds	r24, 0x0235
    4222:	90 91 36 02 	lds	r25, 0x0236
    4226:	24 e6       	ldi	r18, 0x64	; 100
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	b9 01       	movw	r22, r18
    422c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    4230:	cb 01       	movw	r24, r22
    4232:	cc 01       	movw	r24, r24
    4234:	a0 e0       	ldi	r26, 0x00	; 0
    4236:	b0 e0       	ldi	r27, 0x00	; 0
    4238:	bc 01       	movw	r22, r24
    423a:	cd 01       	movw	r24, r26
    423c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_KM_Counter%100)/10);
    4240:	80 91 35 02 	lds	r24, 0x0235
    4244:	90 91 36 02 	lds	r25, 0x0236
    4248:	24 e6       	ldi	r18, 0x64	; 100
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	b9 01       	movw	r22, r18
    424e:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    4252:	2a e0       	ldi	r18, 0x0A	; 10
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	b9 01       	movw	r22, r18
    4258:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    425c:	cb 01       	movw	r24, r22
    425e:	cc 01       	movw	r24, r24
    4260:	a0 e0       	ldi	r26, 0x00	; 0
    4262:	b0 e0       	ldi	r27, 0x00	; 0
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_KM_Counter%100)%10));
    426c:	80 91 35 02 	lds	r24, 0x0235
    4270:	90 91 36 02 	lds	r25, 0x0236
    4274:	24 e6       	ldi	r18, 0x64	; 100
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	b9 01       	movw	r22, r18
    427a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    427e:	2a e0       	ldi	r18, 0x0A	; 10
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	b9 01       	movw	r22, r18
    4284:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    4288:	cc 01       	movw	r24, r24
    428a:	a0 e0       	ldi	r26, 0x00	; 0
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	bc 01       	movw	r22, r24
    4290:	cd 01       	movw	r24, r26
    4292:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
	}
}
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <A_Void_LCD_Screen1_Display>:
#include "States_Interface.h"
/******************************************************************/


void A_Void_LCD_Screen1_Display(void)
{
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <A_Void_LCD_Screen1_Display+0x6>
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Update_Pages == 1)
    42a6:	80 91 0a 02 	lds	r24, 0x020A
    42aa:	81 30       	cpi	r24, 0x01	; 1
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <A_Void_LCD_Screen1_Display+0x14>
    42ae:	b2 c0       	rjmp	.+356    	; 0x4414 <A_Void_LCD_Screen1_Display+0x178>
	{
		g_LCD_Update_Pages = 0 ;
    42b0:	10 92 0a 02 	sts	0x020A, r1

		H_Lcd_Void_LCDClear() ;
    42b4:	0e 94 df 18 	call	0x31be	; 0x31be <H_Lcd_Void_LCDClear>

		/* First Row */
		H_Lcd_Void_LCDWriteString((u8*)"Speed: ");
    42b8:	80 e9       	ldi	r24, 0x90	; 144
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(g_Speed/100);
    42c0:	80 91 2c 02 	lds	r24, 0x022C
    42c4:	90 91 2d 02 	lds	r25, 0x022D
    42c8:	24 e6       	ldi	r18, 0x64	; 100
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	b9 01       	movw	r22, r18
    42ce:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    42d2:	cb 01       	movw	r24, r22
    42d4:	cc 01       	movw	r24, r24
    42d6:	a0 e0       	ldi	r26, 0x00	; 0
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	bc 01       	movw	r22, r24
    42dc:	cd 01       	movw	r24, r26
    42de:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_Speed%100)/10);
    42e2:	80 91 2c 02 	lds	r24, 0x022C
    42e6:	90 91 2d 02 	lds	r25, 0x022D
    42ea:	24 e6       	ldi	r18, 0x64	; 100
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	b9 01       	movw	r22, r18
    42f0:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    42f4:	2a e0       	ldi	r18, 0x0A	; 10
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	b9 01       	movw	r22, r18
    42fa:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    42fe:	cb 01       	movw	r24, r22
    4300:	cc 01       	movw	r24, r24
    4302:	a0 e0       	ldi	r26, 0x00	; 0
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_Speed%100)%10));
    430e:	80 91 2c 02 	lds	r24, 0x022C
    4312:	90 91 2d 02 	lds	r25, 0x022D
    4316:	24 e6       	ldi	r18, 0x64	; 100
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	b9 01       	movw	r22, r18
    431c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    4320:	2a e0       	ldi	r18, 0x0A	; 10
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	b9 01       	movw	r22, r18
    4326:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    432a:	cc 01       	movw	r24, r24
    432c:	a0 e0       	ldi	r26, 0x00	; 0
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	bc 01       	movw	r22, r24
    4332:	cd 01       	movw	r24, r26
    4334:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)" Kmh");
    4338:	88 e9       	ldi	r24, 0x98	; 152
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>

		/* Second Row */
		H_Lcd_Void_LCDGoTo(1,0);
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"Limit: ");
    4348:	8d e9       	ldi	r24, 0x9D	; 157
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(g_Speed_Limit/100);
    4350:	80 91 2f 02 	lds	r24, 0x022F
    4354:	94 e6       	ldi	r25, 0x64	; 100
    4356:	69 2f       	mov	r22, r25
    4358:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    435c:	88 2f       	mov	r24, r24
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	a0 e0       	ldi	r26, 0x00	; 0
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_Speed_Limit%100)/10);
    436c:	80 91 2f 02 	lds	r24, 0x022F
    4370:	94 e6       	ldi	r25, 0x64	; 100
    4372:	69 2f       	mov	r22, r25
    4374:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    4378:	89 2f       	mov	r24, r25
    437a:	9a e0       	ldi	r25, 0x0A	; 10
    437c:	69 2f       	mov	r22, r25
    437e:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    4382:	88 2f       	mov	r24, r24
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	a0 e0       	ldi	r26, 0x00	; 0
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	bc 01       	movw	r22, r24
    438c:	cd 01       	movw	r24, r26
    438e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_Speed_Limit%100)%10));
    4392:	80 91 2f 02 	lds	r24, 0x022F
    4396:	94 e6       	ldi	r25, 0x64	; 100
    4398:	69 2f       	mov	r22, r25
    439a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    439e:	89 2f       	mov	r24, r25
    43a0:	9a e0       	ldi	r25, 0x0A	; 10
    43a2:	69 2f       	mov	r22, r25
    43a4:	0e 94 6d 26 	call	0x4cda	; 0x4cda <__udivmodqi4>
    43a8:	89 2f       	mov	r24, r25
    43aa:	88 2f       	mov	r24, r24
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	a0 e0       	ldi	r26, 0x00	; 0
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)" Kmh");
    43ba:	88 e9       	ldi	r24, 0x98	; 152
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		switch(g_Speed_Limit_State)
    43c2:	80 91 27 02 	lds	r24, 0x0227
    43c6:	28 2f       	mov	r18, r24
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	3a 83       	std	Y+2, r19	; 0x02
    43cc:	29 83       	std	Y+1, r18	; 0x01
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	31 f0       	breq	.+12     	; 0x43e2 <A_Void_LCD_Screen1_Display+0x146>
    43d6:	29 81       	ldd	r18, Y+1	; 0x01
    43d8:	3a 81       	ldd	r19, Y+2	; 0x02
    43da:	21 30       	cpi	r18, 0x01	; 1
    43dc:	31 05       	cpc	r19, r1
    43de:	31 f0       	breq	.+12     	; 0x43ec <A_Void_LCD_Screen1_Display+0x150>
    43e0:	09 c0       	rjmp	.+18     	; 0x43f4 <A_Void_LCD_Screen1_Display+0x158>
		{
		case SPD_LIM_OFF :
			H_Lcd_Void_LCDWriteString((u8*)"(OFF)");
    43e2:	85 ea       	ldi	r24, 0xA5	; 165
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    43ea:	04 c0       	rjmp	.+8      	; 0x43f4 <A_Void_LCD_Screen1_Display+0x158>
			break;
		case SPD_LIM_ON :
			H_Lcd_Void_LCDWriteString((u8*)"(ON)");
    43ec:	8b ea       	ldi	r24, 0xAB	; 171
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			break;
		}

		/* Fourth Row */
		H_Lcd_Void_LCDGoTo(3,8);
    43f4:	83 e0       	ldi	r24, 0x03	; 3
    43f6:	68 e0       	ldi	r22, 0x08	; 8
    43f8:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter(223);
    43fc:	8f ed       	ldi	r24, 0xDF	; 223
    43fe:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4402:	81 ea       	ldi	r24, 0xA1	; 161
    4404:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4408:	81 ea       	ldi	r24, 0xA1	; 161
    440a:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    440e:	81 ea       	ldi	r24, 0xA1	; 161
    4410:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
	}
}
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	08 95       	ret

0000441e <A_Void_LCD_Screen2_Display>:

void A_Void_LCD_Screen2_Display(void)
{
    441e:	df 93       	push	r29
    4420:	cf 93       	push	r28
    4422:	00 d0       	rcall	.+0      	; 0x4424 <A_Void_LCD_Screen2_Display+0x6>
    4424:	00 d0       	rcall	.+0      	; 0x4426 <A_Void_LCD_Screen2_Display+0x8>
    4426:	00 d0       	rcall	.+0      	; 0x4428 <A_Void_LCD_Screen2_Display+0xa>
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Update_Pages == 1)
    442c:	80 91 0a 02 	lds	r24, 0x020A
    4430:	81 30       	cpi	r24, 0x01	; 1
    4432:	09 f0       	breq	.+2      	; 0x4436 <A_Void_LCD_Screen2_Display+0x18>
    4434:	79 c0       	rjmp	.+242    	; 0x4528 <A_Void_LCD_Screen2_Display+0x10a>
	{
		g_LCD_Update_Pages = 0 ;
    4436:	10 92 0a 02 	sts	0x020A, r1

		H_Lcd_Void_LCDClear() ;
    443a:	0e 94 df 18 	call	0x31be	; 0x31be <H_Lcd_Void_LCDClear>

		/* First Row */
		H_Lcd_Void_LCDWriteString((u8*)"PNDR: ");
    443e:	80 eb       	ldi	r24, 0xB0	; 176
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		switch(GearBox_State)
    4446:	80 91 28 02 	lds	r24, 0x0228
    444a:	28 2f       	mov	r18, r24
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	3e 83       	std	Y+6, r19	; 0x06
    4450:	2d 83       	std	Y+5, r18	; 0x05
    4452:	8d 81       	ldd	r24, Y+5	; 0x05
    4454:	9e 81       	ldd	r25, Y+6	; 0x06
    4456:	81 30       	cpi	r24, 0x01	; 1
    4458:	91 05       	cpc	r25, r1
    445a:	69 f0       	breq	.+26     	; 0x4476 <A_Void_LCD_Screen2_Display+0x58>
    445c:	2d 81       	ldd	r18, Y+5	; 0x05
    445e:	3e 81       	ldd	r19, Y+6	; 0x06
    4460:	22 30       	cpi	r18, 0x02	; 2
    4462:	31 05       	cpc	r19, r1
    4464:	61 f0       	breq	.+24     	; 0x447e <A_Void_LCD_Screen2_Display+0x60>
    4466:	8d 81       	ldd	r24, Y+5	; 0x05
    4468:	9e 81       	ldd	r25, Y+6	; 0x06
    446a:	00 97       	sbiw	r24, 0x00	; 0
    446c:	59 f4       	brne	.+22     	; 0x4484 <A_Void_LCD_Screen2_Display+0x66>
		{
		case GEARBOX_N :
			H_Lcd_Void_LCDWriteCharacter('N');
    446e:	8e e4       	ldi	r24, 0x4E	; 78
    4470:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
    4474:	07 c0       	rjmp	.+14     	; 0x4484 <A_Void_LCD_Screen2_Display+0x66>
			break;
		case GEARBOX_D :
			H_Lcd_Void_LCDWriteCharacter('D');
    4476:	84 e4       	ldi	r24, 0x44	; 68
    4478:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
    447c:	03 c0       	rjmp	.+6      	; 0x4484 <A_Void_LCD_Screen2_Display+0x66>
			break;
		case GEARBOX_R :
			H_Lcd_Void_LCDWriteCharacter('R');
    447e:	82 e5       	ldi	r24, 0x52	; 82
    4480:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
			break;
		}

		/* Second Row */
		H_Lcd_Void_LCDGoTo(1,0);
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"CCS: ");
    448c:	87 eb       	ldi	r24, 0xB7	; 183
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		switch(g_CCS_State)
    4494:	80 91 29 02 	lds	r24, 0x0229
    4498:	28 2f       	mov	r18, r24
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	3c 83       	std	Y+4, r19	; 0x04
    449e:	2b 83       	std	Y+3, r18	; 0x03
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	31 f0       	breq	.+12     	; 0x44b4 <A_Void_LCD_Screen2_Display+0x96>
    44a8:	2b 81       	ldd	r18, Y+3	; 0x03
    44aa:	3c 81       	ldd	r19, Y+4	; 0x04
    44ac:	21 30       	cpi	r18, 0x01	; 1
    44ae:	31 05       	cpc	r19, r1
    44b0:	31 f0       	breq	.+12     	; 0x44be <A_Void_LCD_Screen2_Display+0xa0>
    44b2:	09 c0       	rjmp	.+18     	; 0x44c6 <A_Void_LCD_Screen2_Display+0xa8>
		{
		case CCS_OFF :
			H_Lcd_Void_LCDWriteString((u8*)"OFF");
    44b4:	8d eb       	ldi	r24, 0xBD	; 189
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    44bc:	04 c0       	rjmp	.+8      	; 0x44c6 <A_Void_LCD_Screen2_Display+0xa8>
			break;
		case CCS_ON :
			H_Lcd_Void_LCDWriteString((u8*)"ON");
    44be:	81 ec       	ldi	r24, 0xC1	; 193
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			break;
		}

		/* Second Row */
		H_Lcd_Void_LCDGoTo(1,11);
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	6b e0       	ldi	r22, 0x0B	; 11
    44ca:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"BAS: ");
    44ce:	84 ec       	ldi	r24, 0xC4	; 196
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		switch(g_BAS_State)
    44d6:	80 91 2a 02 	lds	r24, 0x022A
    44da:	28 2f       	mov	r18, r24
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	3a 83       	std	Y+2, r19	; 0x02
    44e0:	29 83       	std	Y+1, r18	; 0x01
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	9a 81       	ldd	r25, Y+2	; 0x02
    44e6:	00 97       	sbiw	r24, 0x00	; 0
    44e8:	31 f0       	breq	.+12     	; 0x44f6 <A_Void_LCD_Screen2_Display+0xd8>
    44ea:	29 81       	ldd	r18, Y+1	; 0x01
    44ec:	3a 81       	ldd	r19, Y+2	; 0x02
    44ee:	21 30       	cpi	r18, 0x01	; 1
    44f0:	31 05       	cpc	r19, r1
    44f2:	31 f0       	breq	.+12     	; 0x4500 <A_Void_LCD_Screen2_Display+0xe2>
    44f4:	09 c0       	rjmp	.+18     	; 0x4508 <A_Void_LCD_Screen2_Display+0xea>
		{
		case BAS_OFF :
			H_Lcd_Void_LCDWriteString((u8*)"OFF");
    44f6:	8d eb       	ldi	r24, 0xBD	; 189
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    44fe:	04 c0       	rjmp	.+8      	; 0x4508 <A_Void_LCD_Screen2_Display+0xea>
			break;
		case BAS_ON :
			H_Lcd_Void_LCDWriteString((u8*)"ON");
    4500:	81 ec       	ldi	r24, 0xC1	; 193
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			break;
		}

		/* Fourth Row */
		H_Lcd_Void_LCDGoTo(3,8);
    4508:	83 e0       	ldi	r24, 0x03	; 3
    450a:	68 e0       	ldi	r22, 0x08	; 8
    450c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter(161);
    4510:	81 ea       	ldi	r24, 0xA1	; 161
    4512:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(223);
    4516:	8f ed       	ldi	r24, 0xDF	; 223
    4518:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    451c:	81 ea       	ldi	r24, 0xA1	; 161
    451e:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4522:	81 ea       	ldi	r24, 0xA1	; 161
    4524:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
	}
}
    4528:	26 96       	adiw	r28, 0x06	; 6
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	cf 91       	pop	r28
    4536:	df 91       	pop	r29
    4538:	08 95       	ret

0000453a <A_Void_LCD_Screen3_Display>:

void A_Void_LCD_Screen3_Display(void)
{
    453a:	df 93       	push	r29
    453c:	cf 93       	push	r28
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Update_Pages == 1)
    4542:	80 91 0a 02 	lds	r24, 0x020A
    4546:	81 30       	cpi	r24, 0x01	; 1
    4548:	09 f0       	breq	.+2      	; 0x454c <A_Void_LCD_Screen3_Display+0x12>
    454a:	7c c0       	rjmp	.+248    	; 0x4644 <A_Void_LCD_Screen3_Display+0x10a>
	{
		g_LCD_Update_Pages = 0 ;
    454c:	10 92 0a 02 	sts	0x020A, r1

		H_Lcd_Void_LCDClear() ;
    4550:	0e 94 df 18 	call	0x31be	; 0x31be <H_Lcd_Void_LCDClear>

		H_Lcd_Void_LCDWriteString((u8*)"KM Counter : ") ;
    4554:	8a ec       	ldi	r24, 0xCA	; 202
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(g_KM_Counter/100);
    455c:	80 91 35 02 	lds	r24, 0x0235
    4560:	90 91 36 02 	lds	r25, 0x0236
    4564:	24 e6       	ldi	r18, 0x64	; 100
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	b9 01       	movw	r22, r18
    456a:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    456e:	cb 01       	movw	r24, r22
    4570:	cc 01       	movw	r24, r24
    4572:	a0 e0       	ldi	r26, 0x00	; 0
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber((g_KM_Counter%100)/10);
    457e:	80 91 35 02 	lds	r24, 0x0235
    4582:	90 91 36 02 	lds	r25, 0x0236
    4586:	24 e6       	ldi	r18, 0x64	; 100
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	b9 01       	movw	r22, r18
    458c:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    4590:	2a e0       	ldi	r18, 0x0A	; 10
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	b9 01       	movw	r22, r18
    4596:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    459a:	cb 01       	movw	r24, r22
    459c:	cc 01       	movw	r24, r24
    459e:	a0 e0       	ldi	r26, 0x00	; 0
    45a0:	b0 e0       	ldi	r27, 0x00	; 0
    45a2:	bc 01       	movw	r22, r24
    45a4:	cd 01       	movw	r24, r26
    45a6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteNumber(((g_KM_Counter%100)%10));
    45aa:	80 91 35 02 	lds	r24, 0x0235
    45ae:	90 91 36 02 	lds	r25, 0x0236
    45b2:	24 e6       	ldi	r18, 0x64	; 100
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	b9 01       	movw	r22, r18
    45b8:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    45bc:	2a e0       	ldi	r18, 0x0A	; 10
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	b9 01       	movw	r22, r18
    45c2:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <__udivmodhi4>
    45c6:	cc 01       	movw	r24, r24
    45c8:	a0 e0       	ldi	r26, 0x00	; 0
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	bc 01       	movw	r22, r24
    45ce:	cd 01       	movw	r24, r26
    45d0:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteString((u8*)" KM") ;
    45d4:	88 ed       	ldi	r24, 0xD8	; 216
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>

		/* Fourth Row */
		H_Lcd_Void_LCDGoTo(1,5);
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	65 e0       	ldi	r22, 0x05	; 5
    45e0:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*)"E") ;
    45e4:	8c ed       	ldi	r24, 0xDC	; 220
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteCharacter(161);
    45ec:	81 ea       	ldi	r24, 0xA1	; 161
    45ee:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    45f2:	81 ea       	ldi	r24, 0xA1	; 161
    45f4:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    45f8:	81 ea       	ldi	r24, 0xA1	; 161
    45fa:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    45fe:	81 ea       	ldi	r24, 0xA1	; 161
    4600:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4604:	81 ea       	ldi	r24, 0xA1	; 161
    4606:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    460a:	81 ea       	ldi	r24, 0xA1	; 161
    460c:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4610:	81 ea       	ldi	r24, 0xA1	; 161
    4612:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4616:	81 ea       	ldi	r24, 0xA1	; 161
    4618:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteString((u8*)"F") ;
    461c:	8e ed       	ldi	r24, 0xDE	; 222
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>

		/* Fourth Row */
		H_Lcd_Void_LCDGoTo(3,8);
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	68 e0       	ldi	r22, 0x08	; 8
    4628:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter(161);
    462c:	81 ea       	ldi	r24, 0xA1	; 161
    462e:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4632:	81 ea       	ldi	r24, 0xA1	; 161
    4634:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(223);
    4638:	8f ed       	ldi	r24, 0xDF	; 223
    463a:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    463e:	81 ea       	ldi	r24, 0xA1	; 161
    4640:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
	}
}
    4644:	cf 91       	pop	r28
    4646:	df 91       	pop	r29
    4648:	08 95       	ret

0000464a <A_Void_LCD_Screen4_Display>:

void A_Void_LCD_Screen4_Display(void)
{
    464a:	df 93       	push	r29
    464c:	cf 93       	push	r28
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Update_Pages == 1)
    4652:	80 91 0a 02 	lds	r24, 0x020A
    4656:	81 30       	cpi	r24, 0x01	; 1
    4658:	c1 f4       	brne	.+48     	; 0x468a <A_Void_LCD_Screen4_Display+0x40>
	{
		g_LCD_Update_Pages = 0 ;
    465a:	10 92 0a 02 	sts	0x020A, r1

		H_Lcd_Void_LCDClear() ;
    465e:	0e 94 df 18 	call	0x31be	; 0x31be <H_Lcd_Void_LCDClear>

		/*First Row*/
		H_Lcd_Void_LCDWriteString((u8*)"Date : 18/3/2024");
    4662:	80 ee       	ldi	r24, 0xE0	; 224
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>

		/* Fourth Row */
		H_Lcd_Void_LCDGoTo(3,8);
    466a:	83 e0       	ldi	r24, 0x03	; 3
    466c:	68 e0       	ldi	r22, 0x08	; 8
    466e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteCharacter(161);
    4672:	81 ea       	ldi	r24, 0xA1	; 161
    4674:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    4678:	81 ea       	ldi	r24, 0xA1	; 161
    467a:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(161);
    467e:	81 ea       	ldi	r24, 0xA1	; 161
    4680:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteCharacter(223);
    4684:	8f ed       	ldi	r24, 0xDF	; 223
    4686:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
	}
}
    468a:	cf 91       	pop	r28
    468c:	df 91       	pop	r29
    468e:	08 95       	ret

00004690 <A_Void_LCD_Left>:

void A_Void_LCD_Left(void)
{
    4690:	df 93       	push	r29
    4692:	cf 93       	push	r28
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Tab > LCD_TAB_1)
    4698:	80 91 2b 02 	lds	r24, 0x022B
    469c:	88 23       	and	r24, r24
    469e:	41 f0       	breq	.+16     	; 0x46b0 <A_Void_LCD_Left+0x20>
	{
		--g_LCD_Tab ;
    46a0:	80 91 2b 02 	lds	r24, 0x022B
    46a4:	81 50       	subi	r24, 0x01	; 1
    46a6:	80 93 2b 02 	sts	0x022B, r24
		g_LCD_Update_Pages = 1 ;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	80 93 0a 02 	sts	0x020A, r24
	}
}
    46b0:	cf 91       	pop	r28
    46b2:	df 91       	pop	r29
    46b4:	08 95       	ret

000046b6 <A_Void_LCD_Right>:

void A_Void_LCD_Right(void)
{
    46b6:	df 93       	push	r29
    46b8:	cf 93       	push	r28
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
	if(g_LCD_Tab < LCD_TAB_4)
    46be:	80 91 2b 02 	lds	r24, 0x022B
    46c2:	83 30       	cpi	r24, 0x03	; 3
    46c4:	40 f4       	brcc	.+16     	; 0x46d6 <A_Void_LCD_Right+0x20>
	{
		++g_LCD_Tab ;
    46c6:	80 91 2b 02 	lds	r24, 0x022B
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	80 93 2b 02 	sts	0x022B, r24
		g_LCD_Update_Pages = 1 ;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	80 93 0a 02 	sts	0x020A, r24
	}
}
    46d6:	cf 91       	pop	r28
    46d8:	df 91       	pop	r29
    46da:	08 95       	ret

000046dc <A_Void_GearBox_Check_Task>:

void A_Void_GearBox_Check_Task(void)
{
    46dc:	df 93       	push	r29
    46de:	cf 93       	push	r28
    46e0:	cd b7       	in	r28, 0x3d	; 61
    46e2:	de b7       	in	r29, 0x3e	; 62
    46e4:	60 97       	sbiw	r28, 0x10	; 16
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
	H_Buzzer_Void_BuzzerOn();
    46f0:	0e 94 14 1b 	call	0x3628	; 0x3628 <H_Buzzer_Void_BuzzerOn>
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	a8 e4       	ldi	r26, 0x48	; 72
    46fa:	b2 e4       	ldi	r27, 0x42	; 66
    46fc:	8b 87       	std	Y+11, r24	; 0x0b
    46fe:	9c 87       	std	Y+12, r25	; 0x0c
    4700:	ad 87       	std	Y+13, r26	; 0x0d
    4702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4704:	6b 85       	ldd	r22, Y+11	; 0x0b
    4706:	7c 85       	ldd	r23, Y+12	; 0x0c
    4708:	8d 85       	ldd	r24, Y+13	; 0x0d
    470a:	9e 85       	ldd	r25, Y+14	; 0x0e
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	4a e7       	ldi	r20, 0x7A	; 122
    4712:	55 e4       	ldi	r21, 0x45	; 69
    4714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	8f 83       	std	Y+7, r24	; 0x07
    471e:	98 87       	std	Y+8, r25	; 0x08
    4720:	a9 87       	std	Y+9, r26	; 0x09
    4722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4724:	6f 81       	ldd	r22, Y+7	; 0x07
    4726:	78 85       	ldd	r23, Y+8	; 0x08
    4728:	89 85       	ldd	r24, Y+9	; 0x09
    472a:	9a 85       	ldd	r25, Y+10	; 0x0a
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	40 e8       	ldi	r20, 0x80	; 128
    4732:	5f e3       	ldi	r21, 0x3F	; 63
    4734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4738:	88 23       	and	r24, r24
    473a:	2c f4       	brge	.+10     	; 0x4746 <A_Void_GearBox_Check_Task+0x6a>
		__ticks = 1;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	3f c0       	rjmp	.+126    	; 0x47c4 <A_Void_GearBox_Check_Task+0xe8>
	else if (__tmp > 65535)
    4746:	6f 81       	ldd	r22, Y+7	; 0x07
    4748:	78 85       	ldd	r23, Y+8	; 0x08
    474a:	89 85       	ldd	r24, Y+9	; 0x09
    474c:	9a 85       	ldd	r25, Y+10	; 0x0a
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	3f ef       	ldi	r19, 0xFF	; 255
    4752:	4f e7       	ldi	r20, 0x7F	; 127
    4754:	57 e4       	ldi	r21, 0x47	; 71
    4756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    475a:	18 16       	cp	r1, r24
    475c:	4c f5       	brge	.+82     	; 0x47b0 <A_Void_GearBox_Check_Task+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    475e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4760:	7c 85       	ldd	r23, Y+12	; 0x0c
    4762:	8d 85       	ldd	r24, Y+13	; 0x0d
    4764:	9e 85       	ldd	r25, Y+14	; 0x0e
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	40 e2       	ldi	r20, 0x20	; 32
    476c:	51 e4       	ldi	r21, 0x41	; 65
    476e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	bc 01       	movw	r22, r24
    4778:	cd 01       	movw	r24, r26
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	9e 83       	std	Y+6, r25	; 0x06
    4784:	8d 83       	std	Y+5, r24	; 0x05
    4786:	0f c0       	rjmp	.+30     	; 0x47a6 <A_Void_GearBox_Check_Task+0xca>
    4788:	80 e9       	ldi	r24, 0x90	; 144
    478a:	91 e0       	ldi	r25, 0x01	; 1
    478c:	9c 83       	std	Y+4, r25	; 0x04
    478e:	8b 83       	std	Y+3, r24	; 0x03
    4790:	8b 81       	ldd	r24, Y+3	; 0x03
    4792:	9c 81       	ldd	r25, Y+4	; 0x04
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <A_Void_GearBox_Check_Task+0xb8>
    4798:	9c 83       	std	Y+4, r25	; 0x04
    479a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479c:	8d 81       	ldd	r24, Y+5	; 0x05
    479e:	9e 81       	ldd	r25, Y+6	; 0x06
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	9e 83       	std	Y+6, r25	; 0x06
    47a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47a6:	8d 81       	ldd	r24, Y+5	; 0x05
    47a8:	9e 81       	ldd	r25, Y+6	; 0x06
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	69 f7       	brne	.-38     	; 0x4788 <A_Void_GearBox_Check_Task+0xac>
    47ae:	14 c0       	rjmp	.+40     	; 0x47d8 <A_Void_GearBox_Check_Task+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47b0:	6f 81       	ldd	r22, Y+7	; 0x07
    47b2:	78 85       	ldd	r23, Y+8	; 0x08
    47b4:	89 85       	ldd	r24, Y+9	; 0x09
    47b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	9e 83       	std	Y+6, r25	; 0x06
    47c2:	8d 83       	std	Y+5, r24	; 0x05
    47c4:	8d 81       	ldd	r24, Y+5	; 0x05
    47c6:	9e 81       	ldd	r25, Y+6	; 0x06
    47c8:	9a 83       	std	Y+2, r25	; 0x02
    47ca:	89 83       	std	Y+1, r24	; 0x01
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	9a 81       	ldd	r25, Y+2	; 0x02
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <A_Void_GearBox_Check_Task+0xf4>
    47d4:	9a 83       	std	Y+2, r25	; 0x02
    47d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	H_Buzzer_Void_BuzzerOff();
    47d8:	0e 94 1f 1b 	call	0x363e	; 0x363e <H_Buzzer_Void_BuzzerOff>

	if(H_PushButton_U8_PushButtonRead(BRAKE_PEDAL) == PUSH_BUTTON_PRESSED)
    47dc:	83 e0       	ldi	r24, 0x03	; 3
    47de:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <H_PushButton_U8_PushButtonRead>
    47e2:	88 23       	and	r24, r24
    47e4:	09 f0       	breq	.+2      	; 0x47e8 <A_Void_GearBox_Check_Task+0x10c>
    47e6:	75 c0       	rjmp	.+234    	; 0x48d2 <A_Void_GearBox_Check_Task+0x1f6>
	{
		flag_for_DM = DRIVER_NOT_SLEEP ;
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	80 93 09 02 	sts	0x0209, r24
		g_LCD_Update = 1 ;
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	80 93 07 02 	sts	0x0207, r24
		g_CCS_State = CCS_OFF ;
    47f4:	10 92 29 02 	sts	0x0229, r1

		switch(GearBox_State)
    47f8:	80 91 28 02 	lds	r24, 0x0228
    47fc:	28 2f       	mov	r18, r24
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	38 8b       	std	Y+16, r19	; 0x10
    4802:	2f 87       	std	Y+15, r18	; 0x0f
    4804:	8f 85       	ldd	r24, Y+15	; 0x0f
    4806:	98 89       	ldd	r25, Y+16	; 0x10
    4808:	81 30       	cpi	r24, 0x01	; 1
    480a:	91 05       	cpc	r25, r1
    480c:	09 f4       	brne	.+2      	; 0x4810 <A_Void_GearBox_Check_Task+0x134>
    480e:	3e c0       	rjmp	.+124    	; 0x488c <A_Void_GearBox_Check_Task+0x1b0>
    4810:	2f 85       	ldd	r18, Y+15	; 0x0f
    4812:	38 89       	ldd	r19, Y+16	; 0x10
    4814:	22 30       	cpi	r18, 0x02	; 2
    4816:	31 05       	cpc	r19, r1
    4818:	29 f0       	breq	.+10     	; 0x4824 <A_Void_GearBox_Check_Task+0x148>
    481a:	8f 85       	ldd	r24, Y+15	; 0x0f
    481c:	98 89       	ldd	r25, Y+16	; 0x10
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	19 f1       	breq	.+70     	; 0x4868 <A_Void_GearBox_Check_Task+0x18c>
    4822:	5a c0       	rjmp	.+180    	; 0x48d8 <A_Void_GearBox_Check_Task+0x1fc>
		{
		case GEARBOX_R :
			if(g_LCD_Tab == LCD_TAB_2)
    4824:	80 91 2b 02 	lds	r24, 0x022B
    4828:	81 30       	cpi	r24, 0x01	; 1
    482a:	b9 f4       	brne	.+46     	; 0x485a <A_Void_GearBox_Check_Task+0x17e>
			{
				H_Lcd_Void_LCDGoTo(0, 6);
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	66 e0       	ldi	r22, 0x06	; 6
    4830:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('N');
    4834:	8e e4       	ldi	r24, 0x4E	; 78
    4836:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
				H_Lcd_Void_LCDGoTo(1, 5) ;
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	65 e0       	ldi	r22, 0x05	; 5
    483e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF") ;
    4842:	8d eb       	ldi	r24, 0xBD	; 189
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
				H_Lcd_Void_LCDGoTo(1, 16) ;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	60 e1       	ldi	r22, 0x10	; 16
    484e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF") ;
    4852:	8d eb       	ldi	r24, 0xBD	; 189
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_Speed_Limit_State = SPD_LIM_OFF ;
    485a:	10 92 27 02 	sts	0x0227, r1
			GearBox_State = GEARBOX_N ;
    485e:	10 92 28 02 	sts	0x0228, r1
			g_BAS_State = BAS_OFF ;
    4862:	10 92 2a 02 	sts	0x022A, r1
    4866:	38 c0       	rjmp	.+112    	; 0x48d8 <A_Void_GearBox_Check_Task+0x1fc>
			break;
		case GEARBOX_N :
			if(g_LCD_Tab == LCD_TAB_2)
    4868:	80 91 2b 02 	lds	r24, 0x022B
    486c:	81 30       	cpi	r24, 0x01	; 1
    486e:	39 f4       	brne	.+14     	; 0x487e <A_Void_GearBox_Check_Task+0x1a2>
			{
				H_Lcd_Void_LCDGoTo(0, 6);
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	66 e0       	ldi	r22, 0x06	; 6
    4874:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('D');
    4878:	84 e4       	ldi	r24, 0x44	; 68
    487a:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
			}
			GearBox_State = GEARBOX_D ;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	80 93 28 02 	sts	0x0228, r24
			g_BAS_State = BAS_ON ;
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	80 93 2a 02 	sts	0x022A, r24
    488a:	26 c0       	rjmp	.+76     	; 0x48d8 <A_Void_GearBox_Check_Task+0x1fc>
			break;
		case GEARBOX_D :
			if(g_LCD_Tab == LCD_TAB_2)
    488c:	80 91 2b 02 	lds	r24, 0x022B
    4890:	81 30       	cpi	r24, 0x01	; 1
    4892:	b9 f4       	brne	.+46     	; 0x48c2 <A_Void_GearBox_Check_Task+0x1e6>
			{
				H_Lcd_Void_LCDGoTo(0, 6);
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	66 e0       	ldi	r22, 0x06	; 6
    4898:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('R');
    489c:	82 e5       	ldi	r24, 0x52	; 82
    489e:	0e 94 44 14 	call	0x2888	; 0x2888 <H_Lcd_Void_LCDWriteCharacter>
				H_Lcd_Void_LCDGoTo(1, 5) ;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	65 e0       	ldi	r22, 0x05	; 5
    48a6:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF") ;
    48aa:	8d eb       	ldi	r24, 0xBD	; 189
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
				H_Lcd_Void_LCDGoTo(1, 16) ;
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	60 e1       	ldi	r22, 0x10	; 16
    48b6:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF") ;
    48ba:	8d eb       	ldi	r24, 0xBD	; 189
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_Speed_Limit_State = SPD_LIM_OFF ;
    48c2:	10 92 27 02 	sts	0x0227, r1
			GearBox_State = GEARBOX_R ;
    48c6:	82 e0       	ldi	r24, 0x02	; 2
    48c8:	80 93 28 02 	sts	0x0228, r24
			g_BAS_State = BAS_OFF ;
    48cc:	10 92 2a 02 	sts	0x022A, r1
    48d0:	03 c0       	rjmp	.+6      	; 0x48d8 <A_Void_GearBox_Check_Task+0x1fc>
		}

	}
	else
	{
		H_LED_Void_LedOn(ALARM_LED);
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	0e 94 35 11 	call	0x226a	; 0x226a <H_LED_Void_LedOn>
	}
}
    48d8:	60 96       	adiw	r28, 0x10	; 16
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	de bf       	out	0x3e, r29	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	cf 91       	pop	r28
    48e6:	df 91       	pop	r29
    48e8:	08 95       	ret

000048ea <A_Void_CCS_Check_Task>:

void A_Void_CCS_Check_Task(void)
{
    48ea:	df 93       	push	r29
    48ec:	cf 93       	push	r28
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	60 97       	sbiw	r28, 0x10	; 16
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	f8 94       	cli
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	cd bf       	out	0x3d, r28	; 61
	H_Buzzer_Void_BuzzerOn();
    48fe:	0e 94 14 1b 	call	0x3628	; 0x3628 <H_Buzzer_Void_BuzzerOn>
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	a8 e4       	ldi	r26, 0x48	; 72
    4908:	b2 e4       	ldi	r27, 0x42	; 66
    490a:	8b 87       	std	Y+11, r24	; 0x0b
    490c:	9c 87       	std	Y+12, r25	; 0x0c
    490e:	ad 87       	std	Y+13, r26	; 0x0d
    4910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4912:	6b 85       	ldd	r22, Y+11	; 0x0b
    4914:	7c 85       	ldd	r23, Y+12	; 0x0c
    4916:	8d 85       	ldd	r24, Y+13	; 0x0d
    4918:	9e 85       	ldd	r25, Y+14	; 0x0e
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	4a e7       	ldi	r20, 0x7A	; 122
    4920:	55 e4       	ldi	r21, 0x45	; 69
    4922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	8f 83       	std	Y+7, r24	; 0x07
    492c:	98 87       	std	Y+8, r25	; 0x08
    492e:	a9 87       	std	Y+9, r26	; 0x09
    4930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4932:	6f 81       	ldd	r22, Y+7	; 0x07
    4934:	78 85       	ldd	r23, Y+8	; 0x08
    4936:	89 85       	ldd	r24, Y+9	; 0x09
    4938:	9a 85       	ldd	r25, Y+10	; 0x0a
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e8       	ldi	r20, 0x80	; 128
    4940:	5f e3       	ldi	r21, 0x3F	; 63
    4942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4946:	88 23       	and	r24, r24
    4948:	2c f4       	brge	.+10     	; 0x4954 <A_Void_CCS_Check_Task+0x6a>
		__ticks = 1;
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	9e 83       	std	Y+6, r25	; 0x06
    4950:	8d 83       	std	Y+5, r24	; 0x05
    4952:	3f c0       	rjmp	.+126    	; 0x49d2 <A_Void_CCS_Check_Task+0xe8>
	else if (__tmp > 65535)
    4954:	6f 81       	ldd	r22, Y+7	; 0x07
    4956:	78 85       	ldd	r23, Y+8	; 0x08
    4958:	89 85       	ldd	r24, Y+9	; 0x09
    495a:	9a 85       	ldd	r25, Y+10	; 0x0a
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	3f ef       	ldi	r19, 0xFF	; 255
    4960:	4f e7       	ldi	r20, 0x7F	; 127
    4962:	57 e4       	ldi	r21, 0x47	; 71
    4964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4968:	18 16       	cp	r1, r24
    496a:	4c f5       	brge	.+82     	; 0x49be <A_Void_CCS_Check_Task+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    496c:	6b 85       	ldd	r22, Y+11	; 0x0b
    496e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4970:	8d 85       	ldd	r24, Y+13	; 0x0d
    4972:	9e 85       	ldd	r25, Y+14	; 0x0e
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e2       	ldi	r20, 0x20	; 32
    497a:	51 e4       	ldi	r21, 0x41	; 65
    497c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	bc 01       	movw	r22, r24
    4986:	cd 01       	movw	r24, r26
    4988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	9e 83       	std	Y+6, r25	; 0x06
    4992:	8d 83       	std	Y+5, r24	; 0x05
    4994:	0f c0       	rjmp	.+30     	; 0x49b4 <A_Void_CCS_Check_Task+0xca>
    4996:	80 e9       	ldi	r24, 0x90	; 144
    4998:	91 e0       	ldi	r25, 0x01	; 1
    499a:	9c 83       	std	Y+4, r25	; 0x04
    499c:	8b 83       	std	Y+3, r24	; 0x03
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	9c 81       	ldd	r25, Y+4	; 0x04
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <A_Void_CCS_Check_Task+0xb8>
    49a6:	9c 83       	std	Y+4, r25	; 0x04
    49a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49aa:	8d 81       	ldd	r24, Y+5	; 0x05
    49ac:	9e 81       	ldd	r25, Y+6	; 0x06
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	9e 83       	std	Y+6, r25	; 0x06
    49b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	69 f7       	brne	.-38     	; 0x4996 <A_Void_CCS_Check_Task+0xac>
    49bc:	14 c0       	rjmp	.+40     	; 0x49e6 <A_Void_CCS_Check_Task+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49be:	6f 81       	ldd	r22, Y+7	; 0x07
    49c0:	78 85       	ldd	r23, Y+8	; 0x08
    49c2:	89 85       	ldd	r24, Y+9	; 0x09
    49c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	9e 83       	std	Y+6, r25	; 0x06
    49d0:	8d 83       	std	Y+5, r24	; 0x05
    49d2:	8d 81       	ldd	r24, Y+5	; 0x05
    49d4:	9e 81       	ldd	r25, Y+6	; 0x06
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	89 83       	std	Y+1, r24	; 0x01
    49da:	89 81       	ldd	r24, Y+1	; 0x01
    49dc:	9a 81       	ldd	r25, Y+2	; 0x02
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <A_Void_CCS_Check_Task+0xf4>
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	H_Buzzer_Void_BuzzerOff();
    49e6:	0e 94 1f 1b 	call	0x363e	; 0x363e <H_Buzzer_Void_BuzzerOff>

	if(GearBox_State == GEARBOX_D)
    49ea:	80 91 28 02 	lds	r24, 0x0228
    49ee:	81 30       	cpi	r24, 0x01	; 1
    49f0:	79 f5       	brne	.+94     	; 0x4a50 <A_Void_CCS_Check_Task+0x166>
	{
		switch(g_CCS_State)
    49f2:	80 91 29 02 	lds	r24, 0x0229
    49f6:	28 2f       	mov	r18, r24
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	38 8b       	std	Y+16, r19	; 0x10
    49fc:	2f 87       	std	Y+15, r18	; 0x0f
    49fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a00:	98 89       	ldd	r25, Y+16	; 0x10
    4a02:	00 97       	sbiw	r24, 0x00	; 0
    4a04:	31 f0       	breq	.+12     	; 0x4a12 <A_Void_CCS_Check_Task+0x128>
    4a06:	2f 85       	ldd	r18, Y+15	; 0x0f
    4a08:	38 89       	ldd	r19, Y+16	; 0x10
    4a0a:	21 30       	cpi	r18, 0x01	; 1
    4a0c:	31 05       	cpc	r19, r1
    4a0e:	89 f0       	breq	.+34     	; 0x4a32 <A_Void_CCS_Check_Task+0x148>
    4a10:	22 c0       	rjmp	.+68     	; 0x4a56 <A_Void_CCS_Check_Task+0x16c>
		{
		case CCS_OFF :
			if(g_LCD_Tab == LCD_TAB_2)
    4a12:	80 91 2b 02 	lds	r24, 0x022B
    4a16:	81 30       	cpi	r24, 0x01	; 1
    4a18:	41 f4       	brne	.+16     	; 0x4a2a <A_Void_CCS_Check_Task+0x140>
			{
				H_Lcd_Void_LCDGoTo(1, 5);
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	65 e0       	ldi	r22, 0x05	; 5
    4a1e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"ON ");
    4a22:	81 ef       	ldi	r24, 0xF1	; 241
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_CCS_State = CCS_ON ;
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	80 93 29 02 	sts	0x0229, r24
    4a30:	12 c0       	rjmp	.+36     	; 0x4a56 <A_Void_CCS_Check_Task+0x16c>
			break;
		case CCS_ON :
			if(g_LCD_Tab == LCD_TAB_2)
    4a32:	80 91 2b 02 	lds	r24, 0x022B
    4a36:	81 30       	cpi	r24, 0x01	; 1
    4a38:	41 f4       	brne	.+16     	; 0x4a4a <A_Void_CCS_Check_Task+0x160>
			{
				H_Lcd_Void_LCDGoTo(1, 5);
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	65 e0       	ldi	r22, 0x05	; 5
    4a3e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF");
    4a42:	8d eb       	ldi	r24, 0xBD	; 189
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_CCS_State = CCS_OFF ;
    4a4a:	10 92 29 02 	sts	0x0229, r1
    4a4e:	03 c0       	rjmp	.+6      	; 0x4a56 <A_Void_CCS_Check_Task+0x16c>
			break;
		}
	}
	else
	{
		H_LED_Void_LedOn(ALARM_LED);
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	0e 94 35 11 	call	0x226a	; 0x226a <H_LED_Void_LedOn>
	}
}
    4a56:	60 96       	adiw	r28, 0x10	; 16
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	08 95       	ret

00004a68 <A_Void_BAS_Check_Task>:

void A_Void_BAS_Check_Task(void)
{
    4a68:	df 93       	push	r29
    4a6a:	cf 93       	push	r28
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	60 97       	sbiw	r28, 0x10	; 16
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	f8 94       	cli
    4a76:	de bf       	out	0x3e, r29	; 62
    4a78:	0f be       	out	0x3f, r0	; 63
    4a7a:	cd bf       	out	0x3d, r28	; 61
	H_Buzzer_Void_BuzzerOn();
    4a7c:	0e 94 14 1b 	call	0x3628	; 0x3628 <H_Buzzer_Void_BuzzerOn>
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	a8 e4       	ldi	r26, 0x48	; 72
    4a86:	b2 e4       	ldi	r27, 0x42	; 66
    4a88:	8b 87       	std	Y+11, r24	; 0x0b
    4a8a:	9c 87       	std	Y+12, r25	; 0x0c
    4a8c:	ad 87       	std	Y+13, r26	; 0x0d
    4a8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	4a e7       	ldi	r20, 0x7A	; 122
    4a9e:	55 e4       	ldi	r21, 0x45	; 69
    4aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	8f 83       	std	Y+7, r24	; 0x07
    4aaa:	98 87       	std	Y+8, r25	; 0x08
    4aac:	a9 87       	std	Y+9, r26	; 0x09
    4aae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ab2:	78 85       	ldd	r23, Y+8	; 0x08
    4ab4:	89 85       	ldd	r24, Y+9	; 0x09
    4ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	40 e8       	ldi	r20, 0x80	; 128
    4abe:	5f e3       	ldi	r21, 0x3F	; 63
    4ac0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ac4:	88 23       	and	r24, r24
    4ac6:	2c f4       	brge	.+10     	; 0x4ad2 <A_Void_BAS_Check_Task+0x6a>
		__ticks = 1;
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	9e 83       	std	Y+6, r25	; 0x06
    4ace:	8d 83       	std	Y+5, r24	; 0x05
    4ad0:	3f c0       	rjmp	.+126    	; 0x4b50 <A_Void_BAS_Check_Task+0xe8>
	else if (__tmp > 65535)
    4ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad4:	78 85       	ldd	r23, Y+8	; 0x08
    4ad6:	89 85       	ldd	r24, Y+9	; 0x09
    4ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	3f ef       	ldi	r19, 0xFF	; 255
    4ade:	4f e7       	ldi	r20, 0x7F	; 127
    4ae0:	57 e4       	ldi	r21, 0x47	; 71
    4ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ae6:	18 16       	cp	r1, r24
    4ae8:	4c f5       	brge	.+82     	; 0x4b3c <A_Void_BAS_Check_Task+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	40 e2       	ldi	r20, 0x20	; 32
    4af8:	51 e4       	ldi	r21, 0x41	; 65
    4afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	9e 83       	std	Y+6, r25	; 0x06
    4b10:	8d 83       	std	Y+5, r24	; 0x05
    4b12:	0f c0       	rjmp	.+30     	; 0x4b32 <A_Void_BAS_Check_Task+0xca>
    4b14:	80 e9       	ldi	r24, 0x90	; 144
    4b16:	91 e0       	ldi	r25, 0x01	; 1
    4b18:	9c 83       	std	Y+4, r25	; 0x04
    4b1a:	8b 83       	std	Y+3, r24	; 0x03
    4b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b20:	01 97       	sbiw	r24, 0x01	; 1
    4b22:	f1 f7       	brne	.-4      	; 0x4b20 <A_Void_BAS_Check_Task+0xb8>
    4b24:	9c 83       	std	Y+4, r25	; 0x04
    4b26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b28:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2c:	01 97       	sbiw	r24, 0x01	; 1
    4b2e:	9e 83       	std	Y+6, r25	; 0x06
    4b30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b32:	8d 81       	ldd	r24, Y+5	; 0x05
    4b34:	9e 81       	ldd	r25, Y+6	; 0x06
    4b36:	00 97       	sbiw	r24, 0x00	; 0
    4b38:	69 f7       	brne	.-38     	; 0x4b14 <A_Void_BAS_Check_Task+0xac>
    4b3a:	14 c0       	rjmp	.+40     	; 0x4b64 <A_Void_BAS_Check_Task+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b3e:	78 85       	ldd	r23, Y+8	; 0x08
    4b40:	89 85       	ldd	r24, Y+9	; 0x09
    4b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b48:	dc 01       	movw	r26, r24
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	9e 83       	std	Y+6, r25	; 0x06
    4b4e:	8d 83       	std	Y+5, r24	; 0x05
    4b50:	8d 81       	ldd	r24, Y+5	; 0x05
    4b52:	9e 81       	ldd	r25, Y+6	; 0x06
    4b54:	9a 83       	std	Y+2, r25	; 0x02
    4b56:	89 83       	std	Y+1, r24	; 0x01
    4b58:	89 81       	ldd	r24, Y+1	; 0x01
    4b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b5c:	01 97       	sbiw	r24, 0x01	; 1
    4b5e:	f1 f7       	brne	.-4      	; 0x4b5c <A_Void_BAS_Check_Task+0xf4>
    4b60:	9a 83       	std	Y+2, r25	; 0x02
    4b62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	H_Buzzer_Void_BuzzerOff();
    4b64:	0e 94 1f 1b 	call	0x363e	; 0x363e <H_Buzzer_Void_BuzzerOff>

	if(GearBox_State == GEARBOX_D)
    4b68:	80 91 28 02 	lds	r24, 0x0228
    4b6c:	81 30       	cpi	r24, 0x01	; 1
    4b6e:	91 f5       	brne	.+100    	; 0x4bd4 <A_Void_BAS_Check_Task+0x16c>
	{
		flag_for_DM = DRIVER_NOT_SLEEP ;
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	80 93 09 02 	sts	0x0209, r24
		switch(g_BAS_State)
    4b76:	80 91 2a 02 	lds	r24, 0x022A
    4b7a:	28 2f       	mov	r18, r24
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	38 8b       	std	Y+16, r19	; 0x10
    4b80:	2f 87       	std	Y+15, r18	; 0x0f
    4b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b84:	98 89       	ldd	r25, Y+16	; 0x10
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	31 f0       	breq	.+12     	; 0x4b96 <A_Void_BAS_Check_Task+0x12e>
    4b8a:	2f 85       	ldd	r18, Y+15	; 0x0f
    4b8c:	38 89       	ldd	r19, Y+16	; 0x10
    4b8e:	21 30       	cpi	r18, 0x01	; 1
    4b90:	31 05       	cpc	r19, r1
    4b92:	89 f0       	breq	.+34     	; 0x4bb6 <A_Void_BAS_Check_Task+0x14e>
    4b94:	22 c0       	rjmp	.+68     	; 0x4bda <A_Void_BAS_Check_Task+0x172>
		{
		case BAS_OFF :
			if(g_LCD_Tab == LCD_TAB_2)
    4b96:	80 91 2b 02 	lds	r24, 0x022B
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	41 f4       	brne	.+16     	; 0x4bae <A_Void_BAS_Check_Task+0x146>
			{
				H_Lcd_Void_LCDGoTo(1, 16);
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	60 e1       	ldi	r22, 0x10	; 16
    4ba2:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"ON ");
    4ba6:	81 ef       	ldi	r24, 0xF1	; 241
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_BAS_State = BAS_ON ;
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	80 93 2a 02 	sts	0x022A, r24
    4bb4:	12 c0       	rjmp	.+36     	; 0x4bda <A_Void_BAS_Check_Task+0x172>
			break;
		case BAS_ON :
			if(g_LCD_Tab == LCD_TAB_2)
    4bb6:	80 91 2b 02 	lds	r24, 0x022B
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	41 f4       	brne	.+16     	; 0x4bce <A_Void_BAS_Check_Task+0x166>
			{
				H_Lcd_Void_LCDGoTo(1,16);
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	60 e1       	ldi	r22, 0x10	; 16
    4bc2:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF");
    4bc6:	8d eb       	ldi	r24, 0xBD	; 189
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
			}
			g_BAS_State = BAS_OFF ;
    4bce:	10 92 2a 02 	sts	0x022A, r1
    4bd2:	03 c0       	rjmp	.+6      	; 0x4bda <A_Void_BAS_Check_Task+0x172>
			break;
		}
	}
	else
	{
		H_LED_Void_LedOn(ALARM_LED);
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	0e 94 35 11 	call	0x226a	; 0x226a <H_LED_Void_LedOn>
	}
}
    4bda:	60 96       	adiw	r28, 0x10	; 16
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	cf 91       	pop	r28
    4be8:	df 91       	pop	r29
    4bea:	08 95       	ret

00004bec <A_Void_SpeedLimiter_Switch_State>:

void A_Void_SpeedLimiter_Switch_State(void)
{
    4bec:	df 93       	push	r29
    4bee:	cf 93       	push	r28
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <A_Void_SpeedLimiter_Switch_State+0x6>
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
	if(GearBox_State == GEARBOX_D)
    4bf6:	80 91 28 02 	lds	r24, 0x0228
    4bfa:	81 30       	cpi	r24, 0x01	; 1
    4bfc:	91 f5       	brne	.+100    	; 0x4c62 <A_Void_SpeedLimiter_Switch_State+0x76>
	{
		flag_for_DM = DRIVER_NOT_SLEEP ;
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	80 93 09 02 	sts	0x0209, r24
		switch(g_Speed_Limit_State)
    4c04:	80 91 27 02 	lds	r24, 0x0227
    4c08:	28 2f       	mov	r18, r24
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	3a 83       	std	Y+2, r19	; 0x02
    4c0e:	29 83       	std	Y+1, r18	; 0x01
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	31 f0       	breq	.+12     	; 0x4c24 <A_Void_SpeedLimiter_Switch_State+0x38>
    4c18:	29 81       	ldd	r18, Y+1	; 0x01
    4c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    4c1c:	21 30       	cpi	r18, 0x01	; 1
    4c1e:	31 05       	cpc	r19, r1
    4c20:	89 f0       	breq	.+34     	; 0x4c44 <A_Void_SpeedLimiter_Switch_State+0x58>
    4c22:	22 c0       	rjmp	.+68     	; 0x4c68 <A_Void_SpeedLimiter_Switch_State+0x7c>
		{
		case SPD_LIM_OFF :
			g_Speed_Limit_State = SPD_LIM_ON ;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	80 93 27 02 	sts	0x0227, r24
			if(g_LCD_Tab == LCD_TAB_1)
    4c2a:	80 91 2b 02 	lds	r24, 0x022B
    4c2e:	88 23       	and	r24, r24
    4c30:	d9 f4       	brne	.+54     	; 0x4c68 <A_Void_SpeedLimiter_Switch_State+0x7c>
			{
				H_Lcd_Void_LCDGoTo(1, 15);
    4c32:	81 e0       	ldi	r24, 0x01	; 1
    4c34:	6f e0       	ldi	r22, 0x0F	; 15
    4c36:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"ON) ");
    4c3a:	85 ef       	ldi	r24, 0xF5	; 245
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    4c42:	12 c0       	rjmp	.+36     	; 0x4c68 <A_Void_SpeedLimiter_Switch_State+0x7c>
			}
			break;
		case SPD_LIM_ON :
			g_Speed_Limit_State = SPD_LIM_OFF ;
    4c44:	10 92 27 02 	sts	0x0227, r1
			if(g_LCD_Tab == LCD_TAB_1)
    4c48:	80 91 2b 02 	lds	r24, 0x022B
    4c4c:	88 23       	and	r24, r24
    4c4e:	61 f4       	brne	.+24     	; 0x4c68 <A_Void_SpeedLimiter_Switch_State+0x7c>
			{
				H_Lcd_Void_LCDGoTo(1, 15);
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	6f e0       	ldi	r22, 0x0F	; 15
    4c54:	0e 94 71 19 	call	0x32e2	; 0x32e2 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString((u8*)"OFF)");
    4c58:	8a ef       	ldi	r24, 0xFA	; 250
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	0e 94 b6 18 	call	0x316c	; 0x316c <H_Lcd_Void_LCDWriteString>
    4c60:	03 c0       	rjmp	.+6      	; 0x4c68 <A_Void_SpeedLimiter_Switch_State+0x7c>
			break;
		}
	}
	else
	{
		H_LED_Void_LedOn(ALARM_LED);
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	0e 94 35 11 	call	0x226a	; 0x226a <H_LED_Void_LedOn>
	}
}
    4c68:	0f 90       	pop	r0
    4c6a:	0f 90       	pop	r0
    4c6c:	cf 91       	pop	r28
    4c6e:	df 91       	pop	r29
    4c70:	08 95       	ret

00004c72 <main>:
/*********************************************************************/
#include "States_Interface.h"
/*********************************************************************/

int main()
{
    4c72:	df 93       	push	r29
    4c74:	cf 93       	push	r28
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
	A_Void_Init_System();
    4c7a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <A_Void_Init_System>

 	while (1)
	{
 		A_Void_BrakeLED_Check_State();
    4c7e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <A_Void_BrakeLED_Check_State>
 		A_Void_Keypad_Check_State();
    4c82:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <A_Void_Keypad_Check_State>
 		A_Void_LCD_Display();
    4c86:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <A_Void_LCD_Display>
 		A_Void_Speed_Check();
    4c8a:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <A_Void_Speed_Check>
 		A_Void_Drive_Monitor () ;
    4c8e:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <A_Void_Drive_Monitor>
 		A_Void_Display_Time () ;
    4c92:	0e 94 12 20 	call	0x4024	; 0x4024 <A_Void_Display_Time>
 		A_Void_Display_KMG () ;
    4c96:	0e 94 02 21 	call	0x4204	; 0x4204 <A_Void_Display_KMG>
    4c9a:	f1 cf       	rjmp	.-30     	; 0x4c7e <main+0xc>

00004c9c <__mulsi3>:
    4c9c:	62 9f       	mul	r22, r18
    4c9e:	d0 01       	movw	r26, r0
    4ca0:	73 9f       	mul	r23, r19
    4ca2:	f0 01       	movw	r30, r0
    4ca4:	82 9f       	mul	r24, r18
    4ca6:	e0 0d       	add	r30, r0
    4ca8:	f1 1d       	adc	r31, r1
    4caa:	64 9f       	mul	r22, r20
    4cac:	e0 0d       	add	r30, r0
    4cae:	f1 1d       	adc	r31, r1
    4cb0:	92 9f       	mul	r25, r18
    4cb2:	f0 0d       	add	r31, r0
    4cb4:	83 9f       	mul	r24, r19
    4cb6:	f0 0d       	add	r31, r0
    4cb8:	74 9f       	mul	r23, r20
    4cba:	f0 0d       	add	r31, r0
    4cbc:	65 9f       	mul	r22, r21
    4cbe:	f0 0d       	add	r31, r0
    4cc0:	99 27       	eor	r25, r25
    4cc2:	72 9f       	mul	r23, r18
    4cc4:	b0 0d       	add	r27, r0
    4cc6:	e1 1d       	adc	r30, r1
    4cc8:	f9 1f       	adc	r31, r25
    4cca:	63 9f       	mul	r22, r19
    4ccc:	b0 0d       	add	r27, r0
    4cce:	e1 1d       	adc	r30, r1
    4cd0:	f9 1f       	adc	r31, r25
    4cd2:	bd 01       	movw	r22, r26
    4cd4:	cf 01       	movw	r24, r30
    4cd6:	11 24       	eor	r1, r1
    4cd8:	08 95       	ret

00004cda <__udivmodqi4>:
    4cda:	99 1b       	sub	r25, r25
    4cdc:	79 e0       	ldi	r23, 0x09	; 9
    4cde:	04 c0       	rjmp	.+8      	; 0x4ce8 <__udivmodqi4_ep>

00004ce0 <__udivmodqi4_loop>:
    4ce0:	99 1f       	adc	r25, r25
    4ce2:	96 17       	cp	r25, r22
    4ce4:	08 f0       	brcs	.+2      	; 0x4ce8 <__udivmodqi4_ep>
    4ce6:	96 1b       	sub	r25, r22

00004ce8 <__udivmodqi4_ep>:
    4ce8:	88 1f       	adc	r24, r24
    4cea:	7a 95       	dec	r23
    4cec:	c9 f7       	brne	.-14     	; 0x4ce0 <__udivmodqi4_loop>
    4cee:	80 95       	com	r24
    4cf0:	08 95       	ret

00004cf2 <__udivmodhi4>:
    4cf2:	aa 1b       	sub	r26, r26
    4cf4:	bb 1b       	sub	r27, r27
    4cf6:	51 e1       	ldi	r21, 0x11	; 17
    4cf8:	07 c0       	rjmp	.+14     	; 0x4d08 <__udivmodhi4_ep>

00004cfa <__udivmodhi4_loop>:
    4cfa:	aa 1f       	adc	r26, r26
    4cfc:	bb 1f       	adc	r27, r27
    4cfe:	a6 17       	cp	r26, r22
    4d00:	b7 07       	cpc	r27, r23
    4d02:	10 f0       	brcs	.+4      	; 0x4d08 <__udivmodhi4_ep>
    4d04:	a6 1b       	sub	r26, r22
    4d06:	b7 0b       	sbc	r27, r23

00004d08 <__udivmodhi4_ep>:
    4d08:	88 1f       	adc	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	5a 95       	dec	r21
    4d0e:	a9 f7       	brne	.-22     	; 0x4cfa <__udivmodhi4_loop>
    4d10:	80 95       	com	r24
    4d12:	90 95       	com	r25
    4d14:	bc 01       	movw	r22, r24
    4d16:	cd 01       	movw	r24, r26
    4d18:	08 95       	ret

00004d1a <__udivmodsi4>:
    4d1a:	a1 e2       	ldi	r26, 0x21	; 33
    4d1c:	1a 2e       	mov	r1, r26
    4d1e:	aa 1b       	sub	r26, r26
    4d20:	bb 1b       	sub	r27, r27
    4d22:	fd 01       	movw	r30, r26
    4d24:	0d c0       	rjmp	.+26     	; 0x4d40 <__udivmodsi4_ep>

00004d26 <__udivmodsi4_loop>:
    4d26:	aa 1f       	adc	r26, r26
    4d28:	bb 1f       	adc	r27, r27
    4d2a:	ee 1f       	adc	r30, r30
    4d2c:	ff 1f       	adc	r31, r31
    4d2e:	a2 17       	cp	r26, r18
    4d30:	b3 07       	cpc	r27, r19
    4d32:	e4 07       	cpc	r30, r20
    4d34:	f5 07       	cpc	r31, r21
    4d36:	20 f0       	brcs	.+8      	; 0x4d40 <__udivmodsi4_ep>
    4d38:	a2 1b       	sub	r26, r18
    4d3a:	b3 0b       	sbc	r27, r19
    4d3c:	e4 0b       	sbc	r30, r20
    4d3e:	f5 0b       	sbc	r31, r21

00004d40 <__udivmodsi4_ep>:
    4d40:	66 1f       	adc	r22, r22
    4d42:	77 1f       	adc	r23, r23
    4d44:	88 1f       	adc	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	1a 94       	dec	r1
    4d4a:	69 f7       	brne	.-38     	; 0x4d26 <__udivmodsi4_loop>
    4d4c:	60 95       	com	r22
    4d4e:	70 95       	com	r23
    4d50:	80 95       	com	r24
    4d52:	90 95       	com	r25
    4d54:	9b 01       	movw	r18, r22
    4d56:	ac 01       	movw	r20, r24
    4d58:	bd 01       	movw	r22, r26
    4d5a:	cf 01       	movw	r24, r30
    4d5c:	08 95       	ret

00004d5e <__divmodsi4>:
    4d5e:	97 fb       	bst	r25, 7
    4d60:	09 2e       	mov	r0, r25
    4d62:	05 26       	eor	r0, r21
    4d64:	0e d0       	rcall	.+28     	; 0x4d82 <__divmodsi4_neg1>
    4d66:	57 fd       	sbrc	r21, 7
    4d68:	04 d0       	rcall	.+8      	; 0x4d72 <__divmodsi4_neg2>
    4d6a:	d7 df       	rcall	.-82     	; 0x4d1a <__udivmodsi4>
    4d6c:	0a d0       	rcall	.+20     	; 0x4d82 <__divmodsi4_neg1>
    4d6e:	00 1c       	adc	r0, r0
    4d70:	38 f4       	brcc	.+14     	; 0x4d80 <__divmodsi4_exit>

00004d72 <__divmodsi4_neg2>:
    4d72:	50 95       	com	r21
    4d74:	40 95       	com	r20
    4d76:	30 95       	com	r19
    4d78:	21 95       	neg	r18
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	4f 4f       	sbci	r20, 0xFF	; 255
    4d7e:	5f 4f       	sbci	r21, 0xFF	; 255

00004d80 <__divmodsi4_exit>:
    4d80:	08 95       	ret

00004d82 <__divmodsi4_neg1>:
    4d82:	f6 f7       	brtc	.-4      	; 0x4d80 <__divmodsi4_exit>
    4d84:	90 95       	com	r25
    4d86:	80 95       	com	r24
    4d88:	70 95       	com	r23
    4d8a:	61 95       	neg	r22
    4d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d90:	9f 4f       	sbci	r25, 0xFF	; 255
    4d92:	08 95       	ret

00004d94 <__prologue_saves__>:
    4d94:	2f 92       	push	r2
    4d96:	3f 92       	push	r3
    4d98:	4f 92       	push	r4
    4d9a:	5f 92       	push	r5
    4d9c:	6f 92       	push	r6
    4d9e:	7f 92       	push	r7
    4da0:	8f 92       	push	r8
    4da2:	9f 92       	push	r9
    4da4:	af 92       	push	r10
    4da6:	bf 92       	push	r11
    4da8:	cf 92       	push	r12
    4daa:	df 92       	push	r13
    4dac:	ef 92       	push	r14
    4dae:	ff 92       	push	r15
    4db0:	0f 93       	push	r16
    4db2:	1f 93       	push	r17
    4db4:	cf 93       	push	r28
    4db6:	df 93       	push	r29
    4db8:	cd b7       	in	r28, 0x3d	; 61
    4dba:	de b7       	in	r29, 0x3e	; 62
    4dbc:	ca 1b       	sub	r28, r26
    4dbe:	db 0b       	sbc	r29, r27
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	de bf       	out	0x3e, r29	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	cd bf       	out	0x3d, r28	; 61
    4dca:	09 94       	ijmp

00004dcc <__epilogue_restores__>:
    4dcc:	2a 88       	ldd	r2, Y+18	; 0x12
    4dce:	39 88       	ldd	r3, Y+17	; 0x11
    4dd0:	48 88       	ldd	r4, Y+16	; 0x10
    4dd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dda:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ddc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dde:	b9 84       	ldd	r11, Y+9	; 0x09
    4de0:	c8 84       	ldd	r12, Y+8	; 0x08
    4de2:	df 80       	ldd	r13, Y+7	; 0x07
    4de4:	ee 80       	ldd	r14, Y+6	; 0x06
    4de6:	fd 80       	ldd	r15, Y+5	; 0x05
    4de8:	0c 81       	ldd	r16, Y+4	; 0x04
    4dea:	1b 81       	ldd	r17, Y+3	; 0x03
    4dec:	aa 81       	ldd	r26, Y+2	; 0x02
    4dee:	b9 81       	ldd	r27, Y+1	; 0x01
    4df0:	ce 0f       	add	r28, r30
    4df2:	d1 1d       	adc	r29, r1
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	ed 01       	movw	r28, r26
    4e00:	08 95       	ret

00004e02 <_exit>:
    4e02:	f8 94       	cli

00004e04 <__stop_program>:
    4e04:	ff cf       	rjmp	.-2      	; 0x4e04 <__stop_program>
